
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001be8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001d78  08001d78  00002d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dc0  08001dc0  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  08001dc0  08001dc0  00002dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001dc8  08001dc8  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dc8  08001dc8  00002dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001dcc  08001dcc  00002dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001dd0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          00000598  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005f8  200005f8  00003060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001f67  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000872  00000000  00000000  00004ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  00005868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001d8  00000000  00000000  00005ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003bc2  00000000  00000000  00005cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002e57  00000000  00000000  0000987a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cf5f  00000000  00000000  0000c6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00019630  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010e4  00000000  00000000  00019674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0001a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001d60 	.word	0x08001d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08001d60 	.word	0x08001d60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
I2C_Handle_t I2C1Handle;



int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	I2C1GPIOInits();
 8000274:	f000 f830 	bl	80002d8 <I2C1GPIOInits>

	I2C1Inits();
 8000278:	f000 f856 	bl	8000328 <I2C1Inits>

	ButtonGPIOInits();
 800027c:	f000 f80e 	bl	800029c <ButtonGPIOInits>

	GPIO_IRQITConfig(IRQ_EXTI0, ENABLE);
 8000280:	2101      	movs	r1, #1
 8000282:	2006      	movs	r0, #6
 8000284:	f000 fd9e 	bl	8000dc4 <GPIO_IRQITConfig>
			I2C_MasterReceiveData(&I2C1Handle, buffer, length, SLAVEADDR);
	 * }
	 * I2C_PeripheralControl(I2C1Handle, DISABLE);
	 */

	printf("Data received: %s\n",buffer);
 8000288:	4902      	ldr	r1, [pc, #8]	@ (8000294 <main+0x24>)
 800028a:	4803      	ldr	r0, [pc, #12]	@ (8000298 <main+0x28>)
 800028c:	f000 ff00 	bl	8001090 <iprintf>

	while(1);
 8000290:	bf00      	nop
 8000292:	e7fd      	b.n	8000290 <main+0x20>
 8000294:	2000007c 	.word	0x2000007c
 8000298:	08001d78 	.word	0x08001d78

0800029c <ButtonGPIOInits>:

	return 0;
}

void ButtonGPIOInits(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
	GPIO_Handle_t Button;
	memset(&Button,0,sizeof(Button));
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	220c      	movs	r2, #12
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 ff46 	bl	800113a <memset>
	Button.pGPIOx = GPIOA;
 80002ae:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <ButtonGPIOInits+0x38>)
 80002b0:	607b      	str	r3, [r7, #4]
	Button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	723b      	strb	r3, [r7, #8]
	Button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80002b6:	2304      	movs	r3, #4
 80002b8:	727b      	strb	r3, [r7, #9]
	Button.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OUT_SPEED_HIGH;
 80002ba:	2302      	movs	r3, #2
 80002bc:	72bb      	strb	r3, [r7, #10]
	Button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NONE;
 80002be:	2300      	movs	r3, #0
 80002c0:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&Button);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fbe7 	bl	8000a98 <GPIO_Init>
}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40020000 	.word	0x40020000

080002d8 <I2C1GPIOInits>:

void I2C1GPIOInits(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C1GPIO;
	memset(&I2C1GPIO,0,sizeof(I2C1GPIO));
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	220c      	movs	r2, #12
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 ff28 	bl	800113a <memset>
	I2C1GPIO.pGPIOx = GPIOB;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <I2C1GPIOInits+0x4c>)
 80002ec:	607b      	str	r3, [r7, #4]
	I2C1GPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ee:	2302      	movs	r3, #2
 80002f0:	727b      	strb	r3, [r7, #9]
	I2C1GPIO.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALTFN_AF4;
 80002f2:	2304      	movs	r3, #4
 80002f4:	737b      	strb	r3, [r7, #13]
	I2C1GPIO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OUT_SPEED_LOW;
 80002f6:	2300      	movs	r3, #0
 80002f8:	72bb      	strb	r3, [r7, #10]
	I2C1GPIO.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_OD;
 80002fa:	2301      	movs	r3, #1
 80002fc:	733b      	strb	r3, [r7, #12]
	I2C1GPIO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_PULLUP;
 80002fe:	2301      	movs	r3, #1
 8000300:	72fb      	strb	r3, [r7, #11]

	I2C1GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000302:	2306      	movs	r3, #6
 8000304:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C1GPIO);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fbc5 	bl	8000a98 <GPIO_Init>

	I2C1GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800030e:	2307      	movs	r3, #7
 8000310:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C1GPIO);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fbbf 	bl	8000a98 <GPIO_Init>
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40020400 	.word	0x40020400

08000328 <I2C1Inits>:

void I2C1Inits(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <I2C1Inits+0x24>)
 800032e:	4a08      	ldr	r2, [pc, #32]	@ (8000350 <I2C1Inits+0x28>)
 8000330:	609a      	str	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACKCTRL_ACK_EN;
 8000332:	4b06      	ldr	r3, [pc, #24]	@ (800034c <I2C1Inits+0x24>)
 8000334:	2201      	movs	r2, #1
 8000336:	715a      	strb	r2, [r3, #5]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x68;
 8000338:	4b04      	ldr	r3, [pc, #16]	@ (800034c <I2C1Inits+0x24>)
 800033a:	2268      	movs	r2, #104	@ 0x68
 800033c:	711a      	strb	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM_KHZ;
 800033e:	4b03      	ldr	r3, [pc, #12]	@ (800034c <I2C1Inits+0x24>)
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <I2C1Inits+0x2c>)
 8000342:	601a      	str	r2, [r3, #0]

}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	20000480 	.word	0x20000480
 8000350:	40005400 	.word	0x40005400
 8000354:	000186a0 	.word	0x000186a0

08000358 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af02      	add	r7, sp, #8
	GPIO_IRQHandling(GPIO_PIN_0);
 800035e:	2000      	movs	r0, #0
 8000360:	f000 fdb4 	bl	8000ecc <GPIO_IRQHandling>

	I2C_PeripheralControl(I2C1Handle.pI2Cx, ENABLE);
 8000364:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <EXTI0_IRQHandler+0x78>)
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	2101      	movs	r1, #1
 800036a:	4618      	mov	r0, r3
 800036c:	f000 f958 	bl	8000620 <I2C_PeripheralControl>

	I2C_ManageAcking(I2C1Handle.pI2Cx, ENABLE);
 8000370:	4b17      	ldr	r3, [pc, #92]	@ (80003d0 <EXTI0_IRQHandler+0x78>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	2101      	movs	r1, #1
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f8fd 	bl	8000576 <I2C_ManageAcking>

	I2C_MasterSendData(&I2C1Handle, &CMDReadLen, 1, SLAVEADDR, I2C_SR);
 800037c:	2301      	movs	r3, #1
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	2361      	movs	r3, #97	@ 0x61
 8000382:	2201      	movs	r2, #1
 8000384:	4913      	ldr	r1, [pc, #76]	@ (80003d4 <EXTI0_IRQHandler+0x7c>)
 8000386:	4812      	ldr	r0, [pc, #72]	@ (80003d0 <EXTI0_IRQHandler+0x78>)
 8000388:	f000 f981 	bl	800068e <I2C_MasterSendData>

	I2C_MasterReceiveData(&I2C1Handle, &length, 1, SLAVEADDR, I2C_SR);
 800038c:	2301      	movs	r3, #1
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2361      	movs	r3, #97	@ 0x61
 8000392:	2201      	movs	r2, #1
 8000394:	4910      	ldr	r1, [pc, #64]	@ (80003d8 <EXTI0_IRQHandler+0x80>)
 8000396:	480e      	ldr	r0, [pc, #56]	@ (80003d0 <EXTI0_IRQHandler+0x78>)
 8000398:	f000 f9e8 	bl	800076c <I2C_MasterReceiveData>

	I2C_MasterSendData(&I2C1Handle, &CMDReadData, 1, SLAVEADDR,I2C_SR);
 800039c:	2301      	movs	r3, #1
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	2361      	movs	r3, #97	@ 0x61
 80003a2:	2201      	movs	r2, #1
 80003a4:	490d      	ldr	r1, [pc, #52]	@ (80003dc <EXTI0_IRQHandler+0x84>)
 80003a6:	480a      	ldr	r0, [pc, #40]	@ (80003d0 <EXTI0_IRQHandler+0x78>)
 80003a8:	f000 f971 	bl	800068e <I2C_MasterSendData>

	I2C_MasterReceiveData(&I2C1Handle, buffer, length, SLAVEADDR, I2C_NO_SR);
 80003ac:	4b0a      	ldr	r3, [pc, #40]	@ (80003d8 <EXTI0_IRQHandler+0x80>)
 80003ae:	781a      	ldrb	r2, [r3, #0]
 80003b0:	2300      	movs	r3, #0
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	2361      	movs	r3, #97	@ 0x61
 80003b6:	490a      	ldr	r1, [pc, #40]	@ (80003e0 <EXTI0_IRQHandler+0x88>)
 80003b8:	4805      	ldr	r0, [pc, #20]	@ (80003d0 <EXTI0_IRQHandler+0x78>)
 80003ba:	f000 f9d7 	bl	800076c <I2C_MasterReceiveData>

	I2C_PeripheralControl(I2C1Handle.pI2Cx, DISABLE);
 80003be:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <EXTI0_IRQHandler+0x78>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 f92b 	bl	8000620 <I2C_PeripheralControl>
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000480 	.word	0x20000480
 80003d4:	20000000 	.word	0x20000000
 80003d8:	2000047c 	.word	0x2000047c
 80003dc:	20000001 	.word	0x20000001
 80003e0:	2000007c 	.word	0x2000007c

080003e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	e00a      	b.n	800040c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003f6:	f3af 8000 	nop.w
 80003fa:	4601      	mov	r1, r0
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	1c5a      	adds	r2, r3, #1
 8000400:	60ba      	str	r2, [r7, #8]
 8000402:	b2ca      	uxtb	r2, r1
 8000404:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	3301      	adds	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	697a      	ldr	r2, [r7, #20]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	429a      	cmp	r2, r3
 8000412:	dbf0      	blt.n	80003f6 <_read+0x12>
  }

  return len;
 8000414:	687b      	ldr	r3, [r7, #4]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b086      	sub	sp, #24
 8000422:	af00      	add	r7, sp, #0
 8000424:	60f8      	str	r0, [r7, #12]
 8000426:	60b9      	str	r1, [r7, #8]
 8000428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	e009      	b.n	8000444 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	1c5a      	adds	r2, r3, #1
 8000434:	60ba      	str	r2, [r7, #8]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	3301      	adds	r3, #1
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	697a      	ldr	r2, [r7, #20]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	429a      	cmp	r2, r3
 800044a:	dbf1      	blt.n	8000430 <_write+0x12>
  }
  return len;
 800044c:	687b      	ldr	r3, [r7, #4]
}
 800044e:	4618      	mov	r0, r3
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_close>:

int _close(int file)
{
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800047c:	605a      	str	r2, [r3, #4]
  return 0;
 800047e:	2300      	movs	r3, #0
}
 8000480:	4618      	mov	r0, r3
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <_isatty>:

int _isatty(int file)
{
 800048a:	b480      	push	{r7}
 800048c:	b083      	sub	sp, #12
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000492:	2301      	movs	r3, #1
}
 8000494:	4618      	mov	r0, r3
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr

0800049e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800049e:	b480      	push	{r7}
 80004a0:	b085      	sub	sp, #20
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	60f8      	str	r0, [r7, #12]
 80004a6:	60b9      	str	r1, [r7, #8]
 80004a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004aa:	2300      	movs	r3, #0
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
	...

080004b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c0:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <_sbrk+0x5c>)
 80004c2:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <_sbrk+0x60>)
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004cc:	4b13      	ldr	r3, [pc, #76]	@ (800051c <_sbrk+0x64>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d102      	bne.n	80004da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d4:	4b11      	ldr	r3, [pc, #68]	@ (800051c <_sbrk+0x64>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	@ (8000520 <_sbrk+0x68>)
 80004d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004da:	4b10      	ldr	r3, [pc, #64]	@ (800051c <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d207      	bcs.n	80004f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e8:	f000 fe76 	bl	80011d8 <__errno>
 80004ec:	4603      	mov	r3, r0
 80004ee:	220c      	movs	r2, #12
 80004f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
 80004f6:	e009      	b.n	800050c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004fe:	4b07      	ldr	r3, [pc, #28]	@ (800051c <_sbrk+0x64>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	4a05      	ldr	r2, [pc, #20]	@ (800051c <_sbrk+0x64>)
 8000508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20020000 	.word	0x20020000
 8000518:	00000400 	.word	0x00000400
 800051c:	200004a8 	.word	0x200004a8
 8000520:	200005f8 	.word	0x200005f8

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	@ (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000528:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	@ (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	@ (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	@ (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	@ (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000552:	f000 fe47 	bl	80011e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff fe8b 	bl	8000270 <main>

0800055a <LoopForever>:

LoopForever:
  b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000568:	08001dd0 	.word	0x08001dd0
  ldr r2, =_sbss
 800056c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000570:	200005f8 	.word	0x200005f8

08000574 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC_IRQHandler>

08000576 <I2C_ManageAcking>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000582:	78fb      	ldrb	r3, [r7, #3]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d106      	bne.n	8000596 <I2C_ManageAcking+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]
	}
	else if(EnOrDi == DISABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
	}
}
 8000594:	e008      	b.n	80005a8 <I2C_ManageAcking+0x32>
	else if(EnOrDi == DISABLE)
 8000596:	78fb      	ldrb	r3, [r7, #3]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d105      	bne.n	80005a8 <I2C_ManageAcking+0x32>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	601a      	str	r2, [r3, #0]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b084      	sub	sp, #16
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// check if device is master mode or slave mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d01f      	beq.n	8000608 <I2C_ClearADDRFlag+0x56>
	{
		// device in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	7f1b      	ldrb	r3, [r3, #28]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d112      	bne.n	80005f6 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6a1b      	ldr	r3, [r3, #32]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d11f      	bne.n	8000618 <I2C_ClearADDRFlag+0x66>
			{
				// disable the ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffc9 	bl	8000576 <I2C_ManageAcking>

				// clear ADDR flag
				dummyRead = pI2CHandle->pI2Cx->SR1;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}


}
 80005f4:	e010      	b.n	8000618 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	60fb      	str	r3, [r7, #12]
}
 8000606:	e007      	b.n	8000618 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	60fb      	str	r3, [r7, #12]
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <I2C_PeripheralControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d106      	bne.n	8000640 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f043 0201 	orr.w	r2, r3, #1
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	601a      	str	r2, [r3, #0]
	}
	else if(EnOrDi == DISABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
	}
}
 800063e:	e008      	b.n	8000652 <I2C_PeripheralControl+0x32>
	else if(EnOrDi == DISABLE)
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d105      	bne.n	8000652 <I2C_PeripheralControl+0x32>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f043 0201 	orr.w	r2, r3, #1
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	601a      	str	r2, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <I2C_GetFlagStatus>:
 *
 * @Note			-
 *
 *************************************************************************************************/
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	if((pI2Cx->SR1 & FlagName) || (pI2Cx->SR2 & FlagName))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	695a      	ldr	r2, [r3, #20]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	4013      	ands	r3, r2
 800066e:	2b00      	cmp	r3, #0
 8000670:	d105      	bne.n	800067e <I2C_GetFlagStatus+0x22>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	699a      	ldr	r2, [r3, #24]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	4013      	ands	r3, r2
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <I2C_GetFlagStatus+0x26>
	{
		return FLAG_SET;
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <I2C_GetFlagStatus+0x28>
	}
	return FLAG_RESET;
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <I2C_MasterSendData>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *TxBuffer, uint8_t len, uint8_t SlaveAddr, uint8_t Sr)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b084      	sub	sp, #16
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	4611      	mov	r1, r2
 800069a:	461a      	mov	r2, r3
 800069c:	460b      	mov	r3, r1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	4613      	mov	r3, r2
 80006a2:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the start condition
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80006b2:	601a      	str	r2, [r3, #0]

	// 2. Check if the start bit is set and then Read the SR1 register to clear the start bit
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_SR1_SB) == FLAG_SET));
 80006b4:	bf00      	nop
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffcd 	bl	800065c <I2C_GetFlagStatus>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d1f6      	bne.n	80006b6 <I2C_MasterSendData+0x28>
	//uint32_t temp = pI2CHandle->pI2Cx->SR1;

	// 3. Send the address of slave with transmission byte (0)
	SlaveAddr = SlaveAddr << 1;
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	71bb      	strb	r3, [r7, #6]
	SlaveAddr &= ~(1);
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	f023 0301 	bic.w	r3, r3, #1
 80006d4:	71bb      	strb	r3, [r7, #6]
	pI2CHandle->pI2Cx->DR = SlaveAddr;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	79ba      	ldrb	r2, [r7, #6]
 80006dc:	611a      	str	r2, [r3, #16]

	// 4. ADDR bit is set if it receives an ACK
	if(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_ADDR)))
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	2102      	movs	r1, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffb9 	bl	800065c <I2C_GetFlagStatus>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d017      	beq.n	8000720 <I2C_MasterSendData+0x92>
	{
		// The ADDR bit is set which means that the master received an ack. Now we should reset this ADDR bit
		// read SR1 and SR2 to clear this bit
		I2C_ClearADDRFlag(pI2CHandle);
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff ff5e 	bl	80005b2 <I2C_ClearADDRFlag>
	}

	// 5. Send data till len becomes zero. We don't have to check for ack every time as it is handled by the hardware
	while(len)
 80006f6:	e013      	b.n	8000720 <I2C_MasterSendData+0x92>
	{
		// wait till Txe is 1 indicating that DR is empty and ready to be filled with data
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_TxE))))
		{
			pI2CHandle->pI2Cx->DR = *TxBuffer;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	611a      	str	r2, [r3, #16]
			TxBuffer++;
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	3301      	adds	r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
			len--;
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	3b01      	subs	r3, #1
 800070c:	71fb      	strb	r3, [r7, #7]
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_TxE))))
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	2180      	movs	r1, #128	@ 0x80
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ffa1 	bl	800065c <I2C_GetFlagStatus>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0eb      	beq.n	80006f8 <I2C_MasterSendData+0x6a>
	while(len)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f3      	bne.n	800070e <I2C_MasterSendData+0x80>
		}
	}

	// 6. Close the communication
	// 6.1 wait for Txe = 1 and BTF = 1 before generating the stop condition
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_TxE))));
 8000726:	bf00      	nop
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff94 	bl	800065c <I2C_GetFlagStatus>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f6      	beq.n	8000728 <I2C_MasterSendData+0x9a>
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_BTF))));
 800073a:	bf00      	nop
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	2104      	movs	r1, #4
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff8a 	bl	800065c <I2C_GetFlagStatus>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0f6      	beq.n	800073c <I2C_MasterSendData+0xae>

	// 6.2 Generate the stop condition (if repeated start isn't enabled)
	if(Sr == I2C_NO_SR)
 800074e:	7e3b      	ldrb	r3, [r7, #24]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d107      	bne.n	8000764 <I2C_MasterSendData+0xd6>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <I2C_MasterReceiveData>:
/*
 * I2C send and receive data
 */

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *RxBuffer, uint8_t len, uint8_t SlaveAddr, uint8_t Sr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	4611      	mov	r1, r2
 8000778:	461a      	mov	r2, r3
 800077a:	460b      	mov	r3, r1
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	4613      	mov	r3, r2
 8000780:	71bb      	strb	r3, [r7, #6]
	uint32_t temp;
	// 1. Initiate the start condition
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000790:	601a      	str	r2, [r3, #0]

	// 2. Confirm if the start bit is set
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_SR1_SB)));
 8000792:	bf00      	nop
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff5e 	bl	800065c <I2C_GetFlagStatus>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0f6      	beq.n	8000794 <I2C_MasterReceiveData+0x28>

	// 3. Send Address bit
	SlaveAddr = SlaveAddr << 1;
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	71bb      	strb	r3, [r7, #6]
	SlaveAddr |= 1;
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	71bb      	strb	r3, [r7, #6]
	pI2CHandle->pI2Cx->DR = SlaveAddr;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	79ba      	ldrb	r2, [r7, #6]
 80007ba:	611a      	str	r2, [r3, #16]

	// 4. check if the ADDR flag is set. Wait until its set
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_ADDR))));
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	2102      	movs	r1, #2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff49 	bl	800065c <I2C_GetFlagStatus>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0f6      	beq.n	80007be <I2C_MasterReceiveData+0x52>

	// 5. Send data. If len = 1 or if len > 1
	if(len == 1)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d12c      	bne.n	8000830 <I2C_MasterReceiveData+0xc4>
	{
		// a. Disable ack
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80007e4:	601a      	str	r2, [r3, #0]

		// c. clear addr bit. Read SR1 followed by SR2
		I2C_ClearADDRFlag(pI2CHandle);
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f7ff fee3 	bl	80005b2 <I2C_ClearADDRFlag>

		// d. wait till RXNE is set
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, (1 << I2C_SR1_RxNE)));
 80007ec:	bf00      	nop
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	2140      	movs	r1, #64	@ 0x40
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff31 	bl	800065c <I2C_GetFlagStatus>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0f6      	beq.n	80007ee <I2C_MasterReceiveData+0x82>

		// b. send stop condition if repeated start is disabled
		if(Sr == I2C_NO_SR)
 8000800:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d107      	bne.n	8000818 <I2C_MasterReceiveData+0xac>
			pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000816:	601a      	str	r2, [r3, #0]

		// e. Read the data from the data register
		*RxBuffer = pI2CHandle->pI2Cx->DR;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	701a      	strb	r2, [r3, #0]
		RxBuffer++;
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	3301      	adds	r3, #1
 8000828:	60bb      	str	r3, [r7, #8]
		len--;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	3b01      	subs	r3, #1
 800082e:	71fb      	strb	r3, [r7, #7]
	}
	if(len > 1 )
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d938      	bls.n	80008a8 <I2C_MasterReceiveData+0x13c>
	{
		// a. clear the address bit
		temp = pI2CHandle->pI2Cx->SR1;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	617b      	str	r3, [r7, #20]
		temp = pI2CHandle->pI2Cx->SR2;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	617b      	str	r3, [r7, #20]
		(void)temp;

		// b. receive data
		while(len > 0)
 8000846:	e02c      	b.n	80008a2 <I2C_MasterReceiveData+0x136>
		{
			// d. wait till RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, (1 << I2C_SR1_RxNE)));
 8000848:	bf00      	nop
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	2140      	movs	r1, #64	@ 0x40
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff03 	bl	800065c <I2C_GetFlagStatus>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f6      	beq.n	800084a <I2C_MasterReceiveData+0xde>

			if(len == 2)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d113      	bne.n	800088a <I2C_MasterReceiveData+0x11e>
			{
				// c. when len == 2,
				// c.1 clear ACK
				pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000870:	601a      	str	r2, [r3, #0]

				// c.2 set STOP condition if repeated start is disabled
				if(Sr == I2C_NO_SR)
 8000872:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d107      	bne.n	800088a <I2C_MasterReceiveData+0x11e>
					pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000888:	601a      	str	r2, [r3, #0]
			}

			*RxBuffer = pI2CHandle->pI2Cx->DR;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	701a      	strb	r2, [r3, #0]

			len--;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	3b01      	subs	r3, #1
 800089a:	71fb      	strb	r3, [r7, #7]
			RxBuffer++;
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	3301      	adds	r3, #1
 80008a0:	60bb      	str	r3, [r7, #8]
		while(len > 0)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1cf      	bne.n	8000848 <I2C_MasterReceiveData+0xdc>
		}

	}

	// 7. Renable acking
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACKCTRL_ACK_EN)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	795b      	ldrb	r3, [r3, #5]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d107      	bne.n	80008c0 <I2C_MasterReceiveData+0x154>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80008be:	601a      	str	r2, [r3, #0]

}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <GPIO_ClockControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d162      	bne.n	80009a0 <GPIO_ClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a64      	ldr	r2, [pc, #400]	@ (8000a70 <GPIO_ClockControl+0x1a8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d106      	bne.n	80008f0 <GPIO_ClockControl+0x28>
		{
			GPIOA_CLK_EN();
 80008e2:	4b64      	ldr	r3, [pc, #400]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a63      	ldr	r2, [pc, #396]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_CLK_DI();
		}
	}
}
 80008ee:	e0b9      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a61      	ldr	r2, [pc, #388]	@ (8000a78 <GPIO_ClockControl+0x1b0>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d106      	bne.n	8000906 <GPIO_ClockControl+0x3e>
			GPIOB_CLK_EN();
 80008f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fc:	4a5d      	ldr	r2, [pc, #372]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000904:	e0ae      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a5c      	ldr	r2, [pc, #368]	@ (8000a7c <GPIO_ClockControl+0x1b4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <GPIO_ClockControl+0x54>
			GPIOC_CLK_EN();
 800090e:	4b59      	ldr	r3, [pc, #356]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a58      	ldr	r2, [pc, #352]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800091a:	e0a3      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a58      	ldr	r2, [pc, #352]	@ (8000a80 <GPIO_ClockControl+0x1b8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d106      	bne.n	8000932 <GPIO_ClockControl+0x6a>
			GPIOD_CLK_EN();
 8000924:	4b53      	ldr	r3, [pc, #332]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	4a52      	ldr	r2, [pc, #328]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 800092a:	f043 0308 	orr.w	r3, r3, #8
 800092e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000930:	e098      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a53      	ldr	r2, [pc, #332]	@ (8000a84 <GPIO_ClockControl+0x1bc>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d106      	bne.n	8000948 <GPIO_ClockControl+0x80>
			GPIOE_CLK_EN();
 800093a:	4b4e      	ldr	r3, [pc, #312]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a4d      	ldr	r2, [pc, #308]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000946:	e08d      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a4f      	ldr	r2, [pc, #316]	@ (8000a88 <GPIO_ClockControl+0x1c0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d106      	bne.n	800095e <GPIO_ClockControl+0x96>
			GPIOF_CLK_EN();
 8000950:	4b48      	ldr	r3, [pc, #288]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000954:	4a47      	ldr	r2, [pc, #284]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000956:	f043 0320 	orr.w	r3, r3, #32
 800095a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800095c:	e082      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a4a      	ldr	r2, [pc, #296]	@ (8000a8c <GPIO_ClockControl+0x1c4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d106      	bne.n	8000974 <GPIO_ClockControl+0xac>
			GPIOG_CLK_EN();
 8000966:	4b43      	ldr	r3, [pc, #268]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a42      	ldr	r2, [pc, #264]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 800096c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000972:	e077      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a46      	ldr	r2, [pc, #280]	@ (8000a90 <GPIO_ClockControl+0x1c8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d106      	bne.n	800098a <GPIO_ClockControl+0xc2>
			GPIOH_CLK_EN();
 800097c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000980:	4a3c      	ldr	r2, [pc, #240]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000986:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000988:	e06c      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a41      	ldr	r2, [pc, #260]	@ (8000a94 <GPIO_ClockControl+0x1cc>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d168      	bne.n	8000a64 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_EN();
 8000992:	4b38      	ldr	r3, [pc, #224]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a37      	ldr	r2, [pc, #220]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800099e:	e061      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a33      	ldr	r2, [pc, #204]	@ (8000a70 <GPIO_ClockControl+0x1a8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d106      	bne.n	80009b6 <GPIO_ClockControl+0xee>
			GPIOA_CLK_DI();
 80009a8:	4b32      	ldr	r3, [pc, #200]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ac:	4a31      	ldr	r2, [pc, #196]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009b4:	e056      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000a78 <GPIO_ClockControl+0x1b0>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d106      	bne.n	80009cc <GPIO_ClockControl+0x104>
			GPIOB_CLK_DI();
 80009be:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009ca:	e04b      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a2b      	ldr	r2, [pc, #172]	@ (8000a7c <GPIO_ClockControl+0x1b4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d106      	bne.n	80009e2 <GPIO_ClockControl+0x11a>
			GPIOC_CLK_DI();
 80009d4:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d8:	4a26      	ldr	r2, [pc, #152]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009e0:	e040      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a26      	ldr	r2, [pc, #152]	@ (8000a80 <GPIO_ClockControl+0x1b8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d106      	bne.n	80009f8 <GPIO_ClockControl+0x130>
			GPIOD_CLK_DI();
 80009ea:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a21      	ldr	r2, [pc, #132]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009f6:	e035      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a22      	ldr	r2, [pc, #136]	@ (8000a84 <GPIO_ClockControl+0x1bc>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d106      	bne.n	8000a0e <GPIO_ClockControl+0x146>
			GPIOE_CLK_DI();
 8000a00:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a04:	4a1b      	ldr	r2, [pc, #108]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a0c:	e02a      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a1d      	ldr	r2, [pc, #116]	@ (8000a88 <GPIO_ClockControl+0x1c0>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d106      	bne.n	8000a24 <GPIO_ClockControl+0x15c>
			GPIOF_CLK_DI();
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a16      	ldr	r2, [pc, #88]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000a1c:	f043 0320 	orr.w	r3, r3, #32
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a22:	e01f      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a19      	ldr	r2, [pc, #100]	@ (8000a8c <GPIO_ClockControl+0x1c4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d106      	bne.n	8000a3a <GPIO_ClockControl+0x172>
			GPIOG_CLK_DI();
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a30:	4a10      	ldr	r2, [pc, #64]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a36:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a38:	e014      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a14      	ldr	r2, [pc, #80]	@ (8000a90 <GPIO_ClockControl+0x1c8>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d106      	bne.n	8000a50 <GPIO_ClockControl+0x188>
			GPIOH_CLK_DI();
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a0b      	ldr	r2, [pc, #44]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a4e:	e009      	b.n	8000a64 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a10      	ldr	r2, [pc, #64]	@ (8000a94 <GPIO_ClockControl+0x1cc>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d105      	bne.n	8000a64 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_DI();
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5c:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <GPIO_ClockControl+0x1ac>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a62:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40021400 	.word	0x40021400
 8000a8c:	40021800 	.word	0x40021800
 8000a90:	40021c00 	.word	0x40021c00
 8000a94:	40022000 	.word	0x40022000

08000a98 <GPIO_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	GPIO_ClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff0e 	bl	80008c8 <GPIO_ClockControl>

	uint32_t temp = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	795b      	ldrb	r3, [r3, #5]
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d820      	bhi.n	8000afa <GPIO_Init+0x62>
	{
		// Non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	791b      	ldrb	r3, [r3, #4]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6819      	ldr	r1, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	e0c3      	b.n	8000c82 <GPIO_Init+0x1ea>
	}
	else
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	791b      	ldrb	r3, [r3, #4]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2103      	movs	r1, #3
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	400a      	ands	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	795b      	ldrb	r3, [r3, #5]
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d117      	bne.n	8000b50 <GPIO_Init+0xb8>
		{
			// 1. Configure the FTSR
			// first we clear the corresponding RTSR bit so that we only have FTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b20:	4b96      	ldr	r3, [pc, #600]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	7912      	ldrb	r2, [r2, #4]
 8000b28:	4611      	mov	r1, r2
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	408a      	lsls	r2, r1
 8000b2e:	43d2      	mvns	r2, r2
 8000b30:	4611      	mov	r1, r2
 8000b32:	4a92      	ldr	r2, [pc, #584]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000b34:	400b      	ands	r3, r1
 8000b36:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b38:	4b90      	ldr	r3, [pc, #576]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	7912      	ldrb	r2, [r2, #4]
 8000b40:	4611      	mov	r1, r2
 8000b42:	2201      	movs	r2, #1
 8000b44:	408a      	lsls	r2, r1
 8000b46:	4611      	mov	r1, r2
 8000b48:	4a8c      	ldr	r2, [pc, #560]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000b4a:	430b      	orrs	r3, r1
 8000b4c:	60d3      	str	r3, [r2, #12]
 8000b4e:	e035      	b.n	8000bbc <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	795b      	ldrb	r3, [r3, #5]
 8000b54:	2b05      	cmp	r3, #5
 8000b56:	d117      	bne.n	8000b88 <GPIO_Init+0xf0>
		{
			// 1. Configure the RTSR
			// first we clear the corresponding FTSR bit so that we only have RTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b58:	4b88      	ldr	r3, [pc, #544]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	7912      	ldrb	r2, [r2, #4]
 8000b60:	4611      	mov	r1, r2
 8000b62:	2201      	movs	r2, #1
 8000b64:	408a      	lsls	r2, r1
 8000b66:	43d2      	mvns	r2, r2
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4a84      	ldr	r2, [pc, #528]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000b6c:	400b      	ands	r3, r1
 8000b6e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b70:	4b82      	ldr	r3, [pc, #520]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	7912      	ldrb	r2, [r2, #4]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	408a      	lsls	r2, r1
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4a7e      	ldr	r2, [pc, #504]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000b82:	430b      	orrs	r3, r1
 8000b84:	6093      	str	r3, [r2, #8]
 8000b86:	e019      	b.n	8000bbc <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	795b      	ldrb	r3, [r3, #5]
 8000b8c:	2b06      	cmp	r3, #6
 8000b8e:	d115      	bne.n	8000bbc <GPIO_Init+0x124>
		{
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b90:	4b7a      	ldr	r3, [pc, #488]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	7912      	ldrb	r2, [r2, #4]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	408a      	lsls	r2, r1
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4a76      	ldr	r2, [pc, #472]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ba6:	4b75      	ldr	r3, [pc, #468]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	7912      	ldrb	r2, [r2, #4]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	408a      	lsls	r2, r1
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4a71      	ldr	r2, [pc, #452]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		// Calculate the register number EXTICR1/EXTICR2/EXTICR3/EXTICR4
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	791b      	ldrb	r3, [r3, #4]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	617b      	str	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a6d      	ldr	r2, [pc, #436]	@ (8000d80 <GPIO_Init+0x2e8>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d039      	beq.n	8000c44 <GPIO_Init+0x1ac>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a6b      	ldr	r2, [pc, #428]	@ (8000d84 <GPIO_Init+0x2ec>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d032      	beq.n	8000c40 <GPIO_Init+0x1a8>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a6a      	ldr	r2, [pc, #424]	@ (8000d88 <GPIO_Init+0x2f0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d02b      	beq.n	8000c3c <GPIO_Init+0x1a4>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a68      	ldr	r2, [pc, #416]	@ (8000d8c <GPIO_Init+0x2f4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d024      	beq.n	8000c38 <GPIO_Init+0x1a0>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a67      	ldr	r2, [pc, #412]	@ (8000d90 <GPIO_Init+0x2f8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d01d      	beq.n	8000c34 <GPIO_Init+0x19c>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a65      	ldr	r2, [pc, #404]	@ (8000d94 <GPIO_Init+0x2fc>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d016      	beq.n	8000c30 <GPIO_Init+0x198>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a64      	ldr	r2, [pc, #400]	@ (8000d98 <GPIO_Init+0x300>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d00f      	beq.n	8000c2c <GPIO_Init+0x194>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a62      	ldr	r2, [pc, #392]	@ (8000d9c <GPIO_Init+0x304>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d008      	beq.n	8000c28 <GPIO_Init+0x190>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a61      	ldr	r2, [pc, #388]	@ (8000da0 <GPIO_Init+0x308>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d101      	bne.n	8000c24 <GPIO_Init+0x18c>
 8000c20:	2308      	movs	r3, #8
 8000c22:	e010      	b.n	8000c46 <GPIO_Init+0x1ae>
 8000c24:	2300      	movs	r3, #0
 8000c26:	e00e      	b.n	8000c46 <GPIO_Init+0x1ae>
 8000c28:	2307      	movs	r3, #7
 8000c2a:	e00c      	b.n	8000c46 <GPIO_Init+0x1ae>
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	e00a      	b.n	8000c46 <GPIO_Init+0x1ae>
 8000c30:	2305      	movs	r3, #5
 8000c32:	e008      	b.n	8000c46 <GPIO_Init+0x1ae>
 8000c34:	2304      	movs	r3, #4
 8000c36:	e006      	b.n	8000c46 <GPIO_Init+0x1ae>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e004      	b.n	8000c46 <GPIO_Init+0x1ae>
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	e002      	b.n	8000c46 <GPIO_Init+0x1ae>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <GPIO_Init+0x1ae>
 8000c44:	2300      	movs	r3, #0
 8000c46:	74fb      	strb	r3, [r7, #19]
		SYSCFG_CLK_EN();
 8000c48:	4b56      	ldr	r3, [pc, #344]	@ (8000da4 <GPIO_Init+0x30c>)
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4c:	4a55      	ldr	r2, [pc, #340]	@ (8000da4 <GPIO_Init+0x30c>)
 8000c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c52:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp] |= (portcode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4));
 8000c54:	4a54      	ldr	r2, [pc, #336]	@ (8000da8 <GPIO_Init+0x310>)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3302      	adds	r3, #2
 8000c5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c5e:	7cfb      	ldrb	r3, [r7, #19]
 8000c60:	4951      	ldr	r1, [pc, #324]	@ (8000da8 <GPIO_Init+0x310>)
 8000c62:	431a      	orrs	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3302      	adds	r3, #2
 8000c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000c6c:	4b43      	ldr	r3, [pc, #268]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	7912      	ldrb	r2, [r2, #4]
 8000c74:	4611      	mov	r1, r2
 8000c76:	2201      	movs	r2, #1
 8000c78:	408a      	lsls	r2, r1
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8000d7c <GPIO_Init+0x2e4>)
 8000c7e:	430b      	orrs	r3, r1
 8000c80:	6013      	str	r3, [r2, #0]

	}

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	799b      	ldrb	r3, [r3, #6]
 8000c86:	461a      	mov	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	791b      	ldrb	r3, [r3, #4]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	791b      	ldrb	r3, [r3, #4]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2103      	movs	r1, #3
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4619      	mov	r1, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	400a      	ands	r2, r1
 8000cb0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6899      	ldr	r1, [r3, #8]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	609a      	str	r2, [r3, #8]

	// 3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	79db      	ldrb	r3, [r3, #7]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	791b      	ldrb	r3, [r3, #4]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	791b      	ldrb	r3, [r3, #4]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	4619      	mov	r1, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	400a      	ands	r2, r1
 8000cf0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	68d9      	ldr	r1, [r3, #12]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	60da      	str	r2, [r3, #12]

	// 4. Conigure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7a1b      	ldrb	r3, [r3, #8]
 8000d06:	461a      	mov	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	791b      	ldrb	r3, [r3, #4]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	791b      	ldrb	r3, [r3, #4]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	4619      	mov	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6859      	ldr	r1, [r3, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	605a      	str	r2, [r3, #4]

	// 5. configure the alt function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	795b      	ldrb	r3, [r3, #5]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d139      	bne.n	8000dbc <GPIO_Init+0x324>
	{
		uint32_t pinpos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	791b      	ldrb	r3, [r3, #4]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	60fb      	str	r3, [r7, #12]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pinpos));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7a5b      	ldrb	r3, [r3, #9]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_7)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	791b      	ldrb	r3, [r3, #4]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	d820      	bhi.n	8000dac <GPIO_Init+0x314>
		{
			// use AFL

			pGPIOHandle->pGPIOx->AFRL |= temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6a19      	ldr	r1, [r3, #32]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	430a      	orrs	r2, r1
 8000d78:	621a      	str	r2, [r3, #32]
		{
			// use AFH
			pGPIOHandle->pGPIOx->AFRH |= temp;
		}
	}
}
 8000d7a:	e01f      	b.n	8000dbc <GPIO_Init+0x324>
 8000d7c:	40013c00 	.word	0x40013c00
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40020400 	.word	0x40020400
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40021400 	.word	0x40021400
 8000d98:	40021800 	.word	0x40021800
 8000d9c:	40021c00 	.word	0x40021c00
 8000da0:	40022000 	.word	0x40022000
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <GPIO_IRQITConfig>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_IRQITConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	460a      	mov	r2, r1
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	71bb      	strb	r3, [r7, #6]
	// processor side configuration
	if(EnorDi == ENABLE)
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d133      	bne.n	8000e42 <GPIO_IRQITConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b1f      	cmp	r3, #31
 8000dde:	d80a      	bhi.n	8000df6 <GPIO_IRQITConfig+0x32>
		{
			// program ISER1
			*NVIC_ISER0 |= (1<<IRQNumber);
 8000de0:	4b34      	ldr	r3, [pc, #208]	@ (8000eb4 <GPIO_IRQITConfig+0xf0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	79fa      	ldrb	r2, [r7, #7]
 8000de6:	2101      	movs	r1, #1
 8000de8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dec:	4611      	mov	r1, r2
 8000dee:	4a31      	ldr	r2, [pc, #196]	@ (8000eb4 <GPIO_IRQITConfig+0xf0>)
 8000df0:	430b      	orrs	r3, r1
 8000df2:	6013      	str	r3, [r2, #0]
		else if (IRQNumber >= 64 && IRQNumber <= 96)
		{
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
		}
	}
}
 8000df4:	e059      	b.n	8000eaa <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber <=63)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b1f      	cmp	r3, #31
 8000dfa:	d90f      	bls.n	8000e1c <GPIO_IRQITConfig+0x58>
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e00:	d80c      	bhi.n	8000e1c <GPIO_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1<<(IRQNumber%32));
 8000e02:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <GPIO_IRQITConfig+0xf4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	79fa      	ldrb	r2, [r7, #7]
 8000e08:	f002 021f 	and.w	r2, r2, #31
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e12:	4611      	mov	r1, r2
 8000e14:	4a28      	ldr	r2, [pc, #160]	@ (8000eb8 <GPIO_IRQITConfig+0xf4>)
 8000e16:	430b      	orrs	r3, r1
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e046      	b.n	8000eaa <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber <= 96)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e20:	d943      	bls.n	8000eaa <GPIO_IRQITConfig+0xe6>
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b60      	cmp	r3, #96	@ 0x60
 8000e26:	d840      	bhi.n	8000eaa <GPIO_IRQITConfig+0xe6>
			*NVIC_ISER2 |= (1<<(IRQNumber%64));
 8000e28:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <GPIO_IRQITConfig+0xf8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	79fa      	ldrb	r2, [r7, #7]
 8000e2e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000e32:	2101      	movs	r1, #1
 8000e34:	fa01 f202 	lsl.w	r2, r1, r2
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4a20      	ldr	r2, [pc, #128]	@ (8000ebc <GPIO_IRQITConfig+0xf8>)
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	e033      	b.n	8000eaa <GPIO_IRQITConfig+0xe6>
		if(IRQNumber <= 31)
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b1f      	cmp	r3, #31
 8000e46:	d80a      	bhi.n	8000e5e <GPIO_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1<<IRQNumber);
 8000e48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <GPIO_IRQITConfig+0xfc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fa01 f202 	lsl.w	r2, r1, r2
 8000e54:	4611      	mov	r1, r2
 8000e56:	4a1a      	ldr	r2, [pc, #104]	@ (8000ec0 <GPIO_IRQITConfig+0xfc>)
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	e025      	b.n	8000eaa <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber <=63)
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b1f      	cmp	r3, #31
 8000e62:	d90f      	bls.n	8000e84 <GPIO_IRQITConfig+0xc0>
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e68:	d80c      	bhi.n	8000e84 <GPIO_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1<<(IRQNumber%32));
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <GPIO_IRQITConfig+0x100>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	79fa      	ldrb	r2, [r7, #7]
 8000e70:	f002 021f 	and.w	r2, r2, #31
 8000e74:	2101      	movs	r1, #1
 8000e76:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4a11      	ldr	r2, [pc, #68]	@ (8000ec4 <GPIO_IRQITConfig+0x100>)
 8000e7e:	430b      	orrs	r3, r1
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e012      	b.n	8000eaa <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber <= 96)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e88:	d90f      	bls.n	8000eaa <GPIO_IRQITConfig+0xe6>
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b60      	cmp	r3, #96	@ 0x60
 8000e8e:	d80c      	bhi.n	8000eaa <GPIO_IRQITConfig+0xe6>
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
 8000e90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <GPIO_IRQITConfig+0x104>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	79fa      	ldrb	r2, [r7, #7]
 8000e96:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4a09      	ldr	r2, [pc, #36]	@ (8000ec8 <GPIO_IRQITConfig+0x104>)
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	e7ff      	b.n	8000eaa <GPIO_IRQITConfig+0xe6>
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000e104 	.word	0xe000e104
 8000ebc:	e000e108 	.word	0xe000e108
 8000ec0:	e000e180 	.word	0xe000e180
 8000ec4:	e000e184 	.word	0xe000e184
 8000ec8:	e000e188 	.word	0xe000e188

08000ecc <GPIO_IRQHandling>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	// clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & (1<<PinNumber))
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <GPIO_IRQHandling+0x3c>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	2101      	movs	r1, #1
 8000ede:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d009      	beq.n	8000efc <GPIO_IRQHandling+0x30>
	{
		// the interrupt is pended so we clear the register bit
		EXTI->PR |= (1 << PinNumber);
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <GPIO_IRQHandling+0x3c>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	79fa      	ldrb	r2, [r7, #7]
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <GPIO_IRQHandling+0x3c>)
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	6153      	str	r3, [r2, #20]
	}
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40013c00 	.word	0x40013c00

08000f0c <std>:
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	b510      	push	{r4, lr}
 8000f10:	4604      	mov	r4, r0
 8000f12:	e9c0 3300 	strd	r3, r3, [r0]
 8000f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000f1a:	6083      	str	r3, [r0, #8]
 8000f1c:	8181      	strh	r1, [r0, #12]
 8000f1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000f20:	81c2      	strh	r2, [r0, #14]
 8000f22:	6183      	str	r3, [r0, #24]
 8000f24:	4619      	mov	r1, r3
 8000f26:	2208      	movs	r2, #8
 8000f28:	305c      	adds	r0, #92	@ 0x5c
 8000f2a:	f000 f906 	bl	800113a <memset>
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <std+0x58>)
 8000f30:	6263      	str	r3, [r4, #36]	@ 0x24
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <std+0x5c>)
 8000f34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000f36:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <std+0x60>)
 8000f38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <std+0x64>)
 8000f3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <std+0x68>)
 8000f40:	6224      	str	r4, [r4, #32]
 8000f42:	429c      	cmp	r4, r3
 8000f44:	d006      	beq.n	8000f54 <std+0x48>
 8000f46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000f4a:	4294      	cmp	r4, r2
 8000f4c:	d002      	beq.n	8000f54 <std+0x48>
 8000f4e:	33d0      	adds	r3, #208	@ 0xd0
 8000f50:	429c      	cmp	r4, r3
 8000f52:	d105      	bne.n	8000f60 <std+0x54>
 8000f54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f5c:	f000 b966 	b.w	800122c <__retarget_lock_init_recursive>
 8000f60:	bd10      	pop	{r4, pc}
 8000f62:	bf00      	nop
 8000f64:	080010b5 	.word	0x080010b5
 8000f68:	080010d7 	.word	0x080010d7
 8000f6c:	0800110f 	.word	0x0800110f
 8000f70:	08001133 	.word	0x08001133
 8000f74:	200004ac 	.word	0x200004ac

08000f78 <stdio_exit_handler>:
 8000f78:	4a02      	ldr	r2, [pc, #8]	@ (8000f84 <stdio_exit_handler+0xc>)
 8000f7a:	4903      	ldr	r1, [pc, #12]	@ (8000f88 <stdio_exit_handler+0x10>)
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <stdio_exit_handler+0x14>)
 8000f7e:	f000 b869 	b.w	8001054 <_fwalk_sglue>
 8000f82:	bf00      	nop
 8000f84:	20000004 	.word	0x20000004
 8000f88:	08001ac1 	.word	0x08001ac1
 8000f8c:	20000014 	.word	0x20000014

08000f90 <cleanup_stdio>:
 8000f90:	6841      	ldr	r1, [r0, #4]
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <cleanup_stdio+0x34>)
 8000f94:	4299      	cmp	r1, r3
 8000f96:	b510      	push	{r4, lr}
 8000f98:	4604      	mov	r4, r0
 8000f9a:	d001      	beq.n	8000fa0 <cleanup_stdio+0x10>
 8000f9c:	f000 fd90 	bl	8001ac0 <_fflush_r>
 8000fa0:	68a1      	ldr	r1, [r4, #8]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <cleanup_stdio+0x38>)
 8000fa4:	4299      	cmp	r1, r3
 8000fa6:	d002      	beq.n	8000fae <cleanup_stdio+0x1e>
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f000 fd89 	bl	8001ac0 <_fflush_r>
 8000fae:	68e1      	ldr	r1, [r4, #12]
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <cleanup_stdio+0x3c>)
 8000fb2:	4299      	cmp	r1, r3
 8000fb4:	d004      	beq.n	8000fc0 <cleanup_stdio+0x30>
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fbc:	f000 bd80 	b.w	8001ac0 <_fflush_r>
 8000fc0:	bd10      	pop	{r4, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200004ac 	.word	0x200004ac
 8000fc8:	20000514 	.word	0x20000514
 8000fcc:	2000057c 	.word	0x2000057c

08000fd0 <global_stdio_init.part.0>:
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <global_stdio_init.part.0+0x30>)
 8000fd4:	4c0b      	ldr	r4, [pc, #44]	@ (8001004 <global_stdio_init.part.0+0x34>)
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001008 <global_stdio_init.part.0+0x38>)
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	4620      	mov	r0, r4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2104      	movs	r1, #4
 8000fe0:	f7ff ff94 	bl	8000f0c <std>
 8000fe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2109      	movs	r1, #9
 8000fec:	f7ff ff8e 	bl	8000f0c <std>
 8000ff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ffa:	2112      	movs	r1, #18
 8000ffc:	f7ff bf86 	b.w	8000f0c <std>
 8001000:	200005e4 	.word	0x200005e4
 8001004:	200004ac 	.word	0x200004ac
 8001008:	08000f79 	.word	0x08000f79

0800100c <__sfp_lock_acquire>:
 800100c:	4801      	ldr	r0, [pc, #4]	@ (8001014 <__sfp_lock_acquire+0x8>)
 800100e:	f000 b90e 	b.w	800122e <__retarget_lock_acquire_recursive>
 8001012:	bf00      	nop
 8001014:	200005ed 	.word	0x200005ed

08001018 <__sfp_lock_release>:
 8001018:	4801      	ldr	r0, [pc, #4]	@ (8001020 <__sfp_lock_release+0x8>)
 800101a:	f000 b909 	b.w	8001230 <__retarget_lock_release_recursive>
 800101e:	bf00      	nop
 8001020:	200005ed 	.word	0x200005ed

08001024 <__sinit>:
 8001024:	b510      	push	{r4, lr}
 8001026:	4604      	mov	r4, r0
 8001028:	f7ff fff0 	bl	800100c <__sfp_lock_acquire>
 800102c:	6a23      	ldr	r3, [r4, #32]
 800102e:	b11b      	cbz	r3, 8001038 <__sinit+0x14>
 8001030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001034:	f7ff bff0 	b.w	8001018 <__sfp_lock_release>
 8001038:	4b04      	ldr	r3, [pc, #16]	@ (800104c <__sinit+0x28>)
 800103a:	6223      	str	r3, [r4, #32]
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <__sinit+0x2c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f5      	bne.n	8001030 <__sinit+0xc>
 8001044:	f7ff ffc4 	bl	8000fd0 <global_stdio_init.part.0>
 8001048:	e7f2      	b.n	8001030 <__sinit+0xc>
 800104a:	bf00      	nop
 800104c:	08000f91 	.word	0x08000f91
 8001050:	200005e4 	.word	0x200005e4

08001054 <_fwalk_sglue>:
 8001054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001058:	4607      	mov	r7, r0
 800105a:	4688      	mov	r8, r1
 800105c:	4614      	mov	r4, r2
 800105e:	2600      	movs	r6, #0
 8001060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001064:	f1b9 0901 	subs.w	r9, r9, #1
 8001068:	d505      	bpl.n	8001076 <_fwalk_sglue+0x22>
 800106a:	6824      	ldr	r4, [r4, #0]
 800106c:	2c00      	cmp	r4, #0
 800106e:	d1f7      	bne.n	8001060 <_fwalk_sglue+0xc>
 8001070:	4630      	mov	r0, r6
 8001072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001076:	89ab      	ldrh	r3, [r5, #12]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d907      	bls.n	800108c <_fwalk_sglue+0x38>
 800107c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001080:	3301      	adds	r3, #1
 8001082:	d003      	beq.n	800108c <_fwalk_sglue+0x38>
 8001084:	4629      	mov	r1, r5
 8001086:	4638      	mov	r0, r7
 8001088:	47c0      	blx	r8
 800108a:	4306      	orrs	r6, r0
 800108c:	3568      	adds	r5, #104	@ 0x68
 800108e:	e7e9      	b.n	8001064 <_fwalk_sglue+0x10>

08001090 <iprintf>:
 8001090:	b40f      	push	{r0, r1, r2, r3}
 8001092:	b507      	push	{r0, r1, r2, lr}
 8001094:	4906      	ldr	r1, [pc, #24]	@ (80010b0 <iprintf+0x20>)
 8001096:	ab04      	add	r3, sp, #16
 8001098:	6808      	ldr	r0, [r1, #0]
 800109a:	f853 2b04 	ldr.w	r2, [r3], #4
 800109e:	6881      	ldr	r1, [r0, #8]
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	f000 f9e7 	bl	8001474 <_vfiprintf_r>
 80010a6:	b003      	add	sp, #12
 80010a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80010ac:	b004      	add	sp, #16
 80010ae:	4770      	bx	lr
 80010b0:	20000010 	.word	0x20000010

080010b4 <__sread>:
 80010b4:	b510      	push	{r4, lr}
 80010b6:	460c      	mov	r4, r1
 80010b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010bc:	f000 f868 	bl	8001190 <_read_r>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	bfab      	itete	ge
 80010c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80010c6:	89a3      	ldrhlt	r3, [r4, #12]
 80010c8:	181b      	addge	r3, r3, r0
 80010ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80010ce:	bfac      	ite	ge
 80010d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80010d2:	81a3      	strhlt	r3, [r4, #12]
 80010d4:	bd10      	pop	{r4, pc}

080010d6 <__swrite>:
 80010d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010da:	461f      	mov	r7, r3
 80010dc:	898b      	ldrh	r3, [r1, #12]
 80010de:	05db      	lsls	r3, r3, #23
 80010e0:	4605      	mov	r5, r0
 80010e2:	460c      	mov	r4, r1
 80010e4:	4616      	mov	r6, r2
 80010e6:	d505      	bpl.n	80010f4 <__swrite+0x1e>
 80010e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ec:	2302      	movs	r3, #2
 80010ee:	2200      	movs	r2, #0
 80010f0:	f000 f83c 	bl	800116c <_lseek_r>
 80010f4:	89a3      	ldrh	r3, [r4, #12]
 80010f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010fe:	81a3      	strh	r3, [r4, #12]
 8001100:	4632      	mov	r2, r6
 8001102:	463b      	mov	r3, r7
 8001104:	4628      	mov	r0, r5
 8001106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800110a:	f000 b853 	b.w	80011b4 <_write_r>

0800110e <__sseek>:
 800110e:	b510      	push	{r4, lr}
 8001110:	460c      	mov	r4, r1
 8001112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001116:	f000 f829 	bl	800116c <_lseek_r>
 800111a:	1c43      	adds	r3, r0, #1
 800111c:	89a3      	ldrh	r3, [r4, #12]
 800111e:	bf15      	itete	ne
 8001120:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001122:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001126:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800112a:	81a3      	strheq	r3, [r4, #12]
 800112c:	bf18      	it	ne
 800112e:	81a3      	strhne	r3, [r4, #12]
 8001130:	bd10      	pop	{r4, pc}

08001132 <__sclose>:
 8001132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001136:	f000 b809 	b.w	800114c <_close_r>

0800113a <memset>:
 800113a:	4402      	add	r2, r0
 800113c:	4603      	mov	r3, r0
 800113e:	4293      	cmp	r3, r2
 8001140:	d100      	bne.n	8001144 <memset+0xa>
 8001142:	4770      	bx	lr
 8001144:	f803 1b01 	strb.w	r1, [r3], #1
 8001148:	e7f9      	b.n	800113e <memset+0x4>
	...

0800114c <_close_r>:
 800114c:	b538      	push	{r3, r4, r5, lr}
 800114e:	4d06      	ldr	r5, [pc, #24]	@ (8001168 <_close_r+0x1c>)
 8001150:	2300      	movs	r3, #0
 8001152:	4604      	mov	r4, r0
 8001154:	4608      	mov	r0, r1
 8001156:	602b      	str	r3, [r5, #0]
 8001158:	f7ff f97d 	bl	8000456 <_close>
 800115c:	1c43      	adds	r3, r0, #1
 800115e:	d102      	bne.n	8001166 <_close_r+0x1a>
 8001160:	682b      	ldr	r3, [r5, #0]
 8001162:	b103      	cbz	r3, 8001166 <_close_r+0x1a>
 8001164:	6023      	str	r3, [r4, #0]
 8001166:	bd38      	pop	{r3, r4, r5, pc}
 8001168:	200005e8 	.word	0x200005e8

0800116c <_lseek_r>:
 800116c:	b538      	push	{r3, r4, r5, lr}
 800116e:	4d07      	ldr	r5, [pc, #28]	@ (800118c <_lseek_r+0x20>)
 8001170:	4604      	mov	r4, r0
 8001172:	4608      	mov	r0, r1
 8001174:	4611      	mov	r1, r2
 8001176:	2200      	movs	r2, #0
 8001178:	602a      	str	r2, [r5, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	f7ff f98f 	bl	800049e <_lseek>
 8001180:	1c43      	adds	r3, r0, #1
 8001182:	d102      	bne.n	800118a <_lseek_r+0x1e>
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	b103      	cbz	r3, 800118a <_lseek_r+0x1e>
 8001188:	6023      	str	r3, [r4, #0]
 800118a:	bd38      	pop	{r3, r4, r5, pc}
 800118c:	200005e8 	.word	0x200005e8

08001190 <_read_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	4d07      	ldr	r5, [pc, #28]	@ (80011b0 <_read_r+0x20>)
 8001194:	4604      	mov	r4, r0
 8001196:	4608      	mov	r0, r1
 8001198:	4611      	mov	r1, r2
 800119a:	2200      	movs	r2, #0
 800119c:	602a      	str	r2, [r5, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	f7ff f920 	bl	80003e4 <_read>
 80011a4:	1c43      	adds	r3, r0, #1
 80011a6:	d102      	bne.n	80011ae <_read_r+0x1e>
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	b103      	cbz	r3, 80011ae <_read_r+0x1e>
 80011ac:	6023      	str	r3, [r4, #0]
 80011ae:	bd38      	pop	{r3, r4, r5, pc}
 80011b0:	200005e8 	.word	0x200005e8

080011b4 <_write_r>:
 80011b4:	b538      	push	{r3, r4, r5, lr}
 80011b6:	4d07      	ldr	r5, [pc, #28]	@ (80011d4 <_write_r+0x20>)
 80011b8:	4604      	mov	r4, r0
 80011ba:	4608      	mov	r0, r1
 80011bc:	4611      	mov	r1, r2
 80011be:	2200      	movs	r2, #0
 80011c0:	602a      	str	r2, [r5, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	f7ff f92b 	bl	800041e <_write>
 80011c8:	1c43      	adds	r3, r0, #1
 80011ca:	d102      	bne.n	80011d2 <_write_r+0x1e>
 80011cc:	682b      	ldr	r3, [r5, #0]
 80011ce:	b103      	cbz	r3, 80011d2 <_write_r+0x1e>
 80011d0:	6023      	str	r3, [r4, #0]
 80011d2:	bd38      	pop	{r3, r4, r5, pc}
 80011d4:	200005e8 	.word	0x200005e8

080011d8 <__errno>:
 80011d8:	4b01      	ldr	r3, [pc, #4]	@ (80011e0 <__errno+0x8>)
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000010 	.word	0x20000010

080011e4 <__libc_init_array>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	4d0d      	ldr	r5, [pc, #52]	@ (800121c <__libc_init_array+0x38>)
 80011e8:	4c0d      	ldr	r4, [pc, #52]	@ (8001220 <__libc_init_array+0x3c>)
 80011ea:	1b64      	subs	r4, r4, r5
 80011ec:	10a4      	asrs	r4, r4, #2
 80011ee:	2600      	movs	r6, #0
 80011f0:	42a6      	cmp	r6, r4
 80011f2:	d109      	bne.n	8001208 <__libc_init_array+0x24>
 80011f4:	4d0b      	ldr	r5, [pc, #44]	@ (8001224 <__libc_init_array+0x40>)
 80011f6:	4c0c      	ldr	r4, [pc, #48]	@ (8001228 <__libc_init_array+0x44>)
 80011f8:	f000 fdb2 	bl	8001d60 <_init>
 80011fc:	1b64      	subs	r4, r4, r5
 80011fe:	10a4      	asrs	r4, r4, #2
 8001200:	2600      	movs	r6, #0
 8001202:	42a6      	cmp	r6, r4
 8001204:	d105      	bne.n	8001212 <__libc_init_array+0x2e>
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	f855 3b04 	ldr.w	r3, [r5], #4
 800120c:	4798      	blx	r3
 800120e:	3601      	adds	r6, #1
 8001210:	e7ee      	b.n	80011f0 <__libc_init_array+0xc>
 8001212:	f855 3b04 	ldr.w	r3, [r5], #4
 8001216:	4798      	blx	r3
 8001218:	3601      	adds	r6, #1
 800121a:	e7f2      	b.n	8001202 <__libc_init_array+0x1e>
 800121c:	08001dc8 	.word	0x08001dc8
 8001220:	08001dc8 	.word	0x08001dc8
 8001224:	08001dc8 	.word	0x08001dc8
 8001228:	08001dcc 	.word	0x08001dcc

0800122c <__retarget_lock_init_recursive>:
 800122c:	4770      	bx	lr

0800122e <__retarget_lock_acquire_recursive>:
 800122e:	4770      	bx	lr

08001230 <__retarget_lock_release_recursive>:
 8001230:	4770      	bx	lr
	...

08001234 <_free_r>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4605      	mov	r5, r0
 8001238:	2900      	cmp	r1, #0
 800123a:	d041      	beq.n	80012c0 <_free_r+0x8c>
 800123c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001240:	1f0c      	subs	r4, r1, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	bfb8      	it	lt
 8001246:	18e4      	addlt	r4, r4, r3
 8001248:	f000 f8e0 	bl	800140c <__malloc_lock>
 800124c:	4a1d      	ldr	r2, [pc, #116]	@ (80012c4 <_free_r+0x90>)
 800124e:	6813      	ldr	r3, [r2, #0]
 8001250:	b933      	cbnz	r3, 8001260 <_free_r+0x2c>
 8001252:	6063      	str	r3, [r4, #4]
 8001254:	6014      	str	r4, [r2, #0]
 8001256:	4628      	mov	r0, r5
 8001258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800125c:	f000 b8dc 	b.w	8001418 <__malloc_unlock>
 8001260:	42a3      	cmp	r3, r4
 8001262:	d908      	bls.n	8001276 <_free_r+0x42>
 8001264:	6820      	ldr	r0, [r4, #0]
 8001266:	1821      	adds	r1, r4, r0
 8001268:	428b      	cmp	r3, r1
 800126a:	bf01      	itttt	eq
 800126c:	6819      	ldreq	r1, [r3, #0]
 800126e:	685b      	ldreq	r3, [r3, #4]
 8001270:	1809      	addeq	r1, r1, r0
 8001272:	6021      	streq	r1, [r4, #0]
 8001274:	e7ed      	b.n	8001252 <_free_r+0x1e>
 8001276:	461a      	mov	r2, r3
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	b10b      	cbz	r3, 8001280 <_free_r+0x4c>
 800127c:	42a3      	cmp	r3, r4
 800127e:	d9fa      	bls.n	8001276 <_free_r+0x42>
 8001280:	6811      	ldr	r1, [r2, #0]
 8001282:	1850      	adds	r0, r2, r1
 8001284:	42a0      	cmp	r0, r4
 8001286:	d10b      	bne.n	80012a0 <_free_r+0x6c>
 8001288:	6820      	ldr	r0, [r4, #0]
 800128a:	4401      	add	r1, r0
 800128c:	1850      	adds	r0, r2, r1
 800128e:	4283      	cmp	r3, r0
 8001290:	6011      	str	r1, [r2, #0]
 8001292:	d1e0      	bne.n	8001256 <_free_r+0x22>
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	6053      	str	r3, [r2, #4]
 800129a:	4408      	add	r0, r1
 800129c:	6010      	str	r0, [r2, #0]
 800129e:	e7da      	b.n	8001256 <_free_r+0x22>
 80012a0:	d902      	bls.n	80012a8 <_free_r+0x74>
 80012a2:	230c      	movs	r3, #12
 80012a4:	602b      	str	r3, [r5, #0]
 80012a6:	e7d6      	b.n	8001256 <_free_r+0x22>
 80012a8:	6820      	ldr	r0, [r4, #0]
 80012aa:	1821      	adds	r1, r4, r0
 80012ac:	428b      	cmp	r3, r1
 80012ae:	bf04      	itt	eq
 80012b0:	6819      	ldreq	r1, [r3, #0]
 80012b2:	685b      	ldreq	r3, [r3, #4]
 80012b4:	6063      	str	r3, [r4, #4]
 80012b6:	bf04      	itt	eq
 80012b8:	1809      	addeq	r1, r1, r0
 80012ba:	6021      	streq	r1, [r4, #0]
 80012bc:	6054      	str	r4, [r2, #4]
 80012be:	e7ca      	b.n	8001256 <_free_r+0x22>
 80012c0:	bd38      	pop	{r3, r4, r5, pc}
 80012c2:	bf00      	nop
 80012c4:	200005f4 	.word	0x200005f4

080012c8 <sbrk_aligned>:
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	4e0f      	ldr	r6, [pc, #60]	@ (8001308 <sbrk_aligned+0x40>)
 80012cc:	460c      	mov	r4, r1
 80012ce:	6831      	ldr	r1, [r6, #0]
 80012d0:	4605      	mov	r5, r0
 80012d2:	b911      	cbnz	r1, 80012da <sbrk_aligned+0x12>
 80012d4:	f000 fcb0 	bl	8001c38 <_sbrk_r>
 80012d8:	6030      	str	r0, [r6, #0]
 80012da:	4621      	mov	r1, r4
 80012dc:	4628      	mov	r0, r5
 80012de:	f000 fcab 	bl	8001c38 <_sbrk_r>
 80012e2:	1c43      	adds	r3, r0, #1
 80012e4:	d103      	bne.n	80012ee <sbrk_aligned+0x26>
 80012e6:	f04f 34ff 	mov.w	r4, #4294967295
 80012ea:	4620      	mov	r0, r4
 80012ec:	bd70      	pop	{r4, r5, r6, pc}
 80012ee:	1cc4      	adds	r4, r0, #3
 80012f0:	f024 0403 	bic.w	r4, r4, #3
 80012f4:	42a0      	cmp	r0, r4
 80012f6:	d0f8      	beq.n	80012ea <sbrk_aligned+0x22>
 80012f8:	1a21      	subs	r1, r4, r0
 80012fa:	4628      	mov	r0, r5
 80012fc:	f000 fc9c 	bl	8001c38 <_sbrk_r>
 8001300:	3001      	adds	r0, #1
 8001302:	d1f2      	bne.n	80012ea <sbrk_aligned+0x22>
 8001304:	e7ef      	b.n	80012e6 <sbrk_aligned+0x1e>
 8001306:	bf00      	nop
 8001308:	200005f0 	.word	0x200005f0

0800130c <_malloc_r>:
 800130c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001310:	1ccd      	adds	r5, r1, #3
 8001312:	f025 0503 	bic.w	r5, r5, #3
 8001316:	3508      	adds	r5, #8
 8001318:	2d0c      	cmp	r5, #12
 800131a:	bf38      	it	cc
 800131c:	250c      	movcc	r5, #12
 800131e:	2d00      	cmp	r5, #0
 8001320:	4606      	mov	r6, r0
 8001322:	db01      	blt.n	8001328 <_malloc_r+0x1c>
 8001324:	42a9      	cmp	r1, r5
 8001326:	d904      	bls.n	8001332 <_malloc_r+0x26>
 8001328:	230c      	movs	r3, #12
 800132a:	6033      	str	r3, [r6, #0]
 800132c:	2000      	movs	r0, #0
 800132e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001332:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001408 <_malloc_r+0xfc>
 8001336:	f000 f869 	bl	800140c <__malloc_lock>
 800133a:	f8d8 3000 	ldr.w	r3, [r8]
 800133e:	461c      	mov	r4, r3
 8001340:	bb44      	cbnz	r4, 8001394 <_malloc_r+0x88>
 8001342:	4629      	mov	r1, r5
 8001344:	4630      	mov	r0, r6
 8001346:	f7ff ffbf 	bl	80012c8 <sbrk_aligned>
 800134a:	1c43      	adds	r3, r0, #1
 800134c:	4604      	mov	r4, r0
 800134e:	d158      	bne.n	8001402 <_malloc_r+0xf6>
 8001350:	f8d8 4000 	ldr.w	r4, [r8]
 8001354:	4627      	mov	r7, r4
 8001356:	2f00      	cmp	r7, #0
 8001358:	d143      	bne.n	80013e2 <_malloc_r+0xd6>
 800135a:	2c00      	cmp	r4, #0
 800135c:	d04b      	beq.n	80013f6 <_malloc_r+0xea>
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	4639      	mov	r1, r7
 8001362:	4630      	mov	r0, r6
 8001364:	eb04 0903 	add.w	r9, r4, r3
 8001368:	f000 fc66 	bl	8001c38 <_sbrk_r>
 800136c:	4581      	cmp	r9, r0
 800136e:	d142      	bne.n	80013f6 <_malloc_r+0xea>
 8001370:	6821      	ldr	r1, [r4, #0]
 8001372:	1a6d      	subs	r5, r5, r1
 8001374:	4629      	mov	r1, r5
 8001376:	4630      	mov	r0, r6
 8001378:	f7ff ffa6 	bl	80012c8 <sbrk_aligned>
 800137c:	3001      	adds	r0, #1
 800137e:	d03a      	beq.n	80013f6 <_malloc_r+0xea>
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	442b      	add	r3, r5
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	f8d8 3000 	ldr.w	r3, [r8]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	bb62      	cbnz	r2, 80013e8 <_malloc_r+0xdc>
 800138e:	f8c8 7000 	str.w	r7, [r8]
 8001392:	e00f      	b.n	80013b4 <_malloc_r+0xa8>
 8001394:	6822      	ldr	r2, [r4, #0]
 8001396:	1b52      	subs	r2, r2, r5
 8001398:	d420      	bmi.n	80013dc <_malloc_r+0xd0>
 800139a:	2a0b      	cmp	r2, #11
 800139c:	d917      	bls.n	80013ce <_malloc_r+0xc2>
 800139e:	1961      	adds	r1, r4, r5
 80013a0:	42a3      	cmp	r3, r4
 80013a2:	6025      	str	r5, [r4, #0]
 80013a4:	bf18      	it	ne
 80013a6:	6059      	strne	r1, [r3, #4]
 80013a8:	6863      	ldr	r3, [r4, #4]
 80013aa:	bf08      	it	eq
 80013ac:	f8c8 1000 	streq.w	r1, [r8]
 80013b0:	5162      	str	r2, [r4, r5]
 80013b2:	604b      	str	r3, [r1, #4]
 80013b4:	4630      	mov	r0, r6
 80013b6:	f000 f82f 	bl	8001418 <__malloc_unlock>
 80013ba:	f104 000b 	add.w	r0, r4, #11
 80013be:	1d23      	adds	r3, r4, #4
 80013c0:	f020 0007 	bic.w	r0, r0, #7
 80013c4:	1ac2      	subs	r2, r0, r3
 80013c6:	bf1c      	itt	ne
 80013c8:	1a1b      	subne	r3, r3, r0
 80013ca:	50a3      	strne	r3, [r4, r2]
 80013cc:	e7af      	b.n	800132e <_malloc_r+0x22>
 80013ce:	6862      	ldr	r2, [r4, #4]
 80013d0:	42a3      	cmp	r3, r4
 80013d2:	bf0c      	ite	eq
 80013d4:	f8c8 2000 	streq.w	r2, [r8]
 80013d8:	605a      	strne	r2, [r3, #4]
 80013da:	e7eb      	b.n	80013b4 <_malloc_r+0xa8>
 80013dc:	4623      	mov	r3, r4
 80013de:	6864      	ldr	r4, [r4, #4]
 80013e0:	e7ae      	b.n	8001340 <_malloc_r+0x34>
 80013e2:	463c      	mov	r4, r7
 80013e4:	687f      	ldr	r7, [r7, #4]
 80013e6:	e7b6      	b.n	8001356 <_malloc_r+0x4a>
 80013e8:	461a      	mov	r2, r3
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	42a3      	cmp	r3, r4
 80013ee:	d1fb      	bne.n	80013e8 <_malloc_r+0xdc>
 80013f0:	2300      	movs	r3, #0
 80013f2:	6053      	str	r3, [r2, #4]
 80013f4:	e7de      	b.n	80013b4 <_malloc_r+0xa8>
 80013f6:	230c      	movs	r3, #12
 80013f8:	6033      	str	r3, [r6, #0]
 80013fa:	4630      	mov	r0, r6
 80013fc:	f000 f80c 	bl	8001418 <__malloc_unlock>
 8001400:	e794      	b.n	800132c <_malloc_r+0x20>
 8001402:	6005      	str	r5, [r0, #0]
 8001404:	e7d6      	b.n	80013b4 <_malloc_r+0xa8>
 8001406:	bf00      	nop
 8001408:	200005f4 	.word	0x200005f4

0800140c <__malloc_lock>:
 800140c:	4801      	ldr	r0, [pc, #4]	@ (8001414 <__malloc_lock+0x8>)
 800140e:	f7ff bf0e 	b.w	800122e <__retarget_lock_acquire_recursive>
 8001412:	bf00      	nop
 8001414:	200005ec 	.word	0x200005ec

08001418 <__malloc_unlock>:
 8001418:	4801      	ldr	r0, [pc, #4]	@ (8001420 <__malloc_unlock+0x8>)
 800141a:	f7ff bf09 	b.w	8001230 <__retarget_lock_release_recursive>
 800141e:	bf00      	nop
 8001420:	200005ec 	.word	0x200005ec

08001424 <__sfputc_r>:
 8001424:	6893      	ldr	r3, [r2, #8]
 8001426:	3b01      	subs	r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	b410      	push	{r4}
 800142c:	6093      	str	r3, [r2, #8]
 800142e:	da07      	bge.n	8001440 <__sfputc_r+0x1c>
 8001430:	6994      	ldr	r4, [r2, #24]
 8001432:	42a3      	cmp	r3, r4
 8001434:	db01      	blt.n	800143a <__sfputc_r+0x16>
 8001436:	290a      	cmp	r1, #10
 8001438:	d102      	bne.n	8001440 <__sfputc_r+0x1c>
 800143a:	bc10      	pop	{r4}
 800143c:	f000 bb68 	b.w	8001b10 <__swbuf_r>
 8001440:	6813      	ldr	r3, [r2, #0]
 8001442:	1c58      	adds	r0, r3, #1
 8001444:	6010      	str	r0, [r2, #0]
 8001446:	7019      	strb	r1, [r3, #0]
 8001448:	4608      	mov	r0, r1
 800144a:	bc10      	pop	{r4}
 800144c:	4770      	bx	lr

0800144e <__sfputs_r>:
 800144e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001450:	4606      	mov	r6, r0
 8001452:	460f      	mov	r7, r1
 8001454:	4614      	mov	r4, r2
 8001456:	18d5      	adds	r5, r2, r3
 8001458:	42ac      	cmp	r4, r5
 800145a:	d101      	bne.n	8001460 <__sfputs_r+0x12>
 800145c:	2000      	movs	r0, #0
 800145e:	e007      	b.n	8001470 <__sfputs_r+0x22>
 8001460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001464:	463a      	mov	r2, r7
 8001466:	4630      	mov	r0, r6
 8001468:	f7ff ffdc 	bl	8001424 <__sfputc_r>
 800146c:	1c43      	adds	r3, r0, #1
 800146e:	d1f3      	bne.n	8001458 <__sfputs_r+0xa>
 8001470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001474 <_vfiprintf_r>:
 8001474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001478:	460d      	mov	r5, r1
 800147a:	b09d      	sub	sp, #116	@ 0x74
 800147c:	4614      	mov	r4, r2
 800147e:	4698      	mov	r8, r3
 8001480:	4606      	mov	r6, r0
 8001482:	b118      	cbz	r0, 800148c <_vfiprintf_r+0x18>
 8001484:	6a03      	ldr	r3, [r0, #32]
 8001486:	b90b      	cbnz	r3, 800148c <_vfiprintf_r+0x18>
 8001488:	f7ff fdcc 	bl	8001024 <__sinit>
 800148c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800148e:	07d9      	lsls	r1, r3, #31
 8001490:	d405      	bmi.n	800149e <_vfiprintf_r+0x2a>
 8001492:	89ab      	ldrh	r3, [r5, #12]
 8001494:	059a      	lsls	r2, r3, #22
 8001496:	d402      	bmi.n	800149e <_vfiprintf_r+0x2a>
 8001498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800149a:	f7ff fec8 	bl	800122e <__retarget_lock_acquire_recursive>
 800149e:	89ab      	ldrh	r3, [r5, #12]
 80014a0:	071b      	lsls	r3, r3, #28
 80014a2:	d501      	bpl.n	80014a8 <_vfiprintf_r+0x34>
 80014a4:	692b      	ldr	r3, [r5, #16]
 80014a6:	b99b      	cbnz	r3, 80014d0 <_vfiprintf_r+0x5c>
 80014a8:	4629      	mov	r1, r5
 80014aa:	4630      	mov	r0, r6
 80014ac:	f000 fb6e 	bl	8001b8c <__swsetup_r>
 80014b0:	b170      	cbz	r0, 80014d0 <_vfiprintf_r+0x5c>
 80014b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80014b4:	07dc      	lsls	r4, r3, #31
 80014b6:	d504      	bpl.n	80014c2 <_vfiprintf_r+0x4e>
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	b01d      	add	sp, #116	@ 0x74
 80014be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014c2:	89ab      	ldrh	r3, [r5, #12]
 80014c4:	0598      	lsls	r0, r3, #22
 80014c6:	d4f7      	bmi.n	80014b8 <_vfiprintf_r+0x44>
 80014c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80014ca:	f7ff feb1 	bl	8001230 <__retarget_lock_release_recursive>
 80014ce:	e7f3      	b.n	80014b8 <_vfiprintf_r+0x44>
 80014d0:	2300      	movs	r3, #0
 80014d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80014d4:	2320      	movs	r3, #32
 80014d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80014da:	f8cd 800c 	str.w	r8, [sp, #12]
 80014de:	2330      	movs	r3, #48	@ 0x30
 80014e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001690 <_vfiprintf_r+0x21c>
 80014e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80014e8:	f04f 0901 	mov.w	r9, #1
 80014ec:	4623      	mov	r3, r4
 80014ee:	469a      	mov	sl, r3
 80014f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014f4:	b10a      	cbz	r2, 80014fa <_vfiprintf_r+0x86>
 80014f6:	2a25      	cmp	r2, #37	@ 0x25
 80014f8:	d1f9      	bne.n	80014ee <_vfiprintf_r+0x7a>
 80014fa:	ebba 0b04 	subs.w	fp, sl, r4
 80014fe:	d00b      	beq.n	8001518 <_vfiprintf_r+0xa4>
 8001500:	465b      	mov	r3, fp
 8001502:	4622      	mov	r2, r4
 8001504:	4629      	mov	r1, r5
 8001506:	4630      	mov	r0, r6
 8001508:	f7ff ffa1 	bl	800144e <__sfputs_r>
 800150c:	3001      	adds	r0, #1
 800150e:	f000 80a7 	beq.w	8001660 <_vfiprintf_r+0x1ec>
 8001512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001514:	445a      	add	r2, fp
 8001516:	9209      	str	r2, [sp, #36]	@ 0x24
 8001518:	f89a 3000 	ldrb.w	r3, [sl]
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 809f 	beq.w	8001660 <_vfiprintf_r+0x1ec>
 8001522:	2300      	movs	r3, #0
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800152c:	f10a 0a01 	add.w	sl, sl, #1
 8001530:	9304      	str	r3, [sp, #16]
 8001532:	9307      	str	r3, [sp, #28]
 8001534:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001538:	931a      	str	r3, [sp, #104]	@ 0x68
 800153a:	4654      	mov	r4, sl
 800153c:	2205      	movs	r2, #5
 800153e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001542:	4853      	ldr	r0, [pc, #332]	@ (8001690 <_vfiprintf_r+0x21c>)
 8001544:	f7fe fe44 	bl	80001d0 <memchr>
 8001548:	9a04      	ldr	r2, [sp, #16]
 800154a:	b9d8      	cbnz	r0, 8001584 <_vfiprintf_r+0x110>
 800154c:	06d1      	lsls	r1, r2, #27
 800154e:	bf44      	itt	mi
 8001550:	2320      	movmi	r3, #32
 8001552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001556:	0713      	lsls	r3, r2, #28
 8001558:	bf44      	itt	mi
 800155a:	232b      	movmi	r3, #43	@ 0x2b
 800155c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001560:	f89a 3000 	ldrb.w	r3, [sl]
 8001564:	2b2a      	cmp	r3, #42	@ 0x2a
 8001566:	d015      	beq.n	8001594 <_vfiprintf_r+0x120>
 8001568:	9a07      	ldr	r2, [sp, #28]
 800156a:	4654      	mov	r4, sl
 800156c:	2000      	movs	r0, #0
 800156e:	f04f 0c0a 	mov.w	ip, #10
 8001572:	4621      	mov	r1, r4
 8001574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001578:	3b30      	subs	r3, #48	@ 0x30
 800157a:	2b09      	cmp	r3, #9
 800157c:	d94b      	bls.n	8001616 <_vfiprintf_r+0x1a2>
 800157e:	b1b0      	cbz	r0, 80015ae <_vfiprintf_r+0x13a>
 8001580:	9207      	str	r2, [sp, #28]
 8001582:	e014      	b.n	80015ae <_vfiprintf_r+0x13a>
 8001584:	eba0 0308 	sub.w	r3, r0, r8
 8001588:	fa09 f303 	lsl.w	r3, r9, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	9304      	str	r3, [sp, #16]
 8001590:	46a2      	mov	sl, r4
 8001592:	e7d2      	b.n	800153a <_vfiprintf_r+0xc6>
 8001594:	9b03      	ldr	r3, [sp, #12]
 8001596:	1d19      	adds	r1, r3, #4
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	9103      	str	r1, [sp, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	bfbb      	ittet	lt
 80015a0:	425b      	neglt	r3, r3
 80015a2:	f042 0202 	orrlt.w	r2, r2, #2
 80015a6:	9307      	strge	r3, [sp, #28]
 80015a8:	9307      	strlt	r3, [sp, #28]
 80015aa:	bfb8      	it	lt
 80015ac:	9204      	strlt	r2, [sp, #16]
 80015ae:	7823      	ldrb	r3, [r4, #0]
 80015b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80015b2:	d10a      	bne.n	80015ca <_vfiprintf_r+0x156>
 80015b4:	7863      	ldrb	r3, [r4, #1]
 80015b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80015b8:	d132      	bne.n	8001620 <_vfiprintf_r+0x1ac>
 80015ba:	9b03      	ldr	r3, [sp, #12]
 80015bc:	1d1a      	adds	r2, r3, #4
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	9203      	str	r2, [sp, #12]
 80015c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80015c6:	3402      	adds	r4, #2
 80015c8:	9305      	str	r3, [sp, #20]
 80015ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001694 <_vfiprintf_r+0x220>
 80015ce:	7821      	ldrb	r1, [r4, #0]
 80015d0:	2203      	movs	r2, #3
 80015d2:	4650      	mov	r0, sl
 80015d4:	f7fe fdfc 	bl	80001d0 <memchr>
 80015d8:	b138      	cbz	r0, 80015ea <_vfiprintf_r+0x176>
 80015da:	9b04      	ldr	r3, [sp, #16]
 80015dc:	eba0 000a 	sub.w	r0, r0, sl
 80015e0:	2240      	movs	r2, #64	@ 0x40
 80015e2:	4082      	lsls	r2, r0
 80015e4:	4313      	orrs	r3, r2
 80015e6:	3401      	adds	r4, #1
 80015e8:	9304      	str	r3, [sp, #16]
 80015ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015ee:	482a      	ldr	r0, [pc, #168]	@ (8001698 <_vfiprintf_r+0x224>)
 80015f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80015f4:	2206      	movs	r2, #6
 80015f6:	f7fe fdeb 	bl	80001d0 <memchr>
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d03f      	beq.n	800167e <_vfiprintf_r+0x20a>
 80015fe:	4b27      	ldr	r3, [pc, #156]	@ (800169c <_vfiprintf_r+0x228>)
 8001600:	bb1b      	cbnz	r3, 800164a <_vfiprintf_r+0x1d6>
 8001602:	9b03      	ldr	r3, [sp, #12]
 8001604:	3307      	adds	r3, #7
 8001606:	f023 0307 	bic.w	r3, r3, #7
 800160a:	3308      	adds	r3, #8
 800160c:	9303      	str	r3, [sp, #12]
 800160e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001610:	443b      	add	r3, r7
 8001612:	9309      	str	r3, [sp, #36]	@ 0x24
 8001614:	e76a      	b.n	80014ec <_vfiprintf_r+0x78>
 8001616:	fb0c 3202 	mla	r2, ip, r2, r3
 800161a:	460c      	mov	r4, r1
 800161c:	2001      	movs	r0, #1
 800161e:	e7a8      	b.n	8001572 <_vfiprintf_r+0xfe>
 8001620:	2300      	movs	r3, #0
 8001622:	3401      	adds	r4, #1
 8001624:	9305      	str	r3, [sp, #20]
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 0c0a 	mov.w	ip, #10
 800162c:	4620      	mov	r0, r4
 800162e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001632:	3a30      	subs	r2, #48	@ 0x30
 8001634:	2a09      	cmp	r2, #9
 8001636:	d903      	bls.n	8001640 <_vfiprintf_r+0x1cc>
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0c6      	beq.n	80015ca <_vfiprintf_r+0x156>
 800163c:	9105      	str	r1, [sp, #20]
 800163e:	e7c4      	b.n	80015ca <_vfiprintf_r+0x156>
 8001640:	fb0c 2101 	mla	r1, ip, r1, r2
 8001644:	4604      	mov	r4, r0
 8001646:	2301      	movs	r3, #1
 8001648:	e7f0      	b.n	800162c <_vfiprintf_r+0x1b8>
 800164a:	ab03      	add	r3, sp, #12
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	462a      	mov	r2, r5
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <_vfiprintf_r+0x22c>)
 8001652:	a904      	add	r1, sp, #16
 8001654:	4630      	mov	r0, r6
 8001656:	f3af 8000 	nop.w
 800165a:	4607      	mov	r7, r0
 800165c:	1c78      	adds	r0, r7, #1
 800165e:	d1d6      	bne.n	800160e <_vfiprintf_r+0x19a>
 8001660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001662:	07d9      	lsls	r1, r3, #31
 8001664:	d405      	bmi.n	8001672 <_vfiprintf_r+0x1fe>
 8001666:	89ab      	ldrh	r3, [r5, #12]
 8001668:	059a      	lsls	r2, r3, #22
 800166a:	d402      	bmi.n	8001672 <_vfiprintf_r+0x1fe>
 800166c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800166e:	f7ff fddf 	bl	8001230 <__retarget_lock_release_recursive>
 8001672:	89ab      	ldrh	r3, [r5, #12]
 8001674:	065b      	lsls	r3, r3, #25
 8001676:	f53f af1f 	bmi.w	80014b8 <_vfiprintf_r+0x44>
 800167a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800167c:	e71e      	b.n	80014bc <_vfiprintf_r+0x48>
 800167e:	ab03      	add	r3, sp, #12
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	462a      	mov	r2, r5
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <_vfiprintf_r+0x22c>)
 8001686:	a904      	add	r1, sp, #16
 8001688:	4630      	mov	r0, r6
 800168a:	f000 f879 	bl	8001780 <_printf_i>
 800168e:	e7e4      	b.n	800165a <_vfiprintf_r+0x1e6>
 8001690:	08001d8b 	.word	0x08001d8b
 8001694:	08001d91 	.word	0x08001d91
 8001698:	08001d95 	.word	0x08001d95
 800169c:	00000000 	.word	0x00000000
 80016a0:	0800144f 	.word	0x0800144f

080016a4 <_printf_common>:
 80016a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016a8:	4616      	mov	r6, r2
 80016aa:	4698      	mov	r8, r3
 80016ac:	688a      	ldr	r2, [r1, #8]
 80016ae:	690b      	ldr	r3, [r1, #16]
 80016b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80016b4:	4293      	cmp	r3, r2
 80016b6:	bfb8      	it	lt
 80016b8:	4613      	movlt	r3, r2
 80016ba:	6033      	str	r3, [r6, #0]
 80016bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80016c0:	4607      	mov	r7, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	b10a      	cbz	r2, 80016ca <_printf_common+0x26>
 80016c6:	3301      	adds	r3, #1
 80016c8:	6033      	str	r3, [r6, #0]
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	0699      	lsls	r1, r3, #26
 80016ce:	bf42      	ittt	mi
 80016d0:	6833      	ldrmi	r3, [r6, #0]
 80016d2:	3302      	addmi	r3, #2
 80016d4:	6033      	strmi	r3, [r6, #0]
 80016d6:	6825      	ldr	r5, [r4, #0]
 80016d8:	f015 0506 	ands.w	r5, r5, #6
 80016dc:	d106      	bne.n	80016ec <_printf_common+0x48>
 80016de:	f104 0a19 	add.w	sl, r4, #25
 80016e2:	68e3      	ldr	r3, [r4, #12]
 80016e4:	6832      	ldr	r2, [r6, #0]
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	42ab      	cmp	r3, r5
 80016ea:	dc26      	bgt.n	800173a <_printf_common+0x96>
 80016ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80016f0:	6822      	ldr	r2, [r4, #0]
 80016f2:	3b00      	subs	r3, #0
 80016f4:	bf18      	it	ne
 80016f6:	2301      	movne	r3, #1
 80016f8:	0692      	lsls	r2, r2, #26
 80016fa:	d42b      	bmi.n	8001754 <_printf_common+0xb0>
 80016fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001700:	4641      	mov	r1, r8
 8001702:	4638      	mov	r0, r7
 8001704:	47c8      	blx	r9
 8001706:	3001      	adds	r0, #1
 8001708:	d01e      	beq.n	8001748 <_printf_common+0xa4>
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	6922      	ldr	r2, [r4, #16]
 800170e:	f003 0306 	and.w	r3, r3, #6
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf02      	ittt	eq
 8001716:	68e5      	ldreq	r5, [r4, #12]
 8001718:	6833      	ldreq	r3, [r6, #0]
 800171a:	1aed      	subeq	r5, r5, r3
 800171c:	68a3      	ldr	r3, [r4, #8]
 800171e:	bf0c      	ite	eq
 8001720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001724:	2500      	movne	r5, #0
 8001726:	4293      	cmp	r3, r2
 8001728:	bfc4      	itt	gt
 800172a:	1a9b      	subgt	r3, r3, r2
 800172c:	18ed      	addgt	r5, r5, r3
 800172e:	2600      	movs	r6, #0
 8001730:	341a      	adds	r4, #26
 8001732:	42b5      	cmp	r5, r6
 8001734:	d11a      	bne.n	800176c <_printf_common+0xc8>
 8001736:	2000      	movs	r0, #0
 8001738:	e008      	b.n	800174c <_printf_common+0xa8>
 800173a:	2301      	movs	r3, #1
 800173c:	4652      	mov	r2, sl
 800173e:	4641      	mov	r1, r8
 8001740:	4638      	mov	r0, r7
 8001742:	47c8      	blx	r9
 8001744:	3001      	adds	r0, #1
 8001746:	d103      	bne.n	8001750 <_printf_common+0xac>
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001750:	3501      	adds	r5, #1
 8001752:	e7c6      	b.n	80016e2 <_printf_common+0x3e>
 8001754:	18e1      	adds	r1, r4, r3
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	2030      	movs	r0, #48	@ 0x30
 800175a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800175e:	4422      	add	r2, r4
 8001760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001768:	3302      	adds	r3, #2
 800176a:	e7c7      	b.n	80016fc <_printf_common+0x58>
 800176c:	2301      	movs	r3, #1
 800176e:	4622      	mov	r2, r4
 8001770:	4641      	mov	r1, r8
 8001772:	4638      	mov	r0, r7
 8001774:	47c8      	blx	r9
 8001776:	3001      	adds	r0, #1
 8001778:	d0e6      	beq.n	8001748 <_printf_common+0xa4>
 800177a:	3601      	adds	r6, #1
 800177c:	e7d9      	b.n	8001732 <_printf_common+0x8e>
	...

08001780 <_printf_i>:
 8001780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001784:	7e0f      	ldrb	r7, [r1, #24]
 8001786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001788:	2f78      	cmp	r7, #120	@ 0x78
 800178a:	4691      	mov	r9, r2
 800178c:	4680      	mov	r8, r0
 800178e:	460c      	mov	r4, r1
 8001790:	469a      	mov	sl, r3
 8001792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001796:	d807      	bhi.n	80017a8 <_printf_i+0x28>
 8001798:	2f62      	cmp	r7, #98	@ 0x62
 800179a:	d80a      	bhi.n	80017b2 <_printf_i+0x32>
 800179c:	2f00      	cmp	r7, #0
 800179e:	f000 80d2 	beq.w	8001946 <_printf_i+0x1c6>
 80017a2:	2f58      	cmp	r7, #88	@ 0x58
 80017a4:	f000 80b9 	beq.w	800191a <_printf_i+0x19a>
 80017a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80017ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80017b0:	e03a      	b.n	8001828 <_printf_i+0xa8>
 80017b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80017b6:	2b15      	cmp	r3, #21
 80017b8:	d8f6      	bhi.n	80017a8 <_printf_i+0x28>
 80017ba:	a101      	add	r1, pc, #4	@ (adr r1, 80017c0 <_printf_i+0x40>)
 80017bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80017c0:	08001819 	.word	0x08001819
 80017c4:	0800182d 	.word	0x0800182d
 80017c8:	080017a9 	.word	0x080017a9
 80017cc:	080017a9 	.word	0x080017a9
 80017d0:	080017a9 	.word	0x080017a9
 80017d4:	080017a9 	.word	0x080017a9
 80017d8:	0800182d 	.word	0x0800182d
 80017dc:	080017a9 	.word	0x080017a9
 80017e0:	080017a9 	.word	0x080017a9
 80017e4:	080017a9 	.word	0x080017a9
 80017e8:	080017a9 	.word	0x080017a9
 80017ec:	0800192d 	.word	0x0800192d
 80017f0:	08001857 	.word	0x08001857
 80017f4:	080018e7 	.word	0x080018e7
 80017f8:	080017a9 	.word	0x080017a9
 80017fc:	080017a9 	.word	0x080017a9
 8001800:	0800194f 	.word	0x0800194f
 8001804:	080017a9 	.word	0x080017a9
 8001808:	08001857 	.word	0x08001857
 800180c:	080017a9 	.word	0x080017a9
 8001810:	080017a9 	.word	0x080017a9
 8001814:	080018ef 	.word	0x080018ef
 8001818:	6833      	ldr	r3, [r6, #0]
 800181a:	1d1a      	adds	r2, r3, #4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6032      	str	r2, [r6, #0]
 8001820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001828:	2301      	movs	r3, #1
 800182a:	e09d      	b.n	8001968 <_printf_i+0x1e8>
 800182c:	6833      	ldr	r3, [r6, #0]
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	1d19      	adds	r1, r3, #4
 8001832:	6031      	str	r1, [r6, #0]
 8001834:	0606      	lsls	r6, r0, #24
 8001836:	d501      	bpl.n	800183c <_printf_i+0xbc>
 8001838:	681d      	ldr	r5, [r3, #0]
 800183a:	e003      	b.n	8001844 <_printf_i+0xc4>
 800183c:	0645      	lsls	r5, r0, #25
 800183e:	d5fb      	bpl.n	8001838 <_printf_i+0xb8>
 8001840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001844:	2d00      	cmp	r5, #0
 8001846:	da03      	bge.n	8001850 <_printf_i+0xd0>
 8001848:	232d      	movs	r3, #45	@ 0x2d
 800184a:	426d      	negs	r5, r5
 800184c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001850:	4859      	ldr	r0, [pc, #356]	@ (80019b8 <_printf_i+0x238>)
 8001852:	230a      	movs	r3, #10
 8001854:	e011      	b.n	800187a <_printf_i+0xfa>
 8001856:	6821      	ldr	r1, [r4, #0]
 8001858:	6833      	ldr	r3, [r6, #0]
 800185a:	0608      	lsls	r0, r1, #24
 800185c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001860:	d402      	bmi.n	8001868 <_printf_i+0xe8>
 8001862:	0649      	lsls	r1, r1, #25
 8001864:	bf48      	it	mi
 8001866:	b2ad      	uxthmi	r5, r5
 8001868:	2f6f      	cmp	r7, #111	@ 0x6f
 800186a:	4853      	ldr	r0, [pc, #332]	@ (80019b8 <_printf_i+0x238>)
 800186c:	6033      	str	r3, [r6, #0]
 800186e:	bf14      	ite	ne
 8001870:	230a      	movne	r3, #10
 8001872:	2308      	moveq	r3, #8
 8001874:	2100      	movs	r1, #0
 8001876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800187a:	6866      	ldr	r6, [r4, #4]
 800187c:	60a6      	str	r6, [r4, #8]
 800187e:	2e00      	cmp	r6, #0
 8001880:	bfa2      	ittt	ge
 8001882:	6821      	ldrge	r1, [r4, #0]
 8001884:	f021 0104 	bicge.w	r1, r1, #4
 8001888:	6021      	strge	r1, [r4, #0]
 800188a:	b90d      	cbnz	r5, 8001890 <_printf_i+0x110>
 800188c:	2e00      	cmp	r6, #0
 800188e:	d04b      	beq.n	8001928 <_printf_i+0x1a8>
 8001890:	4616      	mov	r6, r2
 8001892:	fbb5 f1f3 	udiv	r1, r5, r3
 8001896:	fb03 5711 	mls	r7, r3, r1, r5
 800189a:	5dc7      	ldrb	r7, [r0, r7]
 800189c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80018a0:	462f      	mov	r7, r5
 80018a2:	42bb      	cmp	r3, r7
 80018a4:	460d      	mov	r5, r1
 80018a6:	d9f4      	bls.n	8001892 <_printf_i+0x112>
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d10b      	bne.n	80018c4 <_printf_i+0x144>
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	07df      	lsls	r7, r3, #31
 80018b0:	d508      	bpl.n	80018c4 <_printf_i+0x144>
 80018b2:	6923      	ldr	r3, [r4, #16]
 80018b4:	6861      	ldr	r1, [r4, #4]
 80018b6:	4299      	cmp	r1, r3
 80018b8:	bfde      	ittt	le
 80018ba:	2330      	movle	r3, #48	@ 0x30
 80018bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80018c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80018c4:	1b92      	subs	r2, r2, r6
 80018c6:	6122      	str	r2, [r4, #16]
 80018c8:	f8cd a000 	str.w	sl, [sp]
 80018cc:	464b      	mov	r3, r9
 80018ce:	aa03      	add	r2, sp, #12
 80018d0:	4621      	mov	r1, r4
 80018d2:	4640      	mov	r0, r8
 80018d4:	f7ff fee6 	bl	80016a4 <_printf_common>
 80018d8:	3001      	adds	r0, #1
 80018da:	d14a      	bne.n	8001972 <_printf_i+0x1f2>
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	b004      	add	sp, #16
 80018e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	6023      	str	r3, [r4, #0]
 80018ee:	4833      	ldr	r0, [pc, #204]	@ (80019bc <_printf_i+0x23c>)
 80018f0:	2778      	movs	r7, #120	@ 0x78
 80018f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	6831      	ldr	r1, [r6, #0]
 80018fa:	061f      	lsls	r7, r3, #24
 80018fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8001900:	d402      	bmi.n	8001908 <_printf_i+0x188>
 8001902:	065f      	lsls	r7, r3, #25
 8001904:	bf48      	it	mi
 8001906:	b2ad      	uxthmi	r5, r5
 8001908:	6031      	str	r1, [r6, #0]
 800190a:	07d9      	lsls	r1, r3, #31
 800190c:	bf44      	itt	mi
 800190e:	f043 0320 	orrmi.w	r3, r3, #32
 8001912:	6023      	strmi	r3, [r4, #0]
 8001914:	b11d      	cbz	r5, 800191e <_printf_i+0x19e>
 8001916:	2310      	movs	r3, #16
 8001918:	e7ac      	b.n	8001874 <_printf_i+0xf4>
 800191a:	4827      	ldr	r0, [pc, #156]	@ (80019b8 <_printf_i+0x238>)
 800191c:	e7e9      	b.n	80018f2 <_printf_i+0x172>
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	f023 0320 	bic.w	r3, r3, #32
 8001924:	6023      	str	r3, [r4, #0]
 8001926:	e7f6      	b.n	8001916 <_printf_i+0x196>
 8001928:	4616      	mov	r6, r2
 800192a:	e7bd      	b.n	80018a8 <_printf_i+0x128>
 800192c:	6833      	ldr	r3, [r6, #0]
 800192e:	6825      	ldr	r5, [r4, #0]
 8001930:	6961      	ldr	r1, [r4, #20]
 8001932:	1d18      	adds	r0, r3, #4
 8001934:	6030      	str	r0, [r6, #0]
 8001936:	062e      	lsls	r6, r5, #24
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	d501      	bpl.n	8001940 <_printf_i+0x1c0>
 800193c:	6019      	str	r1, [r3, #0]
 800193e:	e002      	b.n	8001946 <_printf_i+0x1c6>
 8001940:	0668      	lsls	r0, r5, #25
 8001942:	d5fb      	bpl.n	800193c <_printf_i+0x1bc>
 8001944:	8019      	strh	r1, [r3, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	6123      	str	r3, [r4, #16]
 800194a:	4616      	mov	r6, r2
 800194c:	e7bc      	b.n	80018c8 <_printf_i+0x148>
 800194e:	6833      	ldr	r3, [r6, #0]
 8001950:	1d1a      	adds	r2, r3, #4
 8001952:	6032      	str	r2, [r6, #0]
 8001954:	681e      	ldr	r6, [r3, #0]
 8001956:	6862      	ldr	r2, [r4, #4]
 8001958:	2100      	movs	r1, #0
 800195a:	4630      	mov	r0, r6
 800195c:	f7fe fc38 	bl	80001d0 <memchr>
 8001960:	b108      	cbz	r0, 8001966 <_printf_i+0x1e6>
 8001962:	1b80      	subs	r0, r0, r6
 8001964:	6060      	str	r0, [r4, #4]
 8001966:	6863      	ldr	r3, [r4, #4]
 8001968:	6123      	str	r3, [r4, #16]
 800196a:	2300      	movs	r3, #0
 800196c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001970:	e7aa      	b.n	80018c8 <_printf_i+0x148>
 8001972:	6923      	ldr	r3, [r4, #16]
 8001974:	4632      	mov	r2, r6
 8001976:	4649      	mov	r1, r9
 8001978:	4640      	mov	r0, r8
 800197a:	47d0      	blx	sl
 800197c:	3001      	adds	r0, #1
 800197e:	d0ad      	beq.n	80018dc <_printf_i+0x15c>
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	079b      	lsls	r3, r3, #30
 8001984:	d413      	bmi.n	80019ae <_printf_i+0x22e>
 8001986:	68e0      	ldr	r0, [r4, #12]
 8001988:	9b03      	ldr	r3, [sp, #12]
 800198a:	4298      	cmp	r0, r3
 800198c:	bfb8      	it	lt
 800198e:	4618      	movlt	r0, r3
 8001990:	e7a6      	b.n	80018e0 <_printf_i+0x160>
 8001992:	2301      	movs	r3, #1
 8001994:	4632      	mov	r2, r6
 8001996:	4649      	mov	r1, r9
 8001998:	4640      	mov	r0, r8
 800199a:	47d0      	blx	sl
 800199c:	3001      	adds	r0, #1
 800199e:	d09d      	beq.n	80018dc <_printf_i+0x15c>
 80019a0:	3501      	adds	r5, #1
 80019a2:	68e3      	ldr	r3, [r4, #12]
 80019a4:	9903      	ldr	r1, [sp, #12]
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	42ab      	cmp	r3, r5
 80019aa:	dcf2      	bgt.n	8001992 <_printf_i+0x212>
 80019ac:	e7eb      	b.n	8001986 <_printf_i+0x206>
 80019ae:	2500      	movs	r5, #0
 80019b0:	f104 0619 	add.w	r6, r4, #25
 80019b4:	e7f5      	b.n	80019a2 <_printf_i+0x222>
 80019b6:	bf00      	nop
 80019b8:	08001d9c 	.word	0x08001d9c
 80019bc:	08001dad 	.word	0x08001dad

080019c0 <__sflush_r>:
 80019c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	0716      	lsls	r6, r2, #28
 80019c8:	4605      	mov	r5, r0
 80019ca:	460c      	mov	r4, r1
 80019cc:	d454      	bmi.n	8001a78 <__sflush_r+0xb8>
 80019ce:	684b      	ldr	r3, [r1, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dc02      	bgt.n	80019da <__sflush_r+0x1a>
 80019d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	dd48      	ble.n	8001a6c <__sflush_r+0xac>
 80019da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80019dc:	2e00      	cmp	r6, #0
 80019de:	d045      	beq.n	8001a6c <__sflush_r+0xac>
 80019e0:	2300      	movs	r3, #0
 80019e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80019e6:	682f      	ldr	r7, [r5, #0]
 80019e8:	6a21      	ldr	r1, [r4, #32]
 80019ea:	602b      	str	r3, [r5, #0]
 80019ec:	d030      	beq.n	8001a50 <__sflush_r+0x90>
 80019ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80019f0:	89a3      	ldrh	r3, [r4, #12]
 80019f2:	0759      	lsls	r1, r3, #29
 80019f4:	d505      	bpl.n	8001a02 <__sflush_r+0x42>
 80019f6:	6863      	ldr	r3, [r4, #4]
 80019f8:	1ad2      	subs	r2, r2, r3
 80019fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80019fc:	b10b      	cbz	r3, 8001a02 <__sflush_r+0x42>
 80019fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a00:	1ad2      	subs	r2, r2, r3
 8001a02:	2300      	movs	r3, #0
 8001a04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001a06:	6a21      	ldr	r1, [r4, #32]
 8001a08:	4628      	mov	r0, r5
 8001a0a:	47b0      	blx	r6
 8001a0c:	1c43      	adds	r3, r0, #1
 8001a0e:	89a3      	ldrh	r3, [r4, #12]
 8001a10:	d106      	bne.n	8001a20 <__sflush_r+0x60>
 8001a12:	6829      	ldr	r1, [r5, #0]
 8001a14:	291d      	cmp	r1, #29
 8001a16:	d82b      	bhi.n	8001a70 <__sflush_r+0xb0>
 8001a18:	4a28      	ldr	r2, [pc, #160]	@ (8001abc <__sflush_r+0xfc>)
 8001a1a:	410a      	asrs	r2, r1
 8001a1c:	07d6      	lsls	r6, r2, #31
 8001a1e:	d427      	bmi.n	8001a70 <__sflush_r+0xb0>
 8001a20:	2200      	movs	r2, #0
 8001a22:	6062      	str	r2, [r4, #4]
 8001a24:	04d9      	lsls	r1, r3, #19
 8001a26:	6922      	ldr	r2, [r4, #16]
 8001a28:	6022      	str	r2, [r4, #0]
 8001a2a:	d504      	bpl.n	8001a36 <__sflush_r+0x76>
 8001a2c:	1c42      	adds	r2, r0, #1
 8001a2e:	d101      	bne.n	8001a34 <__sflush_r+0x74>
 8001a30:	682b      	ldr	r3, [r5, #0]
 8001a32:	b903      	cbnz	r3, 8001a36 <__sflush_r+0x76>
 8001a34:	6560      	str	r0, [r4, #84]	@ 0x54
 8001a36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a38:	602f      	str	r7, [r5, #0]
 8001a3a:	b1b9      	cbz	r1, 8001a6c <__sflush_r+0xac>
 8001a3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a40:	4299      	cmp	r1, r3
 8001a42:	d002      	beq.n	8001a4a <__sflush_r+0x8a>
 8001a44:	4628      	mov	r0, r5
 8001a46:	f7ff fbf5 	bl	8001234 <_free_r>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a4e:	e00d      	b.n	8001a6c <__sflush_r+0xac>
 8001a50:	2301      	movs	r3, #1
 8001a52:	4628      	mov	r0, r5
 8001a54:	47b0      	blx	r6
 8001a56:	4602      	mov	r2, r0
 8001a58:	1c50      	adds	r0, r2, #1
 8001a5a:	d1c9      	bne.n	80019f0 <__sflush_r+0x30>
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0c6      	beq.n	80019f0 <__sflush_r+0x30>
 8001a62:	2b1d      	cmp	r3, #29
 8001a64:	d001      	beq.n	8001a6a <__sflush_r+0xaa>
 8001a66:	2b16      	cmp	r3, #22
 8001a68:	d11d      	bne.n	8001aa6 <__sflush_r+0xe6>
 8001a6a:	602f      	str	r7, [r5, #0]
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	e021      	b.n	8001ab4 <__sflush_r+0xf4>
 8001a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	e01a      	b.n	8001aae <__sflush_r+0xee>
 8001a78:	690f      	ldr	r7, [r1, #16]
 8001a7a:	2f00      	cmp	r7, #0
 8001a7c:	d0f6      	beq.n	8001a6c <__sflush_r+0xac>
 8001a7e:	0793      	lsls	r3, r2, #30
 8001a80:	680e      	ldr	r6, [r1, #0]
 8001a82:	bf08      	it	eq
 8001a84:	694b      	ldreq	r3, [r1, #20]
 8001a86:	600f      	str	r7, [r1, #0]
 8001a88:	bf18      	it	ne
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	1bf6      	subs	r6, r6, r7
 8001a8e:	608b      	str	r3, [r1, #8]
 8001a90:	2e00      	cmp	r6, #0
 8001a92:	ddeb      	ble.n	8001a6c <__sflush_r+0xac>
 8001a94:	6a21      	ldr	r1, [r4, #32]
 8001a96:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001a9a:	4633      	mov	r3, r6
 8001a9c:	463a      	mov	r2, r7
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	47e0      	blx	ip
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	dc07      	bgt.n	8001ab6 <__sflush_r+0xf6>
 8001aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aae:	81a3      	strh	r3, [r4, #12]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab6:	4407      	add	r7, r0
 8001ab8:	1a36      	subs	r6, r6, r0
 8001aba:	e7e9      	b.n	8001a90 <__sflush_r+0xd0>
 8001abc:	dfbffffe 	.word	0xdfbffffe

08001ac0 <_fflush_r>:
 8001ac0:	b538      	push	{r3, r4, r5, lr}
 8001ac2:	690b      	ldr	r3, [r1, #16]
 8001ac4:	4605      	mov	r5, r0
 8001ac6:	460c      	mov	r4, r1
 8001ac8:	b913      	cbnz	r3, 8001ad0 <_fflush_r+0x10>
 8001aca:	2500      	movs	r5, #0
 8001acc:	4628      	mov	r0, r5
 8001ace:	bd38      	pop	{r3, r4, r5, pc}
 8001ad0:	b118      	cbz	r0, 8001ada <_fflush_r+0x1a>
 8001ad2:	6a03      	ldr	r3, [r0, #32]
 8001ad4:	b90b      	cbnz	r3, 8001ada <_fflush_r+0x1a>
 8001ad6:	f7ff faa5 	bl	8001024 <__sinit>
 8001ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f3      	beq.n	8001aca <_fflush_r+0xa>
 8001ae2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001ae4:	07d0      	lsls	r0, r2, #31
 8001ae6:	d404      	bmi.n	8001af2 <_fflush_r+0x32>
 8001ae8:	0599      	lsls	r1, r3, #22
 8001aea:	d402      	bmi.n	8001af2 <_fflush_r+0x32>
 8001aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001aee:	f7ff fb9e 	bl	800122e <__retarget_lock_acquire_recursive>
 8001af2:	4628      	mov	r0, r5
 8001af4:	4621      	mov	r1, r4
 8001af6:	f7ff ff63 	bl	80019c0 <__sflush_r>
 8001afa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001afc:	07da      	lsls	r2, r3, #31
 8001afe:	4605      	mov	r5, r0
 8001b00:	d4e4      	bmi.n	8001acc <_fflush_r+0xc>
 8001b02:	89a3      	ldrh	r3, [r4, #12]
 8001b04:	059b      	lsls	r3, r3, #22
 8001b06:	d4e1      	bmi.n	8001acc <_fflush_r+0xc>
 8001b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b0a:	f7ff fb91 	bl	8001230 <__retarget_lock_release_recursive>
 8001b0e:	e7dd      	b.n	8001acc <_fflush_r+0xc>

08001b10 <__swbuf_r>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	460e      	mov	r6, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	4605      	mov	r5, r0
 8001b18:	b118      	cbz	r0, 8001b22 <__swbuf_r+0x12>
 8001b1a:	6a03      	ldr	r3, [r0, #32]
 8001b1c:	b90b      	cbnz	r3, 8001b22 <__swbuf_r+0x12>
 8001b1e:	f7ff fa81 	bl	8001024 <__sinit>
 8001b22:	69a3      	ldr	r3, [r4, #24]
 8001b24:	60a3      	str	r3, [r4, #8]
 8001b26:	89a3      	ldrh	r3, [r4, #12]
 8001b28:	071a      	lsls	r2, r3, #28
 8001b2a:	d501      	bpl.n	8001b30 <__swbuf_r+0x20>
 8001b2c:	6923      	ldr	r3, [r4, #16]
 8001b2e:	b943      	cbnz	r3, 8001b42 <__swbuf_r+0x32>
 8001b30:	4621      	mov	r1, r4
 8001b32:	4628      	mov	r0, r5
 8001b34:	f000 f82a 	bl	8001b8c <__swsetup_r>
 8001b38:	b118      	cbz	r0, 8001b42 <__swbuf_r+0x32>
 8001b3a:	f04f 37ff 	mov.w	r7, #4294967295
 8001b3e:	4638      	mov	r0, r7
 8001b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	6922      	ldr	r2, [r4, #16]
 8001b46:	1a98      	subs	r0, r3, r2
 8001b48:	6963      	ldr	r3, [r4, #20]
 8001b4a:	b2f6      	uxtb	r6, r6
 8001b4c:	4283      	cmp	r3, r0
 8001b4e:	4637      	mov	r7, r6
 8001b50:	dc05      	bgt.n	8001b5e <__swbuf_r+0x4e>
 8001b52:	4621      	mov	r1, r4
 8001b54:	4628      	mov	r0, r5
 8001b56:	f7ff ffb3 	bl	8001ac0 <_fflush_r>
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	d1ed      	bne.n	8001b3a <__swbuf_r+0x2a>
 8001b5e:	68a3      	ldr	r3, [r4, #8]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	60a3      	str	r3, [r4, #8]
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	6022      	str	r2, [r4, #0]
 8001b6a:	701e      	strb	r6, [r3, #0]
 8001b6c:	6962      	ldr	r2, [r4, #20]
 8001b6e:	1c43      	adds	r3, r0, #1
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d004      	beq.n	8001b7e <__swbuf_r+0x6e>
 8001b74:	89a3      	ldrh	r3, [r4, #12]
 8001b76:	07db      	lsls	r3, r3, #31
 8001b78:	d5e1      	bpl.n	8001b3e <__swbuf_r+0x2e>
 8001b7a:	2e0a      	cmp	r6, #10
 8001b7c:	d1df      	bne.n	8001b3e <__swbuf_r+0x2e>
 8001b7e:	4621      	mov	r1, r4
 8001b80:	4628      	mov	r0, r5
 8001b82:	f7ff ff9d 	bl	8001ac0 <_fflush_r>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	d0d9      	beq.n	8001b3e <__swbuf_r+0x2e>
 8001b8a:	e7d6      	b.n	8001b3a <__swbuf_r+0x2a>

08001b8c <__swsetup_r>:
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4b29      	ldr	r3, [pc, #164]	@ (8001c34 <__swsetup_r+0xa8>)
 8001b90:	4605      	mov	r5, r0
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	460c      	mov	r4, r1
 8001b96:	b118      	cbz	r0, 8001ba0 <__swsetup_r+0x14>
 8001b98:	6a03      	ldr	r3, [r0, #32]
 8001b9a:	b90b      	cbnz	r3, 8001ba0 <__swsetup_r+0x14>
 8001b9c:	f7ff fa42 	bl	8001024 <__sinit>
 8001ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ba4:	0719      	lsls	r1, r3, #28
 8001ba6:	d422      	bmi.n	8001bee <__swsetup_r+0x62>
 8001ba8:	06da      	lsls	r2, r3, #27
 8001baa:	d407      	bmi.n	8001bbc <__swsetup_r+0x30>
 8001bac:	2209      	movs	r2, #9
 8001bae:	602a      	str	r2, [r5, #0]
 8001bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bb4:	81a3      	strh	r3, [r4, #12]
 8001bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bba:	e033      	b.n	8001c24 <__swsetup_r+0x98>
 8001bbc:	0758      	lsls	r0, r3, #29
 8001bbe:	d512      	bpl.n	8001be6 <__swsetup_r+0x5a>
 8001bc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001bc2:	b141      	cbz	r1, 8001bd6 <__swsetup_r+0x4a>
 8001bc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001bc8:	4299      	cmp	r1, r3
 8001bca:	d002      	beq.n	8001bd2 <__swsetup_r+0x46>
 8001bcc:	4628      	mov	r0, r5
 8001bce:	f7ff fb31 	bl	8001234 <_free_r>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8001bd6:	89a3      	ldrh	r3, [r4, #12]
 8001bd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001bdc:	81a3      	strh	r3, [r4, #12]
 8001bde:	2300      	movs	r3, #0
 8001be0:	6063      	str	r3, [r4, #4]
 8001be2:	6923      	ldr	r3, [r4, #16]
 8001be4:	6023      	str	r3, [r4, #0]
 8001be6:	89a3      	ldrh	r3, [r4, #12]
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	81a3      	strh	r3, [r4, #12]
 8001bee:	6923      	ldr	r3, [r4, #16]
 8001bf0:	b94b      	cbnz	r3, 8001c06 <__swsetup_r+0x7a>
 8001bf2:	89a3      	ldrh	r3, [r4, #12]
 8001bf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bfc:	d003      	beq.n	8001c06 <__swsetup_r+0x7a>
 8001bfe:	4621      	mov	r1, r4
 8001c00:	4628      	mov	r0, r5
 8001c02:	f000 f84f 	bl	8001ca4 <__smakebuf_r>
 8001c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c0a:	f013 0201 	ands.w	r2, r3, #1
 8001c0e:	d00a      	beq.n	8001c26 <__swsetup_r+0x9a>
 8001c10:	2200      	movs	r2, #0
 8001c12:	60a2      	str	r2, [r4, #8]
 8001c14:	6962      	ldr	r2, [r4, #20]
 8001c16:	4252      	negs	r2, r2
 8001c18:	61a2      	str	r2, [r4, #24]
 8001c1a:	6922      	ldr	r2, [r4, #16]
 8001c1c:	b942      	cbnz	r2, 8001c30 <__swsetup_r+0xa4>
 8001c1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001c22:	d1c5      	bne.n	8001bb0 <__swsetup_r+0x24>
 8001c24:	bd38      	pop	{r3, r4, r5, pc}
 8001c26:	0799      	lsls	r1, r3, #30
 8001c28:	bf58      	it	pl
 8001c2a:	6962      	ldrpl	r2, [r4, #20]
 8001c2c:	60a2      	str	r2, [r4, #8]
 8001c2e:	e7f4      	b.n	8001c1a <__swsetup_r+0x8e>
 8001c30:	2000      	movs	r0, #0
 8001c32:	e7f7      	b.n	8001c24 <__swsetup_r+0x98>
 8001c34:	20000010 	.word	0x20000010

08001c38 <_sbrk_r>:
 8001c38:	b538      	push	{r3, r4, r5, lr}
 8001c3a:	4d06      	ldr	r5, [pc, #24]	@ (8001c54 <_sbrk_r+0x1c>)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	4604      	mov	r4, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	602b      	str	r3, [r5, #0]
 8001c44:	f7fe fc38 	bl	80004b8 <_sbrk>
 8001c48:	1c43      	adds	r3, r0, #1
 8001c4a:	d102      	bne.n	8001c52 <_sbrk_r+0x1a>
 8001c4c:	682b      	ldr	r3, [r5, #0]
 8001c4e:	b103      	cbz	r3, 8001c52 <_sbrk_r+0x1a>
 8001c50:	6023      	str	r3, [r4, #0]
 8001c52:	bd38      	pop	{r3, r4, r5, pc}
 8001c54:	200005e8 	.word	0x200005e8

08001c58 <__swhatbuf_r>:
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	460c      	mov	r4, r1
 8001c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c60:	2900      	cmp	r1, #0
 8001c62:	b096      	sub	sp, #88	@ 0x58
 8001c64:	4615      	mov	r5, r2
 8001c66:	461e      	mov	r6, r3
 8001c68:	da0d      	bge.n	8001c86 <__swhatbuf_r+0x2e>
 8001c6a:	89a3      	ldrh	r3, [r4, #12]
 8001c6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c70:	f04f 0100 	mov.w	r1, #0
 8001c74:	bf14      	ite	ne
 8001c76:	2340      	movne	r3, #64	@ 0x40
 8001c78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	6031      	str	r1, [r6, #0]
 8001c80:	602b      	str	r3, [r5, #0]
 8001c82:	b016      	add	sp, #88	@ 0x58
 8001c84:	bd70      	pop	{r4, r5, r6, pc}
 8001c86:	466a      	mov	r2, sp
 8001c88:	f000 f848 	bl	8001d1c <_fstat_r>
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	dbec      	blt.n	8001c6a <__swhatbuf_r+0x12>
 8001c90:	9901      	ldr	r1, [sp, #4]
 8001c92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c9a:	4259      	negs	r1, r3
 8001c9c:	4159      	adcs	r1, r3
 8001c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ca2:	e7eb      	b.n	8001c7c <__swhatbuf_r+0x24>

08001ca4 <__smakebuf_r>:
 8001ca4:	898b      	ldrh	r3, [r1, #12]
 8001ca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ca8:	079d      	lsls	r5, r3, #30
 8001caa:	4606      	mov	r6, r0
 8001cac:	460c      	mov	r4, r1
 8001cae:	d507      	bpl.n	8001cc0 <__smakebuf_r+0x1c>
 8001cb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001cb4:	6023      	str	r3, [r4, #0]
 8001cb6:	6123      	str	r3, [r4, #16]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	6163      	str	r3, [r4, #20]
 8001cbc:	b003      	add	sp, #12
 8001cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc0:	ab01      	add	r3, sp, #4
 8001cc2:	466a      	mov	r2, sp
 8001cc4:	f7ff ffc8 	bl	8001c58 <__swhatbuf_r>
 8001cc8:	9f00      	ldr	r7, [sp, #0]
 8001cca:	4605      	mov	r5, r0
 8001ccc:	4639      	mov	r1, r7
 8001cce:	4630      	mov	r0, r6
 8001cd0:	f7ff fb1c 	bl	800130c <_malloc_r>
 8001cd4:	b948      	cbnz	r0, 8001cea <__smakebuf_r+0x46>
 8001cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cda:	059a      	lsls	r2, r3, #22
 8001cdc:	d4ee      	bmi.n	8001cbc <__smakebuf_r+0x18>
 8001cde:	f023 0303 	bic.w	r3, r3, #3
 8001ce2:	f043 0302 	orr.w	r3, r3, #2
 8001ce6:	81a3      	strh	r3, [r4, #12]
 8001ce8:	e7e2      	b.n	8001cb0 <__smakebuf_r+0xc>
 8001cea:	89a3      	ldrh	r3, [r4, #12]
 8001cec:	6020      	str	r0, [r4, #0]
 8001cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cf2:	81a3      	strh	r3, [r4, #12]
 8001cf4:	9b01      	ldr	r3, [sp, #4]
 8001cf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001cfa:	b15b      	cbz	r3, 8001d14 <__smakebuf_r+0x70>
 8001cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d00:	4630      	mov	r0, r6
 8001d02:	f000 f81d 	bl	8001d40 <_isatty_r>
 8001d06:	b128      	cbz	r0, 8001d14 <__smakebuf_r+0x70>
 8001d08:	89a3      	ldrh	r3, [r4, #12]
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	81a3      	strh	r3, [r4, #12]
 8001d14:	89a3      	ldrh	r3, [r4, #12]
 8001d16:	431d      	orrs	r5, r3
 8001d18:	81a5      	strh	r5, [r4, #12]
 8001d1a:	e7cf      	b.n	8001cbc <__smakebuf_r+0x18>

08001d1c <_fstat_r>:
 8001d1c:	b538      	push	{r3, r4, r5, lr}
 8001d1e:	4d07      	ldr	r5, [pc, #28]	@ (8001d3c <_fstat_r+0x20>)
 8001d20:	2300      	movs	r3, #0
 8001d22:	4604      	mov	r4, r0
 8001d24:	4608      	mov	r0, r1
 8001d26:	4611      	mov	r1, r2
 8001d28:	602b      	str	r3, [r5, #0]
 8001d2a:	f7fe fb9f 	bl	800046c <_fstat>
 8001d2e:	1c43      	adds	r3, r0, #1
 8001d30:	d102      	bne.n	8001d38 <_fstat_r+0x1c>
 8001d32:	682b      	ldr	r3, [r5, #0]
 8001d34:	b103      	cbz	r3, 8001d38 <_fstat_r+0x1c>
 8001d36:	6023      	str	r3, [r4, #0]
 8001d38:	bd38      	pop	{r3, r4, r5, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200005e8 	.word	0x200005e8

08001d40 <_isatty_r>:
 8001d40:	b538      	push	{r3, r4, r5, lr}
 8001d42:	4d06      	ldr	r5, [pc, #24]	@ (8001d5c <_isatty_r+0x1c>)
 8001d44:	2300      	movs	r3, #0
 8001d46:	4604      	mov	r4, r0
 8001d48:	4608      	mov	r0, r1
 8001d4a:	602b      	str	r3, [r5, #0]
 8001d4c:	f7fe fb9d 	bl	800048a <_isatty>
 8001d50:	1c43      	adds	r3, r0, #1
 8001d52:	d102      	bne.n	8001d5a <_isatty_r+0x1a>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	b103      	cbz	r3, 8001d5a <_isatty_r+0x1a>
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
 8001d5c:	200005e8 	.word	0x200005e8

08001d60 <_init>:
 8001d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d62:	bf00      	nop
 8001d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d66:	bc08      	pop	{r3}
 8001d68:	469e      	mov	lr, r3
 8001d6a:	4770      	bx	lr

08001d6c <_fini>:
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6e:	bf00      	nop
 8001d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d72:	bc08      	pop	{r3}
 8001d74:	469e      	mov	lr, r3
 8001d76:	4770      	bx	lr
