
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c68  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000df0  08000df0  00002048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000df0  08000df0  00002048  2**0
                  CONTENTS
  4 .ARM          00000008  08000df0  08000df0  00001df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000df8  08000df8  00002048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000df8  08000df8  00001df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000dfc  08000dfc  00001dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08000e00  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002048  2**0
                  CONTENTS
 10 .bss          00000064  20000048  20000048  00002048  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  00002048  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015b7  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000581  00000000  00000000  00003629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00003bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013a  00000000  00000000  00003d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ade  00000000  00000000  00003e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d0d  00000000  00000000  00006968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000af18  00000000  00000000  00008675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001358d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000618  00000000  00000000  000135d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00013be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000dd8 	.word	0x08000dd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	08000dd8 	.word	0x08000dd8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <delay>:
SPI_Handle_t 	SPI_2;
GPIO_Handle_t Button;
GPIO_Handle_t LED;

void delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i< 250000; i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	0003d08f 	.word	0x0003d08f

08000204 <LED_Config>:

char user_data[] = "This is the data sent to the master everytime there is a button pressed";

void LED_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	memset(&LED,0,sizeof(LED));
 8000208:	220c      	movs	r2, #12
 800020a:	2100      	movs	r1, #0
 800020c:	480e      	ldr	r0, [pc, #56]	@ (8000248 <LED_Config+0x44>)
 800020e:	f000 fdb7 	bl	8000d80 <memset>
	LED.pGPIOx = GPIOD;
 8000212:	4b0d      	ldr	r3, [pc, #52]	@ (8000248 <LED_Config+0x44>)
 8000214:	4a0d      	ldr	r2, [pc, #52]	@ (800024c <LED_Config+0x48>)
 8000216:	601a      	str	r2, [r3, #0]
	LED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000218:	4b0b      	ldr	r3, [pc, #44]	@ (8000248 <LED_Config+0x44>)
 800021a:	220c      	movs	r2, #12
 800021c:	711a      	strb	r2, [r3, #4]
	LED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800021e:	4b0a      	ldr	r3, [pc, #40]	@ (8000248 <LED_Config+0x44>)
 8000220:	2201      	movs	r2, #1
 8000222:	715a      	strb	r2, [r3, #5]
	LED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 8000224:	4b08      	ldr	r3, [pc, #32]	@ (8000248 <LED_Config+0x44>)
 8000226:	2200      	movs	r2, #0
 8000228:	721a      	strb	r2, [r3, #8]
	LED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OUT_SPEED_LOW;
 800022a:	4b07      	ldr	r3, [pc, #28]	@ (8000248 <LED_Config+0x44>)
 800022c:	2200      	movs	r2, #0
 800022e:	719a      	strb	r2, [r3, #6]

	GPIO_ClockControl(LED.pGPIOx, ENABLE);
 8000230:	4b05      	ldr	r3, [pc, #20]	@ (8000248 <LED_Config+0x44>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2101      	movs	r1, #1
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f900 	bl	800043c <GPIO_ClockControl>
	GPIO_Init(&LED);
 800023c:	4802      	ldr	r0, [pc, #8]	@ (8000248 <LED_Config+0x44>)
 800023e:	f000 f9e5 	bl	800060c <GPIO_Init>
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	200000a0 	.word	0x200000a0
 800024c:	40020c00 	.word	0x40020c00

08000250 <Button_Config>:

void Button_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	memset(&Button,0,sizeof(Button));
 8000254:	220c      	movs	r2, #12
 8000256:	2100      	movs	r1, #0
 8000258:	480b      	ldr	r0, [pc, #44]	@ (8000288 <Button_Config+0x38>)
 800025a:	f000 fd91 	bl	8000d80 <memset>
	Button.pGPIOx = GPIOA;
 800025e:	4b0a      	ldr	r3, [pc, #40]	@ (8000288 <Button_Config+0x38>)
 8000260:	4a0a      	ldr	r2, [pc, #40]	@ (800028c <Button_Config+0x3c>)
 8000262:	601a      	str	r2, [r3, #0]
	Button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000264:	4b08      	ldr	r3, [pc, #32]	@ (8000288 <Button_Config+0x38>)
 8000266:	2200      	movs	r2, #0
 8000268:	711a      	strb	r2, [r3, #4]
	Button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800026a:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <Button_Config+0x38>)
 800026c:	2204      	movs	r2, #4
 800026e:	715a      	strb	r2, [r3, #5]
	Button.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OUT_SPEED_HIGH;
 8000270:	4b05      	ldr	r3, [pc, #20]	@ (8000288 <Button_Config+0x38>)
 8000272:	2202      	movs	r2, #2
 8000274:	719a      	strb	r2, [r3, #6]
	Button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NONE;
 8000276:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <Button_Config+0x38>)
 8000278:	2200      	movs	r2, #0
 800027a:	71da      	strb	r2, [r3, #7]

	GPIO_Init(&Button);
 800027c:	4802      	ldr	r0, [pc, #8]	@ (8000288 <Button_Config+0x38>)
 800027e:	f000 f9c5 	bl	800060c <GPIO_Init>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000094 	.word	0x20000094
 800028c:	40020000 	.word	0x40020000

08000290 <SPI2_GPIOInits>:

void SPI2_GPIOInits(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	SPIPins.pGPIOx = GPIOB;
 8000294:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 8000296:	4a13      	ldr	r2, [pc, #76]	@ (80002e4 <SPI2_GPIOInits+0x54>)
 8000298:	601a      	str	r2, [r3, #0]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800029a:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 800029c:	2202      	movs	r2, #2
 800029e:	715a      	strb	r2, [r3, #5]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALTFN_AF5;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 80002a2:	2205      	movs	r2, #5
 80002a4:	725a      	strb	r2, [r3, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	721a      	strb	r2, [r3, #8]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 80002ae:	220c      	movs	r2, #12
 80002b0:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 80002b2:	480b      	ldr	r0, [pc, #44]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 80002b4:	f000 f9aa 	bl	800060c <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80002b8:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 80002ba:	220d      	movs	r2, #13
 80002bc:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 80002be:	4808      	ldr	r0, [pc, #32]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 80002c0:	f000 f9a4 	bl	800060c <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 80002c6:	220e      	movs	r2, #14
 80002c8:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 80002ca:	4805      	ldr	r0, [pc, #20]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 80002cc:	f000 f99e 	bl	800060c <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 80002d0:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 80002d2:	220f      	movs	r2, #15
 80002d4:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 80002d6:	4802      	ldr	r0, [pc, #8]	@ (80002e0 <SPI2_GPIOInits+0x50>)
 80002d8:	f000 f998 	bl	800060c <GPIO_Init>
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000064 	.word	0x20000064
 80002e4:	40020400 	.word	0x40020400

080002e8 <SPI2_Inits>:

void SPI2_Inits(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	SPI_2.pSPIx = SPI2;
 80002ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <SPI2_Inits+0x40>)
 80002ee:	4a0f      	ldr	r2, [pc, #60]	@ (800032c <SPI2_Inits+0x44>)
 80002f0:	601a      	str	r2, [r3, #0]
	SPI_2.SPIConfig.BusConfig = SPI_BUSCONFIG_FULLDUPLEX;
 80002f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <SPI2_Inits+0x40>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	715a      	strb	r2, [r3, #5]
	SPI_2.SPIConfig.DeviceMode = SPI_DEVICEMODE_MASTER;
 80002f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <SPI2_Inits+0x40>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	711a      	strb	r2, [r3, #4]
	SPI_2.SPIConfig.CPHA = SPI_CPHA_TRAILING_EDGE;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <SPI2_Inits+0x40>)
 8000300:	2200      	movs	r2, #0
 8000302:	725a      	strb	r2, [r3, #9]
	SPI_2.SPIConfig.CPOL = SPI_CPOL_LOW_IDLE_STATE;
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <SPI2_Inits+0x40>)
 8000306:	2200      	movs	r2, #0
 8000308:	721a      	strb	r2, [r3, #8]
	SPI_2.SPIConfig.DFF = SPI_DFF_8BIT;
 800030a:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <SPI2_Inits+0x40>)
 800030c:	2200      	movs	r2, #0
 800030e:	71da      	strb	r2, [r3, #7]
	SPI_2.SPIConfig.SclkSpeed = SPI_SCLKSPEED_FPCLK_8;
 8000310:	4b05      	ldr	r3, [pc, #20]	@ (8000328 <SPI2_Inits+0x40>)
 8000312:	2202      	movs	r2, #2
 8000314:	719a      	strb	r2, [r3, #6]
	SPI_2.SPIConfig.SSM = SPI_SSM_DI;
 8000316:	4b04      	ldr	r3, [pc, #16]	@ (8000328 <SPI2_Inits+0x40>)
 8000318:	2200      	movs	r2, #0
 800031a:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI_2);
 800031c:	4802      	ldr	r0, [pc, #8]	@ (8000328 <SPI2_Inits+0x40>)
 800031e:	f000 fca9 	bl	8000c74 <SPI_Init>

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000070 	.word	0x20000070
 800032c:	40003800 	.word	0x40003800

08000330 <main>:

int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	LED_Config();
 8000334:	f7ff ff66 	bl	8000204 <LED_Config>

	Button_Config();
 8000338:	f7ff ff8a 	bl	8000250 <Button_Config>

	SPI2_GPIOInits();
 800033c:	f7ff ffa8 	bl	8000290 <SPI2_GPIOInits>

	SPI2_Inits();
 8000340:	f7ff ffd2 	bl	80002e8 <SPI2_Inits>

	SPI_SSOEConfig(SPI2, ENABLE);
 8000344:	2101      	movs	r1, #1
 8000346:	4809      	ldr	r0, [pc, #36]	@ (800036c <main+0x3c>)
 8000348:	f000 fc00 	bl	8000b4c <SPI_SSOEConfig>

	GPIO_WritePin(GPIOD, GPIO_PIN_12, ENABLE);
 800034c:	2201      	movs	r2, #1
 800034e:	210c      	movs	r1, #12
 8000350:	4807      	ldr	r0, [pc, #28]	@ (8000370 <main+0x40>)
 8000352:	f000 faf1 	bl	8000938 <GPIO_WritePin>
	GPIO_IRQPriorityConfig(IRQ_EXTI0, 1);
 8000356:	2101      	movs	r1, #1
 8000358:	2006      	movs	r0, #6
 800035a:	f000 fb25 	bl	80009a8 <GPIO_IRQPriorityConfig>
	GPIO_IRQITConfig(IRQ_EXTI0, ENABLE);
 800035e:	2101      	movs	r1, #1
 8000360:	2006      	movs	r0, #6
 8000362:	f000 fb4f 	bl	8000a04 <GPIO_IRQITConfig>

	while(1);
 8000366:	bf00      	nop
 8000368:	e7fd      	b.n	8000366 <main+0x36>
 800036a:	bf00      	nop
 800036c:	40003800 	.word	0x40003800
 8000370:	40020c00 	.word	0x40020c00

08000374 <EXTI0_IRQHandler>:

	return 0;
}

void EXTI0_IRQHandler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
	delay();
 800037a:	f7ff ff2d 	bl	80001d8 <delay>
	GPIO_IRQHandling(GPIO_PIN_0);
 800037e:	2000      	movs	r0, #0
 8000380:	f000 fbc4 	bl	8000b0c <GPIO_IRQHandling>
	GPIO_TogglePinOutput(GPIOD, GPIO_PIN_12);
 8000384:	210c      	movs	r1, #12
 8000386:	4815      	ldr	r0, [pc, #84]	@ (80003dc <EXTI0_IRQHandler+0x68>)
 8000388:	f000 fafa 	bl	8000980 <GPIO_TogglePinOutput>
	SPI_PeripheralControl(SPI2, ENABLE);
 800038c:	2101      	movs	r1, #1
 800038e:	4814      	ldr	r0, [pc, #80]	@ (80003e0 <EXTI0_IRQHandler+0x6c>)
 8000390:	f000 fbfa 	bl	8000b88 <SPI_PeripheralControl>

	// sending len info
	uint8_t stringlen = strlen(user_data);
 8000394:	4813      	ldr	r0, [pc, #76]	@ (80003e4 <EXTI0_IRQHandler+0x70>)
 8000396:	f7ff ff17 	bl	80001c8 <strlen>
 800039a:	4603      	mov	r3, r0
 800039c:	b2db      	uxtb	r3, r3
 800039e:	71fb      	strb	r3, [r7, #7]
	SPI_SendData(SPI2, &stringlen, 1);
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	2201      	movs	r2, #1
 80003a4:	4619      	mov	r1, r3
 80003a6:	480e      	ldr	r0, [pc, #56]	@ (80003e0 <EXTI0_IRQHandler+0x6c>)
 80003a8:	f000 fcb6 	bl	8000d18 <SPI_SendData>

	// sending datta
	SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80003ac:	480d      	ldr	r0, [pc, #52]	@ (80003e4 <EXTI0_IRQHandler+0x70>)
 80003ae:	f7ff ff0b 	bl	80001c8 <strlen>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	490b      	ldr	r1, [pc, #44]	@ (80003e4 <EXTI0_IRQHandler+0x70>)
 80003b8:	4809      	ldr	r0, [pc, #36]	@ (80003e0 <EXTI0_IRQHandler+0x6c>)
 80003ba:	f000 fcad 	bl	8000d18 <SPI_SendData>
	if((SPI2->SR & (1 << SPI_SR_BSY)) == 0)
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <EXTI0_IRQHandler+0x6c>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d103      	bne.n	80003d2 <EXTI0_IRQHandler+0x5e>
		SPI_PeripheralControl(SPI2, DISABLE);
 80003ca:	2100      	movs	r1, #0
 80003cc:	4804      	ldr	r0, [pc, #16]	@ (80003e0 <EXTI0_IRQHandler+0x6c>)
 80003ce:	f000 fbdb 	bl	8000b88 <SPI_PeripheralControl>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40020c00 	.word	0x40020c00
 80003e0:	40003800 	.word	0x40003800
 80003e4:	20000000 	.word	0x20000000

080003e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e8:	480d      	ldr	r0, [pc, #52]	@ (8000420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f0:	480c      	ldr	r0, [pc, #48]	@ (8000424 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f2:	490d      	ldr	r1, [pc, #52]	@ (8000428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f4:	4a0d      	ldr	r2, [pc, #52]	@ (800042c <LoopForever+0xe>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f8:	e002      	b.n	8000400 <LoopCopyDataInit>

080003fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fe:	3304      	adds	r3, #4

08000400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000404:	d3f9      	bcc.n	80003fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000406:	4a0a      	ldr	r2, [pc, #40]	@ (8000430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000408:	4c0a      	ldr	r4, [pc, #40]	@ (8000434 <LoopForever+0x16>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800040c:	e001      	b.n	8000412 <LoopFillZerobss>

0800040e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000410:	3204      	adds	r2, #4

08000412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000414:	d3fb      	bcc.n	800040e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000416:	f000 fcbb 	bl	8000d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041a:	f7ff ff89 	bl	8000330 <main>

0800041e <LoopForever>:

LoopForever:
  b LoopForever
 800041e:	e7fe      	b.n	800041e <LoopForever>
  ldr   r0, =_estack
 8000420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000428:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800042c:	08000e00 	.word	0x08000e00
  ldr r2, =_sbss
 8000430:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000434:	200000ac 	.word	0x200000ac

08000438 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000438:	e7fe      	b.n	8000438 <ADC_IRQHandler>
	...

0800043c <GPIO_ClockControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d162      	bne.n	8000514 <GPIO_ClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a64      	ldr	r2, [pc, #400]	@ (80005e4 <GPIO_ClockControl+0x1a8>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_ClockControl+0x28>
		{
			GPIOA_CLK_EN();
 8000456:	4b64      	ldr	r3, [pc, #400]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045a:	4a63      	ldr	r2, [pc, #396]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_CLK_DI();
		}
	}
}
 8000462:	e0b9      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a61      	ldr	r2, [pc, #388]	@ (80005ec <GPIO_ClockControl+0x1b0>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <GPIO_ClockControl+0x3e>
			GPIOB_CLK_EN();
 800046c:	4b5e      	ldr	r3, [pc, #376]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000470:	4a5d      	ldr	r2, [pc, #372]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000472:	f043 0302 	orr.w	r3, r3, #2
 8000476:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000478:	e0ae      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a5c      	ldr	r2, [pc, #368]	@ (80005f0 <GPIO_ClockControl+0x1b4>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_ClockControl+0x54>
			GPIOC_CLK_EN();
 8000482:	4b59      	ldr	r3, [pc, #356]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	4a58      	ldr	r2, [pc, #352]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000488:	f043 0304 	orr.w	r3, r3, #4
 800048c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800048e:	e0a3      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a58      	ldr	r2, [pc, #352]	@ (80005f4 <GPIO_ClockControl+0x1b8>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_ClockControl+0x6a>
			GPIOD_CLK_EN();
 8000498:	4b53      	ldr	r3, [pc, #332]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	4a52      	ldr	r2, [pc, #328]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a4:	e098      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a53      	ldr	r2, [pc, #332]	@ (80005f8 <GPIO_ClockControl+0x1bc>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_ClockControl+0x80>
			GPIOE_CLK_EN();
 80004ae:	4b4e      	ldr	r3, [pc, #312]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b2:	4a4d      	ldr	r2, [pc, #308]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80004b4:	f043 0310 	orr.w	r3, r3, #16
 80004b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ba:	e08d      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a4f      	ldr	r2, [pc, #316]	@ (80005fc <GPIO_ClockControl+0x1c0>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_ClockControl+0x96>
			GPIOF_CLK_EN();
 80004c4:	4b48      	ldr	r3, [pc, #288]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c8:	4a47      	ldr	r2, [pc, #284]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d0:	e082      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a4a      	ldr	r2, [pc, #296]	@ (8000600 <GPIO_ClockControl+0x1c4>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <GPIO_ClockControl+0xac>
			GPIOG_CLK_EN();
 80004da:	4b43      	ldr	r3, [pc, #268]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004de:	4a42      	ldr	r2, [pc, #264]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80004e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e6:	e077      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a46      	ldr	r2, [pc, #280]	@ (8000604 <GPIO_ClockControl+0x1c8>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d106      	bne.n	80004fe <GPIO_ClockControl+0xc2>
			GPIOH_CLK_EN();
 80004f0:	4b3d      	ldr	r3, [pc, #244]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f4:	4a3c      	ldr	r2, [pc, #240]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80004f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004fc:	e06c      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a41      	ldr	r2, [pc, #260]	@ (8000608 <GPIO_ClockControl+0x1cc>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d168      	bne.n	80005d8 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_EN();
 8000506:	4b38      	ldr	r3, [pc, #224]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	4a37      	ldr	r2, [pc, #220]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 800050c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000510:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000512:	e061      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a33      	ldr	r2, [pc, #204]	@ (80005e4 <GPIO_ClockControl+0x1a8>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d106      	bne.n	800052a <GPIO_ClockControl+0xee>
			GPIOA_CLK_DI();
 800051c:	4b32      	ldr	r3, [pc, #200]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000520:	4a31      	ldr	r2, [pc, #196]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000522:	f023 0301 	bic.w	r3, r3, #1
 8000526:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000528:	e056      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a2f      	ldr	r2, [pc, #188]	@ (80005ec <GPIO_ClockControl+0x1b0>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d106      	bne.n	8000540 <GPIO_ClockControl+0x104>
			GPIOB_CLK_DI();
 8000532:	4b2d      	ldr	r3, [pc, #180]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a2c      	ldr	r2, [pc, #176]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000538:	f023 0302 	bic.w	r3, r3, #2
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800053e:	e04b      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a2b      	ldr	r2, [pc, #172]	@ (80005f0 <GPIO_ClockControl+0x1b4>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d106      	bne.n	8000556 <GPIO_ClockControl+0x11a>
			GPIOC_CLK_DI();
 8000548:	4b27      	ldr	r3, [pc, #156]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054c:	4a26      	ldr	r2, [pc, #152]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 800054e:	f023 0304 	bic.w	r3, r3, #4
 8000552:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000554:	e040      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a26      	ldr	r2, [pc, #152]	@ (80005f4 <GPIO_ClockControl+0x1b8>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d106      	bne.n	800056c <GPIO_ClockControl+0x130>
			GPIOD_CLK_DI();
 800055e:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a21      	ldr	r2, [pc, #132]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000564:	f023 0308 	bic.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800056a:	e035      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <GPIO_ClockControl+0x1bc>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d106      	bne.n	8000582 <GPIO_ClockControl+0x146>
			GPIOE_CLK_DI();
 8000574:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000578:	4a1b      	ldr	r2, [pc, #108]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 800057a:	f023 0310 	bic.w	r3, r3, #16
 800057e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000580:	e02a      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a1d      	ldr	r2, [pc, #116]	@ (80005fc <GPIO_ClockControl+0x1c0>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d106      	bne.n	8000598 <GPIO_ClockControl+0x15c>
			GPIOF_CLK_DI();
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 8000590:	f023 0320 	bic.w	r3, r3, #32
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000596:	e01f      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a19      	ldr	r2, [pc, #100]	@ (8000600 <GPIO_ClockControl+0x1c4>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d106      	bne.n	80005ae <GPIO_ClockControl+0x172>
			GPIOG_CLK_DI();
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a4:	4a10      	ldr	r2, [pc, #64]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80005a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005ac:	e014      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <GPIO_ClockControl+0x1c8>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d106      	bne.n	80005c4 <GPIO_ClockControl+0x188>
			GPIOH_CLK_DI();
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a0b      	ldr	r2, [pc, #44]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80005bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005c2:	e009      	b.n	80005d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a10      	ldr	r2, [pc, #64]	@ (8000608 <GPIO_ClockControl+0x1cc>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d105      	bne.n	80005d8 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_DI();
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d0:	4a05      	ldr	r2, [pc, #20]	@ (80005e8 <GPIO_ClockControl+0x1ac>)
 80005d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80005d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020400 	.word	0x40020400
 80005f0:	40020800 	.word	0x40020800
 80005f4:	40020c00 	.word	0x40020c00
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40021400 	.word	0x40021400
 8000600:	40021800 	.word	0x40021800
 8000604:	40021c00 	.word	0x40021c00
 8000608:	40022000 	.word	0x40022000

0800060c <GPIO_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	GPIO_ClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2101      	movs	r1, #1
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff0e 	bl	800043c <GPIO_ClockControl>

	uint32_t temp = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	795b      	ldrb	r3, [r3, #5]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d820      	bhi.n	800066e <GPIO_Init+0x62>
	{
		// Non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	795b      	ldrb	r3, [r3, #5]
 8000630:	461a      	mov	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	2103      	movs	r1, #3
 800064c:	fa01 f303 	lsl.w	r3, r1, r3
 8000650:	43db      	mvns	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	400a      	ands	r2, r1
 800065a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6819      	ldr	r1, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	430a      	orrs	r2, r1
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	e0c3      	b.n	80007f6 <GPIO_Init+0x1ea>
	}
	else
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	2103      	movs	r1, #3
 800067c:	fa01 f303 	lsl.w	r3, r1, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	4619      	mov	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	400a      	ands	r2, r1
 800068a:	601a      	str	r2, [r3, #0]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	795b      	ldrb	r3, [r3, #5]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d117      	bne.n	80006c4 <GPIO_Init+0xb8>
		{
			// 1. Configure the FTSR
			// first we clear the corresponding RTSR bit so that we only have FTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000694:	4b96      	ldr	r3, [pc, #600]	@ (80008f0 <GPIO_Init+0x2e4>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7912      	ldrb	r2, [r2, #4]
 800069c:	4611      	mov	r1, r2
 800069e:	2201      	movs	r2, #1
 80006a0:	408a      	lsls	r2, r1
 80006a2:	43d2      	mvns	r2, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a92      	ldr	r2, [pc, #584]	@ (80008f0 <GPIO_Init+0x2e4>)
 80006a8:	400b      	ands	r3, r1
 80006aa:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ac:	4b90      	ldr	r3, [pc, #576]	@ (80008f0 <GPIO_Init+0x2e4>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	7912      	ldrb	r2, [r2, #4]
 80006b4:	4611      	mov	r1, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	408a      	lsls	r2, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a8c      	ldr	r2, [pc, #560]	@ (80008f0 <GPIO_Init+0x2e4>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	60d3      	str	r3, [r2, #12]
 80006c2:	e035      	b.n	8000730 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	2b05      	cmp	r3, #5
 80006ca:	d117      	bne.n	80006fc <GPIO_Init+0xf0>
		{
			// 1. Configure the RTSR
			// first we clear the corresponding FTSR bit so that we only have RTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006cc:	4b88      	ldr	r3, [pc, #544]	@ (80008f0 <GPIO_Init+0x2e4>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	7912      	ldrb	r2, [r2, #4]
 80006d4:	4611      	mov	r1, r2
 80006d6:	2201      	movs	r2, #1
 80006d8:	408a      	lsls	r2, r1
 80006da:	43d2      	mvns	r2, r2
 80006dc:	4611      	mov	r1, r2
 80006de:	4a84      	ldr	r2, [pc, #528]	@ (80008f0 <GPIO_Init+0x2e4>)
 80006e0:	400b      	ands	r3, r1
 80006e2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e4:	4b82      	ldr	r3, [pc, #520]	@ (80008f0 <GPIO_Init+0x2e4>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	7912      	ldrb	r2, [r2, #4]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a7e      	ldr	r2, [pc, #504]	@ (80008f0 <GPIO_Init+0x2e4>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	6093      	str	r3, [r2, #8]
 80006fa:	e019      	b.n	8000730 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	795b      	ldrb	r3, [r3, #5]
 8000700:	2b06      	cmp	r3, #6
 8000702:	d115      	bne.n	8000730 <GPIO_Init+0x124>
		{
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000704:	4b7a      	ldr	r3, [pc, #488]	@ (80008f0 <GPIO_Init+0x2e4>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	7912      	ldrb	r2, [r2, #4]
 800070c:	4611      	mov	r1, r2
 800070e:	2201      	movs	r2, #1
 8000710:	408a      	lsls	r2, r1
 8000712:	4611      	mov	r1, r2
 8000714:	4a76      	ldr	r2, [pc, #472]	@ (80008f0 <GPIO_Init+0x2e4>)
 8000716:	430b      	orrs	r3, r1
 8000718:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071a:	4b75      	ldr	r3, [pc, #468]	@ (80008f0 <GPIO_Init+0x2e4>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	7912      	ldrb	r2, [r2, #4]
 8000722:	4611      	mov	r1, r2
 8000724:	2201      	movs	r2, #1
 8000726:	408a      	lsls	r2, r1
 8000728:	4611      	mov	r1, r2
 800072a:	4a71      	ldr	r2, [pc, #452]	@ (80008f0 <GPIO_Init+0x2e4>)
 800072c:	430b      	orrs	r3, r1
 800072e:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		// Calculate the register number EXTICR1/EXTICR2/EXTICR3/EXTICR4
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	089b      	lsrs	r3, r3, #2
 8000736:	b2db      	uxtb	r3, r3
 8000738:	617b      	str	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a6d      	ldr	r2, [pc, #436]	@ (80008f4 <GPIO_Init+0x2e8>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d039      	beq.n	80007b8 <GPIO_Init+0x1ac>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a6b      	ldr	r2, [pc, #428]	@ (80008f8 <GPIO_Init+0x2ec>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d032      	beq.n	80007b4 <GPIO_Init+0x1a8>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a6a      	ldr	r2, [pc, #424]	@ (80008fc <GPIO_Init+0x2f0>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d02b      	beq.n	80007b0 <GPIO_Init+0x1a4>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a68      	ldr	r2, [pc, #416]	@ (8000900 <GPIO_Init+0x2f4>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d024      	beq.n	80007ac <GPIO_Init+0x1a0>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a67      	ldr	r2, [pc, #412]	@ (8000904 <GPIO_Init+0x2f8>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d01d      	beq.n	80007a8 <GPIO_Init+0x19c>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a65      	ldr	r2, [pc, #404]	@ (8000908 <GPIO_Init+0x2fc>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d016      	beq.n	80007a4 <GPIO_Init+0x198>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a64      	ldr	r2, [pc, #400]	@ (800090c <GPIO_Init+0x300>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d00f      	beq.n	80007a0 <GPIO_Init+0x194>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a62      	ldr	r2, [pc, #392]	@ (8000910 <GPIO_Init+0x304>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d008      	beq.n	800079c <GPIO_Init+0x190>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a61      	ldr	r2, [pc, #388]	@ (8000914 <GPIO_Init+0x308>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d101      	bne.n	8000798 <GPIO_Init+0x18c>
 8000794:	2308      	movs	r3, #8
 8000796:	e010      	b.n	80007ba <GPIO_Init+0x1ae>
 8000798:	2300      	movs	r3, #0
 800079a:	e00e      	b.n	80007ba <GPIO_Init+0x1ae>
 800079c:	2307      	movs	r3, #7
 800079e:	e00c      	b.n	80007ba <GPIO_Init+0x1ae>
 80007a0:	2306      	movs	r3, #6
 80007a2:	e00a      	b.n	80007ba <GPIO_Init+0x1ae>
 80007a4:	2305      	movs	r3, #5
 80007a6:	e008      	b.n	80007ba <GPIO_Init+0x1ae>
 80007a8:	2304      	movs	r3, #4
 80007aa:	e006      	b.n	80007ba <GPIO_Init+0x1ae>
 80007ac:	2303      	movs	r3, #3
 80007ae:	e004      	b.n	80007ba <GPIO_Init+0x1ae>
 80007b0:	2302      	movs	r3, #2
 80007b2:	e002      	b.n	80007ba <GPIO_Init+0x1ae>
 80007b4:	2301      	movs	r3, #1
 80007b6:	e000      	b.n	80007ba <GPIO_Init+0x1ae>
 80007b8:	2300      	movs	r3, #0
 80007ba:	74fb      	strb	r3, [r7, #19]
		SYSCFG_CLK_EN();
 80007bc:	4b56      	ldr	r3, [pc, #344]	@ (8000918 <GPIO_Init+0x30c>)
 80007be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c0:	4a55      	ldr	r2, [pc, #340]	@ (8000918 <GPIO_Init+0x30c>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp] |= (portcode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4));
 80007c8:	4a54      	ldr	r2, [pc, #336]	@ (800091c <GPIO_Init+0x310>)
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3302      	adds	r3, #2
 80007ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d2:	7cfb      	ldrb	r3, [r7, #19]
 80007d4:	4951      	ldr	r1, [pc, #324]	@ (800091c <GPIO_Init+0x310>)
 80007d6:	431a      	orrs	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3302      	adds	r3, #2
 80007dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80007e0:	4b43      	ldr	r3, [pc, #268]	@ (80008f0 <GPIO_Init+0x2e4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	7912      	ldrb	r2, [r2, #4]
 80007e8:	4611      	mov	r1, r2
 80007ea:	2201      	movs	r2, #1
 80007ec:	408a      	lsls	r2, r1
 80007ee:	4611      	mov	r1, r2
 80007f0:	4a3f      	ldr	r2, [pc, #252]	@ (80008f0 <GPIO_Init+0x2e4>)
 80007f2:	430b      	orrs	r3, r1
 80007f4:	6013      	str	r3, [r2, #0]

	}

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	799b      	ldrb	r3, [r3, #6]
 80007fa:	461a      	mov	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	689a      	ldr	r2, [r3, #8]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	791b      	ldrb	r3, [r3, #4]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	2103      	movs	r1, #3
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	4619      	mov	r1, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	400a      	ands	r2, r1
 8000824:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6899      	ldr	r1, [r3, #8]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	430a      	orrs	r2, r1
 8000834:	609a      	str	r2, [r3, #8]

	// 3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	79db      	ldrb	r3, [r3, #7]
 800083a:	461a      	mov	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	68da      	ldr	r2, [r3, #12]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	2103      	movs	r1, #3
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	400a      	ands	r2, r1
 8000864:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68d9      	ldr	r1, [r3, #12]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	430a      	orrs	r2, r1
 8000874:	60da      	str	r2, [r3, #12]

	// 4. Conigure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7a1b      	ldrb	r3, [r3, #8]
 800087a:	461a      	mov	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	2101      	movs	r1, #1
 8000894:	fa01 f303 	lsl.w	r3, r1, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	4619      	mov	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	400a      	ands	r2, r1
 80008a2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6859      	ldr	r1, [r3, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	430a      	orrs	r2, r1
 80008b2:	605a      	str	r2, [r3, #4]

	// 5. configure the alt function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	795b      	ldrb	r3, [r3, #5]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d139      	bne.n	8000930 <GPIO_Init+0x324>
	{
		uint32_t pinpos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	791b      	ldrb	r3, [r3, #4]
 80008c0:	f003 0307 	and.w	r3, r3, #7
 80008c4:	60fb      	str	r3, [r7, #12]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pinpos));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7a5b      	ldrb	r3, [r3, #9]
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_7)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	2b07      	cmp	r3, #7
 80008dc:	d820      	bhi.n	8000920 <GPIO_Init+0x314>
		{
			// use AFL

			pGPIOHandle->pGPIOx->AFRL |= temp;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	6a19      	ldr	r1, [r3, #32]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	430a      	orrs	r2, r1
 80008ec:	621a      	str	r2, [r3, #32]
		{
			// use AFH
			pGPIOHandle->pGPIOx->AFRH |= temp;
		}
	}
}
 80008ee:	e01f      	b.n	8000930 <GPIO_Init+0x324>
 80008f0:	40013c00 	.word	0x40013c00
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40020800 	.word	0x40020800
 8000900:	40020c00 	.word	0x40020c00
 8000904:	40021000 	.word	0x40021000
 8000908:	40021400 	.word	0x40021400
 800090c:	40021800 	.word	0x40021800
 8000910:	40021c00 	.word	0x40021c00
 8000914:	40022000 	.word	0x40022000
 8000918:	40023800 	.word	0x40023800
 800091c:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	430a      	orrs	r2, r1
 800092e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000930:	bf00      	nop
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <GPIO_WritePin>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_WritePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
 8000944:	4613      	mov	r3, r2
 8000946:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_PIN_RESET)
 8000948:	78bb      	ldrb	r3, [r7, #2]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d109      	bne.n	8000962 <GPIO_WritePin+0x2a>
	{
		// write 1 to the output data register at the bit filed corresponding to the pin number
		pGPIOx->ODR |= (1 << PinNumber);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	78fa      	ldrb	r2, [r7, #3]
 8000954:	2101      	movs	r1, #1
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	431a      	orrs	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	615a      	str	r2, [r3, #20]
	else
	{
		// write 0
		pGPIOx->ODR &= ~(1<<PinNumber);
	}
}
 8000960:	e009      	b.n	8000976 <GPIO_WritePin+0x3e>
		pGPIOx->ODR &= ~(1<<PinNumber);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	78fa      	ldrb	r2, [r7, #3]
 8000968:	2101      	movs	r1, #1
 800096a:	fa01 f202 	lsl.w	r2, r1, r2
 800096e:	43d2      	mvns	r2, r2
 8000970:	401a      	ands	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	615a      	str	r2, [r3, #20]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <GPIO_TogglePinOutput>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_TogglePinOutput(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<PinNumber);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	78fa      	ldrb	r2, [r7, #3]
 8000992:	2101      	movs	r1, #1
 8000994:	fa01 f202 	lsl.w	r2, r1, r2
 8000998:	405a      	eors	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	615a      	str	r2, [r3, #20]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <GPIO_IRQPriorityConfig>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	460a      	mov	r2, r1
 80009b2:	71fb      	strb	r3, [r7, #7]
 80009b4:	4613      	mov	r3, r2
 80009b6:	71bb      	strb	r3, [r7, #6]
	// NOTE: Only the first 4 bits (starting from MSB) are implemented in each of the 8 bits assigned.
	uint8_t iprx 			= IRQNumber/4;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section 	= IRQNumber%4;
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 0303 	and.w	r3, r3, #3
 80009c4:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount	= (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	3304      	adds	r3, #4
 80009ce:	737b      	strb	r3, [r7, #13]

	*(NVIC_IPR_BASEADDR + (iprx))	|= (IRQPriority << shift_amount);
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80009d8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	79b9      	ldrb	r1, [r7, #6]
 80009e0:	7b7b      	ldrb	r3, [r7, #13]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	4619      	mov	r1, r3
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80009f0:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80009f4:	430a      	orrs	r2, r1
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
	...

08000a04 <GPIO_IRQITConfig>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_IRQITConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	71fb      	strb	r3, [r7, #7]
 8000a10:	4613      	mov	r3, r2
 8000a12:	71bb      	strb	r3, [r7, #6]
	// processor side configuration
	if(EnorDi == ENABLE)
 8000a14:	79bb      	ldrb	r3, [r7, #6]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d133      	bne.n	8000a82 <GPIO_IRQITConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b1f      	cmp	r3, #31
 8000a1e:	d80a      	bhi.n	8000a36 <GPIO_IRQITConfig+0x32>
		{
			// program ISER1
			*NVIC_ISER0 |= (1<<IRQNumber);
 8000a20:	4b34      	ldr	r3, [pc, #208]	@ (8000af4 <GPIO_IRQITConfig+0xf0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	2101      	movs	r1, #1
 8000a28:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4a31      	ldr	r2, [pc, #196]	@ (8000af4 <GPIO_IRQITConfig+0xf0>)
 8000a30:	430b      	orrs	r3, r1
 8000a32:	6013      	str	r3, [r2, #0]
		else if (IRQNumber >= 64 && IRQNumber <= 96)
		{
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
		}
	}
}
 8000a34:	e059      	b.n	8000aea <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber <=63)
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b1f      	cmp	r3, #31
 8000a3a:	d90f      	bls.n	8000a5c <GPIO_IRQITConfig+0x58>
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a40:	d80c      	bhi.n	8000a5c <GPIO_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1<<(IRQNumber%32));
 8000a42:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <GPIO_IRQITConfig+0xf4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	79fa      	ldrb	r2, [r7, #7]
 8000a48:	f002 021f 	and.w	r2, r2, #31
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a52:	4611      	mov	r1, r2
 8000a54:	4a28      	ldr	r2, [pc, #160]	@ (8000af8 <GPIO_IRQITConfig+0xf4>)
 8000a56:	430b      	orrs	r3, r1
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	e046      	b.n	8000aea <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber <= 96)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a60:	d943      	bls.n	8000aea <GPIO_IRQITConfig+0xe6>
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b60      	cmp	r3, #96	@ 0x60
 8000a66:	d840      	bhi.n	8000aea <GPIO_IRQITConfig+0xe6>
			*NVIC_ISER2 |= (1<<(IRQNumber%64));
 8000a68:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <GPIO_IRQITConfig+0xf8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	79fa      	ldrb	r2, [r7, #7]
 8000a6e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000a72:	2101      	movs	r1, #1
 8000a74:	fa01 f202 	lsl.w	r2, r1, r2
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4a20      	ldr	r2, [pc, #128]	@ (8000afc <GPIO_IRQITConfig+0xf8>)
 8000a7c:	430b      	orrs	r3, r1
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	e033      	b.n	8000aea <GPIO_IRQITConfig+0xe6>
		if(IRQNumber <= 31)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b1f      	cmp	r3, #31
 8000a86:	d80a      	bhi.n	8000a9e <GPIO_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1<<IRQNumber);
 8000a88:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <GPIO_IRQITConfig+0xfc>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	79fa      	ldrb	r2, [r7, #7]
 8000a8e:	2101      	movs	r1, #1
 8000a90:	fa01 f202 	lsl.w	r2, r1, r2
 8000a94:	4611      	mov	r1, r2
 8000a96:	4a1a      	ldr	r2, [pc, #104]	@ (8000b00 <GPIO_IRQITConfig+0xfc>)
 8000a98:	430b      	orrs	r3, r1
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	e025      	b.n	8000aea <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber <=63)
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b1f      	cmp	r3, #31
 8000aa2:	d90f      	bls.n	8000ac4 <GPIO_IRQITConfig+0xc0>
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000aa8:	d80c      	bhi.n	8000ac4 <GPIO_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1<<(IRQNumber%32));
 8000aaa:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <GPIO_IRQITConfig+0x100>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	f002 021f 	and.w	r2, r2, #31
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aba:	4611      	mov	r1, r2
 8000abc:	4a11      	ldr	r2, [pc, #68]	@ (8000b04 <GPIO_IRQITConfig+0x100>)
 8000abe:	430b      	orrs	r3, r1
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	e012      	b.n	8000aea <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber <= 96)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ac8:	d90f      	bls.n	8000aea <GPIO_IRQITConfig+0xe6>
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b60      	cmp	r3, #96	@ 0x60
 8000ace:	d80c      	bhi.n	8000aea <GPIO_IRQITConfig+0xe6>
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <GPIO_IRQITConfig+0x104>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	79fa      	ldrb	r2, [r7, #7]
 8000ad6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4a09      	ldr	r2, [pc, #36]	@ (8000b08 <GPIO_IRQITConfig+0x104>)
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	e7ff      	b.n	8000aea <GPIO_IRQITConfig+0xe6>
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000e104 	.word	0xe000e104
 8000afc:	e000e108 	.word	0xe000e108
 8000b00:	e000e180 	.word	0xe000e180
 8000b04:	e000e184 	.word	0xe000e184
 8000b08:	e000e188 	.word	0xe000e188

08000b0c <GPIO_IRQHandling>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	// clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & (1<<PinNumber))
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <GPIO_IRQHandling+0x3c>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b22:	4013      	ands	r3, r2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d009      	beq.n	8000b3c <GPIO_IRQHandling+0x30>
	{
		// the interrupt is pended so we clear the register bit
		EXTI->PR |= (1 << PinNumber);
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <GPIO_IRQHandling+0x3c>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	4611      	mov	r1, r2
 8000b36:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <GPIO_IRQHandling+0x3c>)
 8000b38:	430b      	orrs	r3, r1
 8000b3a:	6153      	str	r3, [r2, #20]
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40013c00 	.word	0x40013c00

08000b4c <SPI_SSOEConfig>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d106      	bne.n	8000b6c <SPI_SSOEConfig+0x20>
	{
		SPI2->CR1 |= (1 << SPI_CR2_SSOE);
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <SPI_SSOEConfig+0x38>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a08      	ldr	r2, [pc, #32]	@ (8000b84 <SPI_SSOEConfig+0x38>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6013      	str	r3, [r2, #0]
	}
	else
	{
		SPI2->CR1 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000b6a:	e005      	b.n	8000b78 <SPI_SSOEConfig+0x2c>
		SPI2->CR1 &= ~(1 << SPI_CR2_SSOE);
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <SPI_SSOEConfig+0x38>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <SPI_SSOEConfig+0x38>)
 8000b72:	f023 0304 	bic.w	r3, r3, #4
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40003800 	.word	0x40003800

08000b88 <SPI_PeripheralControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d106      	bne.n	8000ba8 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
	}
	else if(EnOrDi == DISABLE)
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000ba6:	e008      	b.n	8000bba <SPI_PeripheralControl+0x32>
	else if(EnOrDi == DISABLE)
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d105      	bne.n	8000bba <SPI_PeripheralControl+0x32>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <SPI_ClockControl>:
 * @Note			-
 *
 *************************************************************************************************/
//#define SPI1							((GPIO_RegDef_t*)SPI1_BASEADDR)
void SPI_ClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d120      	bne.n	8000c18 <SPI_ClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a22      	ldr	r2, [pc, #136]	@ (8000c64 <SPI_ClockControl+0xa0>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d106      	bne.n	8000bec <SPI_ClockControl+0x28>
		{
			SPI1_CLK_EN();
 8000bde:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a21      	ldr	r2, [pc, #132]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000be4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
		else if(pSPIx == SPI3)
		{
			SPI3_CLK_DI();
		}
	}
}
 8000bea:	e035      	b.n	8000c58 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a1f      	ldr	r2, [pc, #124]	@ (8000c6c <SPI_ClockControl+0xa8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d106      	bne.n	8000c02 <SPI_ClockControl+0x3e>
			SPI2_CLK_EN();
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfe:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c00:	e02a      	b.n	8000c58 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI3)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a1a      	ldr	r2, [pc, #104]	@ (8000c70 <SPI_ClockControl+0xac>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d126      	bne.n	8000c58 <SPI_ClockControl+0x94>
			SPI3_CLK_EN();
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	4a16      	ldr	r2, [pc, #88]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c14:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c16:	e01f      	b.n	8000c58 <SPI_ClockControl+0x94>
		if(pSPIx == SPI1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <SPI_ClockControl+0xa0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d106      	bne.n	8000c2e <SPI_ClockControl+0x6a>
			SPI1_CLK_DI();
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c24:	4a10      	ldr	r2, [pc, #64]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000c26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c2a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000c2c:	e014      	b.n	8000c58 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI2)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a0e      	ldr	r2, [pc, #56]	@ (8000c6c <SPI_ClockControl+0xa8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d106      	bne.n	8000c44 <SPI_ClockControl+0x80>
			SPI2_CLK_DI();
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000c3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c40:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c42:	e009      	b.n	8000c58 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <SPI_ClockControl+0xac>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d105      	bne.n	8000c58 <SPI_ClockControl+0x94>
			SPI3_CLK_DI();
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c50:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <SPI_ClockControl+0xa4>)
 8000c52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000c56:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40013000 	.word	0x40013000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40003800 	.word	0x40003800
 8000c70:	40003c00 	.word	0x40003c00

08000c74 <SPI_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	//	uint8_t DFF;						/*DFF can either be 8 bit or 16 bits*/
	//	uint8_t CPOL;						/*CPOL is used to select the clock polarity*/
	//	uint8_t CPHA;						/*CPHA is used to select the clock phase*/
	//	uint8_t SSM;						/*SSM is Slave Select Management which is ued to select what slave to communicate to*/

	uint32_t temp = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]

	// enable peripheral clock
	SPI_ClockControl(pSPIHandle->pSPIx, ENABLE);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2101      	movs	r1, #1
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff9c 	bl	8000bc4 <SPI_ClockControl>

	// 1. Configure the device mode
	temp = pSPIHandle->SPIConfig.BusConfig << 2;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	795b      	ldrb	r3, [r3, #5]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	60fb      	str	r3, [r7, #12]

	// 2. Configure the Bus communication type
	if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_FULLDUPLEX)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	795b      	ldrb	r3, [r3, #5]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d104      	bne.n	8000ca6 <SPI_Init+0x32>
	{
		//Clear BIDIMODE (bit 15)
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	e014      	b.n	8000cd0 <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_HALFDUPLES)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	795b      	ldrb	r3, [r3, #5]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d104      	bne.n	8000cb8 <SPI_Init+0x44>
	{
		//Set BIDIMODE (bit 15)
		temp |= (1 << SPI_CR1_BIDIMODE);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	e00b      	b.n	8000cd0 <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_SIMPLEX)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	795b      	ldrb	r3, [r3, #5]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d107      	bne.n	8000cd0 <SPI_Init+0x5c>
	{
		//clear BIDIMODE (bit 15) and set RXONLY (bit 10)
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000cc6:	60fb      	str	r3, [r7, #12]
		temp |= (1 << SPI_CR1_RXONLY);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cce:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the Clock Speed
	temp |= pSPIHandle->SPIConfig.SclkSpeed << SPI_CR1_BR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	799b      	ldrb	r3, [r3, #6]
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

	// 4. DFF configuration
	temp |= pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	79db      	ldrb	r3, [r3, #7]
 8000ce0:	02db      	lsls	r3, r3, #11
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]

	// 5. Configure CPOL
	temp |= pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7a1b      	ldrb	r3, [r3, #8]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

	// 6. Configure CPHA
	temp |= pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7a5b      	ldrb	r3, [r3, #9]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 |= temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6819      	ldr	r1, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]

}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <SPI_SendData>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, int32_t len)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	while(len > 0)
 8000d24:	e023      	b.n	8000d6e <SPI_SendData+0x56>
	{
		while(!(pSPIx->SR & (1<<SPI_SR_TXE)));
 8000d26:	bf00      	nop
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0f9      	beq.n	8000d28 <SPI_SendData+0x10>
		if((pSPIx->CR1 & (1 << SPI_CR1_DFF)) == SPI_DFF_8BIT)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10b      	bne.n	8000d58 <SPI_SendData+0x40>
		{
			// shift register is 16 bits
			pSPIx->DR = *(uint16_t*)pTxBuffer;
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	60da      	str	r2, [r3, #12]
			len-=2;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++ 	;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	3301      	adds	r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	e00a      	b.n	8000d6e <SPI_SendData+0x56>
		}
		else
		{
			// shift register is 8 bits
			pSPIx->DR = *(uint8_t*)pTxBuffer;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	60da      	str	r2, [r3, #12]
			len--;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	dcd8      	bgt.n	8000d26 <SPI_SendData+0xe>
		}

	}

}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <memset>:
 8000d80:	4402      	add	r2, r0
 8000d82:	4603      	mov	r3, r0
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d100      	bne.n	8000d8a <memset+0xa>
 8000d88:	4770      	bx	lr
 8000d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8000d8e:	e7f9      	b.n	8000d84 <memset+0x4>

08000d90 <__libc_init_array>:
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	4d0d      	ldr	r5, [pc, #52]	@ (8000dc8 <__libc_init_array+0x38>)
 8000d94:	4c0d      	ldr	r4, [pc, #52]	@ (8000dcc <__libc_init_array+0x3c>)
 8000d96:	1b64      	subs	r4, r4, r5
 8000d98:	10a4      	asrs	r4, r4, #2
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	42a6      	cmp	r6, r4
 8000d9e:	d109      	bne.n	8000db4 <__libc_init_array+0x24>
 8000da0:	4d0b      	ldr	r5, [pc, #44]	@ (8000dd0 <__libc_init_array+0x40>)
 8000da2:	4c0c      	ldr	r4, [pc, #48]	@ (8000dd4 <__libc_init_array+0x44>)
 8000da4:	f000 f818 	bl	8000dd8 <_init>
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	10a4      	asrs	r4, r4, #2
 8000dac:	2600      	movs	r6, #0
 8000dae:	42a6      	cmp	r6, r4
 8000db0:	d105      	bne.n	8000dbe <__libc_init_array+0x2e>
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
 8000db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db8:	4798      	blx	r3
 8000dba:	3601      	adds	r6, #1
 8000dbc:	e7ee      	b.n	8000d9c <__libc_init_array+0xc>
 8000dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc2:	4798      	blx	r3
 8000dc4:	3601      	adds	r6, #1
 8000dc6:	e7f2      	b.n	8000dae <__libc_init_array+0x1e>
 8000dc8:	08000df8 	.word	0x08000df8
 8000dcc:	08000df8 	.word	0x08000df8
 8000dd0:	08000df8 	.word	0x08000df8
 8000dd4:	08000dfc 	.word	0x08000dfc

08000dd8 <_init>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	bf00      	nop
 8000ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dde:	bc08      	pop	{r3}
 8000de0:	469e      	mov	lr, r3
 8000de2:	4770      	bx	lr

08000de4 <_fini>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr
