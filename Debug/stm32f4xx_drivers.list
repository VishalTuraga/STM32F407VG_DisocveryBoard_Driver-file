
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001cac  08001cac  00002cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cf4  08001cf4  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  08001cf4  08001cf4  00002cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cfc  08001cfc  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cfc  08001cfc  00002cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d00  08001d00  00002d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001d04  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          0000057c  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005dc  200005dc  00003060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a54  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007af  00000000  00000000  00004ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00005290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000171  00000000  00000000  00005488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003b0e  00000000  00000000  000055f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000028a3  00000000  00000000  00009107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cc97  00000000  00000000  0000b9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00018641  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e70  00000000  00000000  00018684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  000194f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001c94 	.word	0x08001c94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08001c94 	.word	0x08001c94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
I2C_Handle_t I2C1Handle;



int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	I2C1GPIOInits();
 8000274:	f000 f830 	bl	80002d8 <I2C1GPIOInits>

	I2C1Inits();
 8000278:	f000 f856 	bl	8000328 <I2C1Inits>

	ButtonGPIOInits();
 800027c:	f000 f80e 	bl	800029c <ButtonGPIOInits>

	GPIO_IRQITConfig(IRQ_EXTI0, ENABLE);
 8000280:	2101      	movs	r1, #1
 8000282:	2006      	movs	r0, #6
 8000284:	f000 fd38 	bl	8000cf8 <GPIO_IRQITConfig>
			I2C_MasterReceiveData(&I2C1Handle, buffer, length, SLAVEADDR);
	 * }
	 * I2C_PeripheralControl(I2C1Handle, DISABLE);
	 */

	printf("Data received: %s\n",buffer);
 8000288:	4902      	ldr	r1, [pc, #8]	@ (8000294 <main+0x24>)
 800028a:	4803      	ldr	r0, [pc, #12]	@ (8000298 <main+0x28>)
 800028c:	f000 fe9a 	bl	8000fc4 <iprintf>

	while(1);
 8000290:	bf00      	nop
 8000292:	e7fd      	b.n	8000290 <main+0x20>
 8000294:	2000007c 	.word	0x2000007c
 8000298:	08001cac 	.word	0x08001cac

0800029c <ButtonGPIOInits>:

	return 0;
}

void ButtonGPIOInits(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
	GPIO_Handle_t Button;
	memset(&Button,0,sizeof(Button));
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	220c      	movs	r2, #12
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fee0 	bl	800106e <memset>
	Button.pGPIOx = GPIOA;
 80002ae:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <ButtonGPIOInits+0x38>)
 80002b0:	607b      	str	r3, [r7, #4]
	Button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	723b      	strb	r3, [r7, #8]
	Button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80002b6:	2304      	movs	r3, #4
 80002b8:	727b      	strb	r3, [r7, #9]
	Button.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OUT_SPEED_HIGH;
 80002ba:	2302      	movs	r3, #2
 80002bc:	72bb      	strb	r3, [r7, #10]
	Button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NONE;
 80002be:	2300      	movs	r3, #0
 80002c0:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&Button);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fb81 	bl	80009cc <GPIO_Init>
}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40020000 	.word	0x40020000

080002d8 <I2C1GPIOInits>:

void I2C1GPIOInits(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C1GPIO;
	memset(&I2C1GPIO,0,sizeof(I2C1GPIO));
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	220c      	movs	r2, #12
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fec2 	bl	800106e <memset>
	I2C1GPIO.pGPIOx = GPIOB;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <I2C1GPIOInits+0x4c>)
 80002ec:	607b      	str	r3, [r7, #4]
	I2C1GPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ee:	2302      	movs	r3, #2
 80002f0:	727b      	strb	r3, [r7, #9]
	I2C1GPIO.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALTFN_AF4;
 80002f2:	2304      	movs	r3, #4
 80002f4:	737b      	strb	r3, [r7, #13]
	I2C1GPIO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OUT_SPEED_LOW;
 80002f6:	2300      	movs	r3, #0
 80002f8:	72bb      	strb	r3, [r7, #10]
	I2C1GPIO.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_OD;
 80002fa:	2301      	movs	r3, #1
 80002fc:	733b      	strb	r3, [r7, #12]
	I2C1GPIO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_PULLUP;
 80002fe:	2301      	movs	r3, #1
 8000300:	72fb      	strb	r3, [r7, #11]

	I2C1GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000302:	2306      	movs	r3, #6
 8000304:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C1GPIO);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fb5f 	bl	80009cc <GPIO_Init>

	I2C1GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800030e:	2307      	movs	r3, #7
 8000310:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C1GPIO);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fb59 	bl	80009cc <GPIO_Init>
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40020400 	.word	0x40020400

08000328 <I2C1Inits>:

void I2C1Inits(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <I2C1Inits+0x24>)
 800032e:	4a08      	ldr	r2, [pc, #32]	@ (8000350 <I2C1Inits+0x28>)
 8000330:	609a      	str	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACKCTRL_ACK_EN;
 8000332:	4b06      	ldr	r3, [pc, #24]	@ (800034c <I2C1Inits+0x24>)
 8000334:	2201      	movs	r2, #1
 8000336:	715a      	strb	r2, [r3, #5]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x68;
 8000338:	4b04      	ldr	r3, [pc, #16]	@ (800034c <I2C1Inits+0x24>)
 800033a:	2268      	movs	r2, #104	@ 0x68
 800033c:	711a      	strb	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM_KHZ;
 800033e:	4b03      	ldr	r3, [pc, #12]	@ (800034c <I2C1Inits+0x24>)
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <I2C1Inits+0x2c>)
 8000342:	601a      	str	r2, [r3, #0]

}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	20000480 	.word	0x20000480
 8000350:	40005400 	.word	0x40005400
 8000354:	000186a0 	.word	0x000186a0

08000358 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_0);
 800035c:	2000      	movs	r0, #0
 800035e:	f000 fd4f 	bl	8000e00 <GPIO_IRQHandling>

	I2C_PeripheralControl(I2C1Handle.pI2Cx, ENABLE);
 8000362:	4b13      	ldr	r3, [pc, #76]	@ (80003b0 <EXTI0_IRQHandler+0x58>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	2101      	movs	r1, #1
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f8f4 	bl	8000556 <I2C_PeripheralControl>

	I2C_MasterSendData(&I2C1Handle, &CMDReadLen, 1, SLAVEADDR);
 800036e:	2361      	movs	r3, #97	@ 0x61
 8000370:	2201      	movs	r2, #1
 8000372:	4910      	ldr	r1, [pc, #64]	@ (80003b4 <EXTI0_IRQHandler+0x5c>)
 8000374:	480e      	ldr	r0, [pc, #56]	@ (80003b0 <EXTI0_IRQHandler+0x58>)
 8000376:	f000 f925 	bl	80005c4 <I2C_MasterSendData>

	I2C_MasterReceiveData(&I2C1Handle, &length, 1, SLAVEADDR);
 800037a:	2361      	movs	r3, #97	@ 0x61
 800037c:	2201      	movs	r2, #1
 800037e:	490e      	ldr	r1, [pc, #56]	@ (80003b8 <EXTI0_IRQHandler+0x60>)
 8000380:	480b      	ldr	r0, [pc, #44]	@ (80003b0 <EXTI0_IRQHandler+0x58>)
 8000382:	f000 f990 	bl	80006a6 <I2C_MasterReceiveData>

	I2C_MasterSendData(&I2C1Handle, &CMDReadData, 1, SLAVEADDR);
 8000386:	2361      	movs	r3, #97	@ 0x61
 8000388:	2201      	movs	r2, #1
 800038a:	490c      	ldr	r1, [pc, #48]	@ (80003bc <EXTI0_IRQHandler+0x64>)
 800038c:	4808      	ldr	r0, [pc, #32]	@ (80003b0 <EXTI0_IRQHandler+0x58>)
 800038e:	f000 f919 	bl	80005c4 <I2C_MasterSendData>

	I2C_MasterReceiveData(&I2C1Handle, buffer, length, SLAVEADDR);
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <EXTI0_IRQHandler+0x60>)
 8000394:	781a      	ldrb	r2, [r3, #0]
 8000396:	2361      	movs	r3, #97	@ 0x61
 8000398:	4909      	ldr	r1, [pc, #36]	@ (80003c0 <EXTI0_IRQHandler+0x68>)
 800039a:	4805      	ldr	r0, [pc, #20]	@ (80003b0 <EXTI0_IRQHandler+0x58>)
 800039c:	f000 f983 	bl	80006a6 <I2C_MasterReceiveData>

	I2C_PeripheralControl(I2C1Handle.pI2Cx, DISABLE);
 80003a0:	4b03      	ldr	r3, [pc, #12]	@ (80003b0 <EXTI0_IRQHandler+0x58>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 f8d5 	bl	8000556 <I2C_PeripheralControl>
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000480 	.word	0x20000480
 80003b4:	20000000 	.word	0x20000000
 80003b8:	2000047c 	.word	0x2000047c
 80003bc:	20000001 	.word	0x20000001
 80003c0:	2000007c 	.word	0x2000007c

080003c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	e00a      	b.n	80003ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003d6:	f3af 8000 	nop.w
 80003da:	4601      	mov	r1, r0
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	1c5a      	adds	r2, r3, #1
 80003e0:	60ba      	str	r2, [r7, #8]
 80003e2:	b2ca      	uxtb	r2, r1
 80003e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	3301      	adds	r3, #1
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	697a      	ldr	r2, [r7, #20]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	dbf0      	blt.n	80003d6 <_read+0x12>
  }

  return len;
 80003f4:	687b      	ldr	r3, [r7, #4]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3718      	adds	r7, #24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b086      	sub	sp, #24
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e009      	b.n	8000424 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	60ba      	str	r2, [r7, #8]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	3301      	adds	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
 8000424:	697a      	ldr	r2, [r7, #20]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	429a      	cmp	r2, r3
 800042a:	dbf1      	blt.n	8000410 <_write+0x12>
  }
  return len;
 800042c:	687b      	ldr	r3, [r7, #4]
}
 800042e:	4618      	mov	r0, r3
 8000430:	3718      	adds	r7, #24
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <_close>:

int _close(int file)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800043e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800045c:	605a      	str	r2, [r3, #4]
  return 0;
 800045e:	2300      	movs	r3, #0
}
 8000460:	4618      	mov	r0, r3
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <_isatty>:

int _isatty(int file)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000472:	2301      	movs	r3, #1
}
 8000474:	4618      	mov	r0, r3
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800047e:	b480      	push	{r7}
 8000480:	b085      	sub	sp, #20
 8000482:	af00      	add	r7, sp, #0
 8000484:	60f8      	str	r0, [r7, #12]
 8000486:	60b9      	str	r1, [r7, #8]
 8000488:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
	...

08000498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a0:	4a14      	ldr	r2, [pc, #80]	@ (80004f4 <_sbrk+0x5c>)
 80004a2:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <_sbrk+0x60>)
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ac:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b4:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <_sbrk+0x64>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	@ (8000500 <_sbrk+0x68>)
 80004b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ba:	4b10      	ldr	r3, [pc, #64]	@ (80004fc <_sbrk+0x64>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d207      	bcs.n	80004d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c8:	f000 fe20 	bl	800110c <__errno>
 80004cc:	4603      	mov	r3, r0
 80004ce:	220c      	movs	r2, #12
 80004d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
 80004d6:	e009      	b.n	80004ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d8:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	4a05      	ldr	r2, [pc, #20]	@ (80004fc <_sbrk+0x64>)
 80004e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20020000 	.word	0x20020000
 80004f8:	00000400 	.word	0x00000400
 80004fc:	2000048c 	.word	0x2000048c
 8000500:	200005e0 	.word	0x200005e0

08000504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000504:	480d      	ldr	r0, [pc, #52]	@ (800053c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000506:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000508:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480c      	ldr	r0, [pc, #48]	@ (8000540 <LoopForever+0x6>)
  ldr r1, =_edata
 800050e:	490d      	ldr	r1, [pc, #52]	@ (8000544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000510:	4a0d      	ldr	r2, [pc, #52]	@ (8000548 <LoopForever+0xe>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000524:	4c0a      	ldr	r4, [pc, #40]	@ (8000550 <LoopForever+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000532:	f000 fdf1 	bl	8001118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000536:	f7ff fe9b 	bl	8000270 <main>

0800053a <LoopForever>:

LoopForever:
  b LoopForever
 800053a:	e7fe      	b.n	800053a <LoopForever>
  ldr   r0, =_estack
 800053c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000548:	08001d04 	.word	0x08001d04
  ldr r2, =_sbss
 800054c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000550:	200005dc 	.word	0x200005dc

08000554 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC_IRQHandler>

08000556 <I2C_PeripheralControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	460b      	mov	r3, r1
 8000560:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000562:	78fb      	ldrb	r3, [r7, #3]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d106      	bne.n	8000576 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f043 0201 	orr.w	r2, r3, #1
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	601a      	str	r2, [r3, #0]
	}
	else if(EnOrDi == DISABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
	}
}
 8000574:	e008      	b.n	8000588 <I2C_PeripheralControl+0x32>
	else if(EnOrDi == DISABLE)
 8000576:	78fb      	ldrb	r3, [r7, #3]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d105      	bne.n	8000588 <I2C_PeripheralControl+0x32>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f043 0201 	orr.w	r2, r3, #1
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	601a      	str	r2, [r3, #0]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <I2C_GetFlagStatus>:
		I2C3_CLK_DI();
	}
}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
	if((pI2Cx->SR1 & FlagName) || (pI2Cx->SR2 & FlagName))
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	4013      	ands	r3, r2
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d105      	bne.n	80005b4 <I2C_GetFlagStatus+0x22>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	699a      	ldr	r2, [r3, #24]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	4013      	ands	r3, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <I2C_GetFlagStatus+0x26>
	{
		return FLAG_SET;
 80005b4:	2301      	movs	r3, #1
 80005b6:	e000      	b.n	80005ba <I2C_GetFlagStatus+0x28>
	}
	return FLAG_RESET;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <I2C_MasterSendData>:
/*
 * I2C send and receive data
 */

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *TxBuffer, uint8_t len, uint8_t SlaveAddr)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	4611      	mov	r1, r2
 80005d0:	461a      	mov	r2, r3
 80005d2:	460b      	mov	r3, r1
 80005d4:	71fb      	strb	r3, [r7, #7]
 80005d6:	4613      	mov	r3, r2
 80005d8:	71bb      	strb	r3, [r7, #6]
	uint32_t temp;
	// 1. Generate the start condition
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80005e8:	601a      	str	r2, [r3, #0]

	// 2. Check if the start bit is set and then Read the SR1 register to clear the start bit
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_SR1_SB) == FLAG_SET));
 80005ea:	bf00      	nop
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ffcd 	bl	8000592 <I2C_GetFlagStatus>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d1f6      	bne.n	80005ec <I2C_MasterSendData+0x28>
	//uint32_t temp = pI2CHandle->pI2Cx->SR1;

	// 3. Send the address of slave with transmission byte (0)
	SlaveAddr = SlaveAddr << 1;
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	71bb      	strb	r3, [r7, #6]
	SlaveAddr &= ~(1);
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	f023 0301 	bic.w	r3, r3, #1
 800060a:	71bb      	strb	r3, [r7, #6]
	pI2CHandle->pI2Cx->DR = SlaveAddr;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	79ba      	ldrb	r2, [r7, #6]
 8000612:	611a      	str	r2, [r3, #16]

	// 4. ADDR bit is set if it receives an ACK
	if(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_ADDR)))
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffb9 	bl	8000592 <I2C_GetFlagStatus>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d01c      	beq.n	8000660 <I2C_MasterSendData+0x9c>
	{
		// The ADDR bit is set which means that the master received an ack. Now we should reset this ADDR bit
		// read SR1 and SR2 to clear this bit
		temp = pI2CHandle->pI2Cx->SR1;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	617b      	str	r3, [r7, #20]
		temp = pI2CHandle->pI2Cx->SR2;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	617b      	str	r3, [r7, #20]
		(void)temp;
	}

	// 5. Send data till len becomes zero. We don't have to check for ack every time as it is handled by the hardware
	while(len)
 8000636:	e013      	b.n	8000660 <I2C_MasterSendData+0x9c>
	{
		// wait till Txe is 1 indicating that DR is empty and ready to be filled with data
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_TxE))))
		{
			pI2CHandle->pI2Cx->DR = *TxBuffer;
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	611a      	str	r2, [r3, #16]
			TxBuffer++;
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	3301      	adds	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
			len--;
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	3b01      	subs	r3, #1
 800064c:	71fb      	strb	r3, [r7, #7]
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_TxE))))
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	2180      	movs	r1, #128	@ 0x80
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff9c 	bl	8000592 <I2C_GetFlagStatus>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0eb      	beq.n	8000638 <I2C_MasterSendData+0x74>
	while(len)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1f3      	bne.n	800064e <I2C_MasterSendData+0x8a>
		}
	}

	// 6. Close the communication
	// 6.1 wait for Txe = 1 and BTF = 1 before generating the stop condition
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_TxE))));
 8000666:	bf00      	nop
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	2180      	movs	r1, #128	@ 0x80
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff8f 	bl	8000592 <I2C_GetFlagStatus>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f6      	beq.n	8000668 <I2C_MasterSendData+0xa4>
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_BTF))));
 800067a:	bf00      	nop
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	2104      	movs	r1, #4
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff85 	bl	8000592 <I2C_GetFlagStatus>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f6      	beq.n	800067c <I2C_MasterSendData+0xb8>

	// 6.2 Generate the stop condition
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800069c:	601a      	str	r2, [r3, #0]
}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <I2C_MasterReceiveData>:
/*
 * I2C send and receive data
 */

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *RxBuffer, uint8_t len, uint8_t SlaveAddr)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	4611      	mov	r1, r2
 80006b2:	461a      	mov	r2, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	uint32_t temp;
	// 1. Initiate the start condition
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80006ca:	601a      	str	r2, [r3, #0]

	// 2. Confirm if the start bit is set
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_SR1_SB)));
 80006cc:	bf00      	nop
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff5c 	bl	8000592 <I2C_GetFlagStatus>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0f6      	beq.n	80006ce <I2C_MasterReceiveData+0x28>

	// 3. Send Address bit
	SlaveAddr = SlaveAddr << 1;
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	71bb      	strb	r3, [r7, #6]
	SlaveAddr |= 1;
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	71bb      	strb	r3, [r7, #6]
	pI2CHandle->pI2Cx->DR = SlaveAddr;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	611a      	str	r2, [r3, #16]

	// 4. check if the ADDR flag is set. Wait until its set
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_ADDR))));
 80006f6:	bf00      	nop
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff47 	bl	8000592 <I2C_GetFlagStatus>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0f6      	beq.n	80006f8 <I2C_MasterReceiveData+0x52>

	// 5. Send data. If len = 1 or if len > 1
	if(len == 1)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d12e      	bne.n	800076e <I2C_MasterReceiveData+0xc8>
	{
		// a. Disable ack
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800071e:	601a      	str	r2, [r3, #0]

		// c. clear addr bit. Read SR1 followed by SR2
		temp = pI2CHandle->pI2Cx->SR1;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	617b      	str	r3, [r7, #20]
		temp = pI2CHandle->pI2Cx->SR2;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	617b      	str	r3, [r7, #20]
		(void)temp;

		// d. wait till RXNE is set
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, (1 << I2C_SR1_RxNE)));
 8000730:	bf00      	nop
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	2140      	movs	r1, #64	@ 0x40
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff2a 	bl	8000592 <I2C_GetFlagStatus>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0f6      	beq.n	8000732 <I2C_MasterReceiveData+0x8c>

		// b. send stop condition
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000752:	601a      	str	r2, [r3, #0]

		// e. Read the data from the data register
		*RxBuffer = pI2CHandle->pI2Cx->DR;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	701a      	strb	r2, [r3, #0]
		RxBuffer++;
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	3301      	adds	r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
		len--;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	3b01      	subs	r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
		return;
 800076c:	e043      	b.n	80007f6 <I2C_MasterReceiveData+0x150>
	}
	if(len > 1 )
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d934      	bls.n	80007de <I2C_MasterReceiveData+0x138>
	{
		// a. clear the address bit
		temp = pI2CHandle->pI2Cx->SR1;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	617b      	str	r3, [r7, #20]
		temp = pI2CHandle->pI2Cx->SR2;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	617b      	str	r3, [r7, #20]
		(void)temp;

		// b. receive data
		while(len > 0)
 8000784:	e028      	b.n	80007d8 <I2C_MasterReceiveData+0x132>
		{
			// d. wait till RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, (1 << I2C_SR1_RxNE)));
 8000786:	bf00      	nop
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	2140      	movs	r1, #64	@ 0x40
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff feff 	bl	8000592 <I2C_GetFlagStatus>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0f6      	beq.n	8000788 <I2C_MasterReceiveData+0xe2>

			if(len == 2)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d10f      	bne.n	80007c0 <I2C_MasterReceiveData+0x11a>
			{
				// c. when len == 2,
				// c.1 clear ACK
				pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80007ae:	601a      	str	r2, [r3, #0]

				// c.2 set STOP condition
				pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80007be:	601a      	str	r2, [r3, #0]
			}

			*RxBuffer = pI2CHandle->pI2Cx->DR;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	701a      	strb	r2, [r3, #0]

			len--;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	71fb      	strb	r3, [r7, #7]
			RxBuffer++;
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
		while(len > 0)
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1d3      	bne.n	8000786 <I2C_MasterReceiveData+0xe0>
		}

	}

	// 7. Renable acking
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACKCTRL_ACK_EN)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	795b      	ldrb	r3, [r3, #5]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d107      	bne.n	80007f6 <I2C_MasterReceiveData+0x150>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80007f4:	601a      	str	r2, [r3, #0]

}
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <GPIO_ClockControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d162      	bne.n	80008d4 <GPIO_ClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a64      	ldr	r2, [pc, #400]	@ (80009a4 <GPIO_ClockControl+0x1a8>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <GPIO_ClockControl+0x28>
		{
			GPIOA_CLK_EN();
 8000816:	4b64      	ldr	r3, [pc, #400]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a63      	ldr	r2, [pc, #396]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_CLK_DI();
		}
	}
}
 8000822:	e0b9      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a61      	ldr	r2, [pc, #388]	@ (80009ac <GPIO_ClockControl+0x1b0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d106      	bne.n	800083a <GPIO_ClockControl+0x3e>
			GPIOB_CLK_EN();
 800082c:	4b5e      	ldr	r3, [pc, #376]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000830:	4a5d      	ldr	r2, [pc, #372]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000838:	e0ae      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a5c      	ldr	r2, [pc, #368]	@ (80009b0 <GPIO_ClockControl+0x1b4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <GPIO_ClockControl+0x54>
			GPIOC_CLK_EN();
 8000842:	4b59      	ldr	r3, [pc, #356]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a58      	ldr	r2, [pc, #352]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800084e:	e0a3      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a58      	ldr	r2, [pc, #352]	@ (80009b4 <GPIO_ClockControl+0x1b8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d106      	bne.n	8000866 <GPIO_ClockControl+0x6a>
			GPIOD_CLK_EN();
 8000858:	4b53      	ldr	r3, [pc, #332]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085c:	4a52      	ldr	r2, [pc, #328]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000864:	e098      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a53      	ldr	r2, [pc, #332]	@ (80009b8 <GPIO_ClockControl+0x1bc>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <GPIO_ClockControl+0x80>
			GPIOE_CLK_EN();
 800086e:	4b4e      	ldr	r3, [pc, #312]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a4d      	ldr	r2, [pc, #308]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800087a:	e08d      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a4f      	ldr	r2, [pc, #316]	@ (80009bc <GPIO_ClockControl+0x1c0>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d106      	bne.n	8000892 <GPIO_ClockControl+0x96>
			GPIOF_CLK_EN();
 8000884:	4b48      	ldr	r3, [pc, #288]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000888:	4a47      	ldr	r2, [pc, #284]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800088a:	f043 0320 	orr.w	r3, r3, #32
 800088e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000890:	e082      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a4a      	ldr	r2, [pc, #296]	@ (80009c0 <GPIO_ClockControl+0x1c4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d106      	bne.n	80008a8 <GPIO_ClockControl+0xac>
			GPIOG_CLK_EN();
 800089a:	4b43      	ldr	r3, [pc, #268]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a42      	ldr	r2, [pc, #264]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008a6:	e077      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a46      	ldr	r2, [pc, #280]	@ (80009c4 <GPIO_ClockControl+0x1c8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d106      	bne.n	80008be <GPIO_ClockControl+0xc2>
			GPIOH_CLK_EN();
 80008b0:	4b3d      	ldr	r3, [pc, #244]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b4:	4a3c      	ldr	r2, [pc, #240]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 80008b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008bc:	e06c      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a41      	ldr	r2, [pc, #260]	@ (80009c8 <GPIO_ClockControl+0x1cc>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d168      	bne.n	8000998 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_EN();
 80008c6:	4b38      	ldr	r3, [pc, #224]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a37      	ldr	r2, [pc, #220]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 80008cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008d2:	e061      	b.n	8000998 <GPIO_ClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a33      	ldr	r2, [pc, #204]	@ (80009a4 <GPIO_ClockControl+0x1a8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d106      	bne.n	80008ea <GPIO_ClockControl+0xee>
			GPIOA_CLK_DI();
 80008dc:	4b32      	ldr	r3, [pc, #200]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e0:	4a31      	ldr	r2, [pc, #196]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008e8:	e056      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a2f      	ldr	r2, [pc, #188]	@ (80009ac <GPIO_ClockControl+0x1b0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d106      	bne.n	8000900 <GPIO_ClockControl+0x104>
			GPIOB_CLK_DI();
 80008f2:	4b2d      	ldr	r3, [pc, #180]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a2c      	ldr	r2, [pc, #176]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008fe:	e04b      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a2b      	ldr	r2, [pc, #172]	@ (80009b0 <GPIO_ClockControl+0x1b4>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d106      	bne.n	8000916 <GPIO_ClockControl+0x11a>
			GPIOC_CLK_DI();
 8000908:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090c:	4a26      	ldr	r2, [pc, #152]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000914:	e040      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a26      	ldr	r2, [pc, #152]	@ (80009b4 <GPIO_ClockControl+0x1b8>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d106      	bne.n	800092c <GPIO_ClockControl+0x130>
			GPIOD_CLK_DI();
 800091e:	4b22      	ldr	r3, [pc, #136]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a21      	ldr	r2, [pc, #132]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800092a:	e035      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a22      	ldr	r2, [pc, #136]	@ (80009b8 <GPIO_ClockControl+0x1bc>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d106      	bne.n	8000942 <GPIO_ClockControl+0x146>
			GPIOE_CLK_DI();
 8000934:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000938:	4a1b      	ldr	r2, [pc, #108]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000940:	e02a      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a1d      	ldr	r2, [pc, #116]	@ (80009bc <GPIO_ClockControl+0x1c0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d106      	bne.n	8000958 <GPIO_ClockControl+0x15c>
			GPIOF_CLK_DI();
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a16      	ldr	r2, [pc, #88]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000950:	f043 0320 	orr.w	r3, r3, #32
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000956:	e01f      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <GPIO_ClockControl+0x1c4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d106      	bne.n	800096e <GPIO_ClockControl+0x172>
			GPIOG_CLK_DI();
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000964:	4a10      	ldr	r2, [pc, #64]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800096a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800096c:	e014      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a14      	ldr	r2, [pc, #80]	@ (80009c4 <GPIO_ClockControl+0x1c8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d106      	bne.n	8000984 <GPIO_ClockControl+0x188>
			GPIOH_CLK_DI();
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a0b      	ldr	r2, [pc, #44]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000982:	e009      	b.n	8000998 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a10      	ldr	r2, [pc, #64]	@ (80009c8 <GPIO_ClockControl+0x1cc>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d105      	bne.n	8000998 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_DI();
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000990:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <GPIO_ClockControl+0x1ac>)
 8000992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000996:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40021400 	.word	0x40021400
 80009c0:	40021800 	.word	0x40021800
 80009c4:	40021c00 	.word	0x40021c00
 80009c8:	40022000 	.word	0x40022000

080009cc <GPIO_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	GPIO_ClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff0e 	bl	80007fc <GPIO_ClockControl>

	uint32_t temp = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d820      	bhi.n	8000a2e <GPIO_Init+0x62>
	{
		// Non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	795b      	ldrb	r3, [r3, #5]
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	791b      	ldrb	r3, [r3, #4]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	791b      	ldrb	r3, [r3, #4]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2103      	movs	r1, #3
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	400a      	ands	r2, r1
 8000a1a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6819      	ldr	r1, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	e0c3      	b.n	8000bb6 <GPIO_Init+0x1ea>
	}
	else
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	791b      	ldrb	r3, [r3, #4]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	400a      	ands	r2, r1
 8000a4a:	601a      	str	r2, [r3, #0]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	795b      	ldrb	r3, [r3, #5]
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d117      	bne.n	8000a84 <GPIO_Init+0xb8>
		{
			// 1. Configure the FTSR
			// first we clear the corresponding RTSR bit so that we only have FTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a54:	4b96      	ldr	r3, [pc, #600]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	7912      	ldrb	r2, [r2, #4]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	2201      	movs	r2, #1
 8000a60:	408a      	lsls	r2, r1
 8000a62:	43d2      	mvns	r2, r2
 8000a64:	4611      	mov	r1, r2
 8000a66:	4a92      	ldr	r2, [pc, #584]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000a68:	400b      	ands	r3, r1
 8000a6a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a6c:	4b90      	ldr	r3, [pc, #576]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	7912      	ldrb	r2, [r2, #4]
 8000a74:	4611      	mov	r1, r2
 8000a76:	2201      	movs	r2, #1
 8000a78:	408a      	lsls	r2, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4a8c      	ldr	r2, [pc, #560]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	60d3      	str	r3, [r2, #12]
 8000a82:	e035      	b.n	8000af0 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	795b      	ldrb	r3, [r3, #5]
 8000a88:	2b05      	cmp	r3, #5
 8000a8a:	d117      	bne.n	8000abc <GPIO_Init+0xf0>
		{
			// 1. Configure the RTSR
			// first we clear the corresponding FTSR bit so that we only have RTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a8c:	4b88      	ldr	r3, [pc, #544]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	7912      	ldrb	r2, [r2, #4]
 8000a94:	4611      	mov	r1, r2
 8000a96:	2201      	movs	r2, #1
 8000a98:	408a      	lsls	r2, r1
 8000a9a:	43d2      	mvns	r2, r2
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4a84      	ldr	r2, [pc, #528]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000aa0:	400b      	ands	r3, r1
 8000aa2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aa4:	4b82      	ldr	r3, [pc, #520]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	7912      	ldrb	r2, [r2, #4]
 8000aac:	4611      	mov	r1, r2
 8000aae:	2201      	movs	r2, #1
 8000ab0:	408a      	lsls	r2, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4a7e      	ldr	r2, [pc, #504]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000ab6:	430b      	orrs	r3, r1
 8000ab8:	6093      	str	r3, [r2, #8]
 8000aba:	e019      	b.n	8000af0 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	2b06      	cmp	r3, #6
 8000ac2:	d115      	bne.n	8000af0 <GPIO_Init+0x124>
		{
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ac4:	4b7a      	ldr	r3, [pc, #488]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	7912      	ldrb	r2, [r2, #4]
 8000acc:	4611      	mov	r1, r2
 8000ace:	2201      	movs	r2, #1
 8000ad0:	408a      	lsls	r2, r1
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4a76      	ldr	r2, [pc, #472]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000ad6:	430b      	orrs	r3, r1
 8000ad8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ada:	4b75      	ldr	r3, [pc, #468]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	7912      	ldrb	r2, [r2, #4]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	408a      	lsls	r2, r1
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4a71      	ldr	r2, [pc, #452]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000aec:	430b      	orrs	r3, r1
 8000aee:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		// Calculate the register number EXTICR1/EXTICR2/EXTICR3/EXTICR4
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	791b      	ldrb	r3, [r3, #4]
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	617b      	str	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a6d      	ldr	r2, [pc, #436]	@ (8000cb4 <GPIO_Init+0x2e8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d039      	beq.n	8000b78 <GPIO_Init+0x1ac>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a6b      	ldr	r2, [pc, #428]	@ (8000cb8 <GPIO_Init+0x2ec>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d032      	beq.n	8000b74 <GPIO_Init+0x1a8>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a6a      	ldr	r2, [pc, #424]	@ (8000cbc <GPIO_Init+0x2f0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d02b      	beq.n	8000b70 <GPIO_Init+0x1a4>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a68      	ldr	r2, [pc, #416]	@ (8000cc0 <GPIO_Init+0x2f4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d024      	beq.n	8000b6c <GPIO_Init+0x1a0>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a67      	ldr	r2, [pc, #412]	@ (8000cc4 <GPIO_Init+0x2f8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d01d      	beq.n	8000b68 <GPIO_Init+0x19c>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a65      	ldr	r2, [pc, #404]	@ (8000cc8 <GPIO_Init+0x2fc>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d016      	beq.n	8000b64 <GPIO_Init+0x198>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a64      	ldr	r2, [pc, #400]	@ (8000ccc <GPIO_Init+0x300>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d00f      	beq.n	8000b60 <GPIO_Init+0x194>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a62      	ldr	r2, [pc, #392]	@ (8000cd0 <GPIO_Init+0x304>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d008      	beq.n	8000b5c <GPIO_Init+0x190>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a61      	ldr	r2, [pc, #388]	@ (8000cd4 <GPIO_Init+0x308>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d101      	bne.n	8000b58 <GPIO_Init+0x18c>
 8000b54:	2308      	movs	r3, #8
 8000b56:	e010      	b.n	8000b7a <GPIO_Init+0x1ae>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e00e      	b.n	8000b7a <GPIO_Init+0x1ae>
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	e00c      	b.n	8000b7a <GPIO_Init+0x1ae>
 8000b60:	2306      	movs	r3, #6
 8000b62:	e00a      	b.n	8000b7a <GPIO_Init+0x1ae>
 8000b64:	2305      	movs	r3, #5
 8000b66:	e008      	b.n	8000b7a <GPIO_Init+0x1ae>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e006      	b.n	8000b7a <GPIO_Init+0x1ae>
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e004      	b.n	8000b7a <GPIO_Init+0x1ae>
 8000b70:	2302      	movs	r3, #2
 8000b72:	e002      	b.n	8000b7a <GPIO_Init+0x1ae>
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <GPIO_Init+0x1ae>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	74fb      	strb	r3, [r7, #19]
		SYSCFG_CLK_EN();
 8000b7c:	4b56      	ldr	r3, [pc, #344]	@ (8000cd8 <GPIO_Init+0x30c>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b80:	4a55      	ldr	r2, [pc, #340]	@ (8000cd8 <GPIO_Init+0x30c>)
 8000b82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b86:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp] |= (portcode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4));
 8000b88:	4a54      	ldr	r2, [pc, #336]	@ (8000cdc <GPIO_Init+0x310>)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b92:	7cfb      	ldrb	r3, [r7, #19]
 8000b94:	4951      	ldr	r1, [pc, #324]	@ (8000cdc <GPIO_Init+0x310>)
 8000b96:	431a      	orrs	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000ba0:	4b43      	ldr	r3, [pc, #268]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	7912      	ldrb	r2, [r2, #4]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	2201      	movs	r2, #1
 8000bac:	408a      	lsls	r2, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4a3f      	ldr	r2, [pc, #252]	@ (8000cb0 <GPIO_Init+0x2e4>)
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	6013      	str	r3, [r2, #0]

	}

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	799b      	ldrb	r3, [r3, #6]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	791b      	ldrb	r3, [r3, #4]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	791b      	ldrb	r3, [r3, #4]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	4619      	mov	r1, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	400a      	ands	r2, r1
 8000be4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6899      	ldr	r1, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	609a      	str	r2, [r3, #8]

	// 3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	79db      	ldrb	r3, [r3, #7]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	791b      	ldrb	r3, [r3, #4]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	791b      	ldrb	r3, [r3, #4]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2103      	movs	r1, #3
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	400a      	ands	r2, r1
 8000c24:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68d9      	ldr	r1, [r3, #12]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	60da      	str	r2, [r3, #12]

	// 4. Conigure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7a1b      	ldrb	r3, [r3, #8]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	791b      	ldrb	r3, [r3, #4]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	791b      	ldrb	r3, [r3, #4]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	400a      	ands	r2, r1
 8000c62:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6859      	ldr	r1, [r3, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	605a      	str	r2, [r3, #4]

	// 5. configure the alt function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	795b      	ldrb	r3, [r3, #5]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d139      	bne.n	8000cf0 <GPIO_Init+0x324>
	{
		uint32_t pinpos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	f003 0307 	and.w	r3, r3, #7
 8000c84:	60fb      	str	r3, [r7, #12]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pinpos));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7a5b      	ldrb	r3, [r3, #9]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_7)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	791b      	ldrb	r3, [r3, #4]
 8000c9a:	2b07      	cmp	r3, #7
 8000c9c:	d820      	bhi.n	8000ce0 <GPIO_Init+0x314>
		{
			// use AFL

			pGPIOHandle->pGPIOx->AFRL |= temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6a19      	ldr	r1, [r3, #32]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	430a      	orrs	r2, r1
 8000cac:	621a      	str	r2, [r3, #32]
		{
			// use AFH
			pGPIOHandle->pGPIOx->AFRH |= temp;
		}
	}
}
 8000cae:	e01f      	b.n	8000cf0 <GPIO_Init+0x324>
 8000cb0:	40013c00 	.word	0x40013c00
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40020c00 	.word	0x40020c00
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40021400 	.word	0x40021400
 8000ccc:	40021800 	.word	0x40021800
 8000cd0:	40021c00 	.word	0x40021c00
 8000cd4:	40022000 	.word	0x40022000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <GPIO_IRQITConfig>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_IRQITConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71bb      	strb	r3, [r7, #6]
	// processor side configuration
	if(EnorDi == ENABLE)
 8000d08:	79bb      	ldrb	r3, [r7, #6]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d133      	bne.n	8000d76 <GPIO_IRQITConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b1f      	cmp	r3, #31
 8000d12:	d80a      	bhi.n	8000d2a <GPIO_IRQITConfig+0x32>
		{
			// program ISER1
			*NVIC_ISER0 |= (1<<IRQNumber);
 8000d14:	4b34      	ldr	r3, [pc, #208]	@ (8000de8 <GPIO_IRQITConfig+0xf0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	4611      	mov	r1, r2
 8000d22:	4a31      	ldr	r2, [pc, #196]	@ (8000de8 <GPIO_IRQITConfig+0xf0>)
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6013      	str	r3, [r2, #0]
		else if (IRQNumber >= 64 && IRQNumber <= 96)
		{
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
		}
	}
}
 8000d28:	e059      	b.n	8000dde <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber <=63)
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b1f      	cmp	r3, #31
 8000d2e:	d90f      	bls.n	8000d50 <GPIO_IRQITConfig+0x58>
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d34:	d80c      	bhi.n	8000d50 <GPIO_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1<<(IRQNumber%32));
 8000d36:	4b2d      	ldr	r3, [pc, #180]	@ (8000dec <GPIO_IRQITConfig+0xf4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	79fa      	ldrb	r2, [r7, #7]
 8000d3c:	f002 021f 	and.w	r2, r2, #31
 8000d40:	2101      	movs	r1, #1
 8000d42:	fa01 f202 	lsl.w	r2, r1, r2
 8000d46:	4611      	mov	r1, r2
 8000d48:	4a28      	ldr	r2, [pc, #160]	@ (8000dec <GPIO_IRQITConfig+0xf4>)
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e046      	b.n	8000dde <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber <= 96)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d54:	d943      	bls.n	8000dde <GPIO_IRQITConfig+0xe6>
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b60      	cmp	r3, #96	@ 0x60
 8000d5a:	d840      	bhi.n	8000dde <GPIO_IRQITConfig+0xe6>
			*NVIC_ISER2 |= (1<<(IRQNumber%64));
 8000d5c:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <GPIO_IRQITConfig+0xf8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	79fa      	ldrb	r2, [r7, #7]
 8000d62:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4a20      	ldr	r2, [pc, #128]	@ (8000df0 <GPIO_IRQITConfig+0xf8>)
 8000d70:	430b      	orrs	r3, r1
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	e033      	b.n	8000dde <GPIO_IRQITConfig+0xe6>
		if(IRQNumber <= 31)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b1f      	cmp	r3, #31
 8000d7a:	d80a      	bhi.n	8000d92 <GPIO_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1<<IRQNumber);
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <GPIO_IRQITConfig+0xfc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	79fa      	ldrb	r2, [r7, #7]
 8000d82:	2101      	movs	r1, #1
 8000d84:	fa01 f202 	lsl.w	r2, r1, r2
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000df4 <GPIO_IRQITConfig+0xfc>)
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	e025      	b.n	8000dde <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber <=63)
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b1f      	cmp	r3, #31
 8000d96:	d90f      	bls.n	8000db8 <GPIO_IRQITConfig+0xc0>
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d9c:	d80c      	bhi.n	8000db8 <GPIO_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1<<(IRQNumber%32));
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <GPIO_IRQITConfig+0x100>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	f002 021f 	and.w	r2, r2, #31
 8000da8:	2101      	movs	r1, #1
 8000daa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dae:	4611      	mov	r1, r2
 8000db0:	4a11      	ldr	r2, [pc, #68]	@ (8000df8 <GPIO_IRQITConfig+0x100>)
 8000db2:	430b      	orrs	r3, r1
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e012      	b.n	8000dde <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber <= 96)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dbc:	d90f      	bls.n	8000dde <GPIO_IRQITConfig+0xe6>
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b60      	cmp	r3, #96	@ 0x60
 8000dc2:	d80c      	bhi.n	8000dde <GPIO_IRQITConfig+0xe6>
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <GPIO_IRQITConfig+0x104>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	79fa      	ldrb	r2, [r7, #7]
 8000dca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4a09      	ldr	r2, [pc, #36]	@ (8000dfc <GPIO_IRQITConfig+0x104>)
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	e7ff      	b.n	8000dde <GPIO_IRQITConfig+0xe6>
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000e104 	.word	0xe000e104
 8000df0:	e000e108 	.word	0xe000e108
 8000df4:	e000e180 	.word	0xe000e180
 8000df8:	e000e184 	.word	0xe000e184
 8000dfc:	e000e188 	.word	0xe000e188

08000e00 <GPIO_IRQHandling>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	// clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & (1<<PinNumber))
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <GPIO_IRQHandling+0x3c>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	2101      	movs	r1, #1
 8000e12:	fa01 f202 	lsl.w	r2, r1, r2
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d009      	beq.n	8000e30 <GPIO_IRQHandling+0x30>
	{
		// the interrupt is pended so we clear the register bit
		EXTI->PR |= (1 << PinNumber);
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <GPIO_IRQHandling+0x3c>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	2101      	movs	r1, #1
 8000e24:	fa01 f202 	lsl.w	r2, r1, r2
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <GPIO_IRQHandling+0x3c>)
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	6153      	str	r3, [r2, #20]
	}
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40013c00 	.word	0x40013c00

08000e40 <std>:
 8000e40:	2300      	movs	r3, #0
 8000e42:	b510      	push	{r4, lr}
 8000e44:	4604      	mov	r4, r0
 8000e46:	e9c0 3300 	strd	r3, r3, [r0]
 8000e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e4e:	6083      	str	r3, [r0, #8]
 8000e50:	8181      	strh	r1, [r0, #12]
 8000e52:	6643      	str	r3, [r0, #100]	@ 0x64
 8000e54:	81c2      	strh	r2, [r0, #14]
 8000e56:	6183      	str	r3, [r0, #24]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	305c      	adds	r0, #92	@ 0x5c
 8000e5e:	f000 f906 	bl	800106e <memset>
 8000e62:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <std+0x58>)
 8000e64:	6263      	str	r3, [r4, #36]	@ 0x24
 8000e66:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <std+0x5c>)
 8000e68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <std+0x60>)
 8000e6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <std+0x64>)
 8000e70:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <std+0x68>)
 8000e74:	6224      	str	r4, [r4, #32]
 8000e76:	429c      	cmp	r4, r3
 8000e78:	d006      	beq.n	8000e88 <std+0x48>
 8000e7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000e7e:	4294      	cmp	r4, r2
 8000e80:	d002      	beq.n	8000e88 <std+0x48>
 8000e82:	33d0      	adds	r3, #208	@ 0xd0
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d105      	bne.n	8000e94 <std+0x54>
 8000e88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e90:	f000 b966 	b.w	8001160 <__retarget_lock_init_recursive>
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	08000fe9 	.word	0x08000fe9
 8000e9c:	0800100b 	.word	0x0800100b
 8000ea0:	08001043 	.word	0x08001043
 8000ea4:	08001067 	.word	0x08001067
 8000ea8:	20000490 	.word	0x20000490

08000eac <stdio_exit_handler>:
 8000eac:	4a02      	ldr	r2, [pc, #8]	@ (8000eb8 <stdio_exit_handler+0xc>)
 8000eae:	4903      	ldr	r1, [pc, #12]	@ (8000ebc <stdio_exit_handler+0x10>)
 8000eb0:	4803      	ldr	r0, [pc, #12]	@ (8000ec0 <stdio_exit_handler+0x14>)
 8000eb2:	f000 b869 	b.w	8000f88 <_fwalk_sglue>
 8000eb6:	bf00      	nop
 8000eb8:	20000004 	.word	0x20000004
 8000ebc:	080019f5 	.word	0x080019f5
 8000ec0:	20000014 	.word	0x20000014

08000ec4 <cleanup_stdio>:
 8000ec4:	6841      	ldr	r1, [r0, #4]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <cleanup_stdio+0x34>)
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	b510      	push	{r4, lr}
 8000ecc:	4604      	mov	r4, r0
 8000ece:	d001      	beq.n	8000ed4 <cleanup_stdio+0x10>
 8000ed0:	f000 fd90 	bl	80019f4 <_fflush_r>
 8000ed4:	68a1      	ldr	r1, [r4, #8]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <cleanup_stdio+0x38>)
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	d002      	beq.n	8000ee2 <cleanup_stdio+0x1e>
 8000edc:	4620      	mov	r0, r4
 8000ede:	f000 fd89 	bl	80019f4 <_fflush_r>
 8000ee2:	68e1      	ldr	r1, [r4, #12]
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <cleanup_stdio+0x3c>)
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	d004      	beq.n	8000ef4 <cleanup_stdio+0x30>
 8000eea:	4620      	mov	r0, r4
 8000eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ef0:	f000 bd80 	b.w	80019f4 <_fflush_r>
 8000ef4:	bd10      	pop	{r4, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000490 	.word	0x20000490
 8000efc:	200004f8 	.word	0x200004f8
 8000f00:	20000560 	.word	0x20000560

08000f04 <global_stdio_init.part.0>:
 8000f04:	b510      	push	{r4, lr}
 8000f06:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <global_stdio_init.part.0+0x30>)
 8000f08:	4c0b      	ldr	r4, [pc, #44]	@ (8000f38 <global_stdio_init.part.0+0x34>)
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f3c <global_stdio_init.part.0+0x38>)
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	4620      	mov	r0, r4
 8000f10:	2200      	movs	r2, #0
 8000f12:	2104      	movs	r1, #4
 8000f14:	f7ff ff94 	bl	8000e40 <std>
 8000f18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2109      	movs	r1, #9
 8000f20:	f7ff ff8e 	bl	8000e40 <std>
 8000f24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f28:	2202      	movs	r2, #2
 8000f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f2e:	2112      	movs	r1, #18
 8000f30:	f7ff bf86 	b.w	8000e40 <std>
 8000f34:	200005c8 	.word	0x200005c8
 8000f38:	20000490 	.word	0x20000490
 8000f3c:	08000ead 	.word	0x08000ead

08000f40 <__sfp_lock_acquire>:
 8000f40:	4801      	ldr	r0, [pc, #4]	@ (8000f48 <__sfp_lock_acquire+0x8>)
 8000f42:	f000 b90e 	b.w	8001162 <__retarget_lock_acquire_recursive>
 8000f46:	bf00      	nop
 8000f48:	200005d1 	.word	0x200005d1

08000f4c <__sfp_lock_release>:
 8000f4c:	4801      	ldr	r0, [pc, #4]	@ (8000f54 <__sfp_lock_release+0x8>)
 8000f4e:	f000 b909 	b.w	8001164 <__retarget_lock_release_recursive>
 8000f52:	bf00      	nop
 8000f54:	200005d1 	.word	0x200005d1

08000f58 <__sinit>:
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	f7ff fff0 	bl	8000f40 <__sfp_lock_acquire>
 8000f60:	6a23      	ldr	r3, [r4, #32]
 8000f62:	b11b      	cbz	r3, 8000f6c <__sinit+0x14>
 8000f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f68:	f7ff bff0 	b.w	8000f4c <__sfp_lock_release>
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <__sinit+0x28>)
 8000f6e:	6223      	str	r3, [r4, #32]
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <__sinit+0x2c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f5      	bne.n	8000f64 <__sinit+0xc>
 8000f78:	f7ff ffc4 	bl	8000f04 <global_stdio_init.part.0>
 8000f7c:	e7f2      	b.n	8000f64 <__sinit+0xc>
 8000f7e:	bf00      	nop
 8000f80:	08000ec5 	.word	0x08000ec5
 8000f84:	200005c8 	.word	0x200005c8

08000f88 <_fwalk_sglue>:
 8000f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f8c:	4607      	mov	r7, r0
 8000f8e:	4688      	mov	r8, r1
 8000f90:	4614      	mov	r4, r2
 8000f92:	2600      	movs	r6, #0
 8000f94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f98:	f1b9 0901 	subs.w	r9, r9, #1
 8000f9c:	d505      	bpl.n	8000faa <_fwalk_sglue+0x22>
 8000f9e:	6824      	ldr	r4, [r4, #0]
 8000fa0:	2c00      	cmp	r4, #0
 8000fa2:	d1f7      	bne.n	8000f94 <_fwalk_sglue+0xc>
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000faa:	89ab      	ldrh	r3, [r5, #12]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d907      	bls.n	8000fc0 <_fwalk_sglue+0x38>
 8000fb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	d003      	beq.n	8000fc0 <_fwalk_sglue+0x38>
 8000fb8:	4629      	mov	r1, r5
 8000fba:	4638      	mov	r0, r7
 8000fbc:	47c0      	blx	r8
 8000fbe:	4306      	orrs	r6, r0
 8000fc0:	3568      	adds	r5, #104	@ 0x68
 8000fc2:	e7e9      	b.n	8000f98 <_fwalk_sglue+0x10>

08000fc4 <iprintf>:
 8000fc4:	b40f      	push	{r0, r1, r2, r3}
 8000fc6:	b507      	push	{r0, r1, r2, lr}
 8000fc8:	4906      	ldr	r1, [pc, #24]	@ (8000fe4 <iprintf+0x20>)
 8000fca:	ab04      	add	r3, sp, #16
 8000fcc:	6808      	ldr	r0, [r1, #0]
 8000fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8000fd2:	6881      	ldr	r1, [r0, #8]
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f000 f9e7 	bl	80013a8 <_vfiprintf_r>
 8000fda:	b003      	add	sp, #12
 8000fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000fe0:	b004      	add	sp, #16
 8000fe2:	4770      	bx	lr
 8000fe4:	20000010 	.word	0x20000010

08000fe8 <__sread>:
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	460c      	mov	r4, r1
 8000fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff0:	f000 f868 	bl	80010c4 <_read_r>
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	bfab      	itete	ge
 8000ff8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8000ffc:	181b      	addge	r3, r3, r0
 8000ffe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001002:	bfac      	ite	ge
 8001004:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001006:	81a3      	strhlt	r3, [r4, #12]
 8001008:	bd10      	pop	{r4, pc}

0800100a <__swrite>:
 800100a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800100e:	461f      	mov	r7, r3
 8001010:	898b      	ldrh	r3, [r1, #12]
 8001012:	05db      	lsls	r3, r3, #23
 8001014:	4605      	mov	r5, r0
 8001016:	460c      	mov	r4, r1
 8001018:	4616      	mov	r6, r2
 800101a:	d505      	bpl.n	8001028 <__swrite+0x1e>
 800101c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001020:	2302      	movs	r3, #2
 8001022:	2200      	movs	r2, #0
 8001024:	f000 f83c 	bl	80010a0 <_lseek_r>
 8001028:	89a3      	ldrh	r3, [r4, #12]
 800102a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800102e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001032:	81a3      	strh	r3, [r4, #12]
 8001034:	4632      	mov	r2, r6
 8001036:	463b      	mov	r3, r7
 8001038:	4628      	mov	r0, r5
 800103a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800103e:	f000 b853 	b.w	80010e8 <_write_r>

08001042 <__sseek>:
 8001042:	b510      	push	{r4, lr}
 8001044:	460c      	mov	r4, r1
 8001046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800104a:	f000 f829 	bl	80010a0 <_lseek_r>
 800104e:	1c43      	adds	r3, r0, #1
 8001050:	89a3      	ldrh	r3, [r4, #12]
 8001052:	bf15      	itete	ne
 8001054:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001056:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800105a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800105e:	81a3      	strheq	r3, [r4, #12]
 8001060:	bf18      	it	ne
 8001062:	81a3      	strhne	r3, [r4, #12]
 8001064:	bd10      	pop	{r4, pc}

08001066 <__sclose>:
 8001066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800106a:	f000 b809 	b.w	8001080 <_close_r>

0800106e <memset>:
 800106e:	4402      	add	r2, r0
 8001070:	4603      	mov	r3, r0
 8001072:	4293      	cmp	r3, r2
 8001074:	d100      	bne.n	8001078 <memset+0xa>
 8001076:	4770      	bx	lr
 8001078:	f803 1b01 	strb.w	r1, [r3], #1
 800107c:	e7f9      	b.n	8001072 <memset+0x4>
	...

08001080 <_close_r>:
 8001080:	b538      	push	{r3, r4, r5, lr}
 8001082:	4d06      	ldr	r5, [pc, #24]	@ (800109c <_close_r+0x1c>)
 8001084:	2300      	movs	r3, #0
 8001086:	4604      	mov	r4, r0
 8001088:	4608      	mov	r0, r1
 800108a:	602b      	str	r3, [r5, #0]
 800108c:	f7ff f9d3 	bl	8000436 <_close>
 8001090:	1c43      	adds	r3, r0, #1
 8001092:	d102      	bne.n	800109a <_close_r+0x1a>
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	b103      	cbz	r3, 800109a <_close_r+0x1a>
 8001098:	6023      	str	r3, [r4, #0]
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	200005cc 	.word	0x200005cc

080010a0 <_lseek_r>:
 80010a0:	b538      	push	{r3, r4, r5, lr}
 80010a2:	4d07      	ldr	r5, [pc, #28]	@ (80010c0 <_lseek_r+0x20>)
 80010a4:	4604      	mov	r4, r0
 80010a6:	4608      	mov	r0, r1
 80010a8:	4611      	mov	r1, r2
 80010aa:	2200      	movs	r2, #0
 80010ac:	602a      	str	r2, [r5, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	f7ff f9e5 	bl	800047e <_lseek>
 80010b4:	1c43      	adds	r3, r0, #1
 80010b6:	d102      	bne.n	80010be <_lseek_r+0x1e>
 80010b8:	682b      	ldr	r3, [r5, #0]
 80010ba:	b103      	cbz	r3, 80010be <_lseek_r+0x1e>
 80010bc:	6023      	str	r3, [r4, #0]
 80010be:	bd38      	pop	{r3, r4, r5, pc}
 80010c0:	200005cc 	.word	0x200005cc

080010c4 <_read_r>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	4d07      	ldr	r5, [pc, #28]	@ (80010e4 <_read_r+0x20>)
 80010c8:	4604      	mov	r4, r0
 80010ca:	4608      	mov	r0, r1
 80010cc:	4611      	mov	r1, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	602a      	str	r2, [r5, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f7ff f976 	bl	80003c4 <_read>
 80010d8:	1c43      	adds	r3, r0, #1
 80010da:	d102      	bne.n	80010e2 <_read_r+0x1e>
 80010dc:	682b      	ldr	r3, [r5, #0]
 80010de:	b103      	cbz	r3, 80010e2 <_read_r+0x1e>
 80010e0:	6023      	str	r3, [r4, #0]
 80010e2:	bd38      	pop	{r3, r4, r5, pc}
 80010e4:	200005cc 	.word	0x200005cc

080010e8 <_write_r>:
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	4d07      	ldr	r5, [pc, #28]	@ (8001108 <_write_r+0x20>)
 80010ec:	4604      	mov	r4, r0
 80010ee:	4608      	mov	r0, r1
 80010f0:	4611      	mov	r1, r2
 80010f2:	2200      	movs	r2, #0
 80010f4:	602a      	str	r2, [r5, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	f7ff f981 	bl	80003fe <_write>
 80010fc:	1c43      	adds	r3, r0, #1
 80010fe:	d102      	bne.n	8001106 <_write_r+0x1e>
 8001100:	682b      	ldr	r3, [r5, #0]
 8001102:	b103      	cbz	r3, 8001106 <_write_r+0x1e>
 8001104:	6023      	str	r3, [r4, #0]
 8001106:	bd38      	pop	{r3, r4, r5, pc}
 8001108:	200005cc 	.word	0x200005cc

0800110c <__errno>:
 800110c:	4b01      	ldr	r3, [pc, #4]	@ (8001114 <__errno+0x8>)
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000010 	.word	0x20000010

08001118 <__libc_init_array>:
 8001118:	b570      	push	{r4, r5, r6, lr}
 800111a:	4d0d      	ldr	r5, [pc, #52]	@ (8001150 <__libc_init_array+0x38>)
 800111c:	4c0d      	ldr	r4, [pc, #52]	@ (8001154 <__libc_init_array+0x3c>)
 800111e:	1b64      	subs	r4, r4, r5
 8001120:	10a4      	asrs	r4, r4, #2
 8001122:	2600      	movs	r6, #0
 8001124:	42a6      	cmp	r6, r4
 8001126:	d109      	bne.n	800113c <__libc_init_array+0x24>
 8001128:	4d0b      	ldr	r5, [pc, #44]	@ (8001158 <__libc_init_array+0x40>)
 800112a:	4c0c      	ldr	r4, [pc, #48]	@ (800115c <__libc_init_array+0x44>)
 800112c:	f000 fdb2 	bl	8001c94 <_init>
 8001130:	1b64      	subs	r4, r4, r5
 8001132:	10a4      	asrs	r4, r4, #2
 8001134:	2600      	movs	r6, #0
 8001136:	42a6      	cmp	r6, r4
 8001138:	d105      	bne.n	8001146 <__libc_init_array+0x2e>
 800113a:	bd70      	pop	{r4, r5, r6, pc}
 800113c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001140:	4798      	blx	r3
 8001142:	3601      	adds	r6, #1
 8001144:	e7ee      	b.n	8001124 <__libc_init_array+0xc>
 8001146:	f855 3b04 	ldr.w	r3, [r5], #4
 800114a:	4798      	blx	r3
 800114c:	3601      	adds	r6, #1
 800114e:	e7f2      	b.n	8001136 <__libc_init_array+0x1e>
 8001150:	08001cfc 	.word	0x08001cfc
 8001154:	08001cfc 	.word	0x08001cfc
 8001158:	08001cfc 	.word	0x08001cfc
 800115c:	08001d00 	.word	0x08001d00

08001160 <__retarget_lock_init_recursive>:
 8001160:	4770      	bx	lr

08001162 <__retarget_lock_acquire_recursive>:
 8001162:	4770      	bx	lr

08001164 <__retarget_lock_release_recursive>:
 8001164:	4770      	bx	lr
	...

08001168 <_free_r>:
 8001168:	b538      	push	{r3, r4, r5, lr}
 800116a:	4605      	mov	r5, r0
 800116c:	2900      	cmp	r1, #0
 800116e:	d041      	beq.n	80011f4 <_free_r+0x8c>
 8001170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001174:	1f0c      	subs	r4, r1, #4
 8001176:	2b00      	cmp	r3, #0
 8001178:	bfb8      	it	lt
 800117a:	18e4      	addlt	r4, r4, r3
 800117c:	f000 f8e0 	bl	8001340 <__malloc_lock>
 8001180:	4a1d      	ldr	r2, [pc, #116]	@ (80011f8 <_free_r+0x90>)
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	b933      	cbnz	r3, 8001194 <_free_r+0x2c>
 8001186:	6063      	str	r3, [r4, #4]
 8001188:	6014      	str	r4, [r2, #0]
 800118a:	4628      	mov	r0, r5
 800118c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001190:	f000 b8dc 	b.w	800134c <__malloc_unlock>
 8001194:	42a3      	cmp	r3, r4
 8001196:	d908      	bls.n	80011aa <_free_r+0x42>
 8001198:	6820      	ldr	r0, [r4, #0]
 800119a:	1821      	adds	r1, r4, r0
 800119c:	428b      	cmp	r3, r1
 800119e:	bf01      	itttt	eq
 80011a0:	6819      	ldreq	r1, [r3, #0]
 80011a2:	685b      	ldreq	r3, [r3, #4]
 80011a4:	1809      	addeq	r1, r1, r0
 80011a6:	6021      	streq	r1, [r4, #0]
 80011a8:	e7ed      	b.n	8001186 <_free_r+0x1e>
 80011aa:	461a      	mov	r2, r3
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	b10b      	cbz	r3, 80011b4 <_free_r+0x4c>
 80011b0:	42a3      	cmp	r3, r4
 80011b2:	d9fa      	bls.n	80011aa <_free_r+0x42>
 80011b4:	6811      	ldr	r1, [r2, #0]
 80011b6:	1850      	adds	r0, r2, r1
 80011b8:	42a0      	cmp	r0, r4
 80011ba:	d10b      	bne.n	80011d4 <_free_r+0x6c>
 80011bc:	6820      	ldr	r0, [r4, #0]
 80011be:	4401      	add	r1, r0
 80011c0:	1850      	adds	r0, r2, r1
 80011c2:	4283      	cmp	r3, r0
 80011c4:	6011      	str	r1, [r2, #0]
 80011c6:	d1e0      	bne.n	800118a <_free_r+0x22>
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	6053      	str	r3, [r2, #4]
 80011ce:	4408      	add	r0, r1
 80011d0:	6010      	str	r0, [r2, #0]
 80011d2:	e7da      	b.n	800118a <_free_r+0x22>
 80011d4:	d902      	bls.n	80011dc <_free_r+0x74>
 80011d6:	230c      	movs	r3, #12
 80011d8:	602b      	str	r3, [r5, #0]
 80011da:	e7d6      	b.n	800118a <_free_r+0x22>
 80011dc:	6820      	ldr	r0, [r4, #0]
 80011de:	1821      	adds	r1, r4, r0
 80011e0:	428b      	cmp	r3, r1
 80011e2:	bf04      	itt	eq
 80011e4:	6819      	ldreq	r1, [r3, #0]
 80011e6:	685b      	ldreq	r3, [r3, #4]
 80011e8:	6063      	str	r3, [r4, #4]
 80011ea:	bf04      	itt	eq
 80011ec:	1809      	addeq	r1, r1, r0
 80011ee:	6021      	streq	r1, [r4, #0]
 80011f0:	6054      	str	r4, [r2, #4]
 80011f2:	e7ca      	b.n	800118a <_free_r+0x22>
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop
 80011f8:	200005d8 	.word	0x200005d8

080011fc <sbrk_aligned>:
 80011fc:	b570      	push	{r4, r5, r6, lr}
 80011fe:	4e0f      	ldr	r6, [pc, #60]	@ (800123c <sbrk_aligned+0x40>)
 8001200:	460c      	mov	r4, r1
 8001202:	6831      	ldr	r1, [r6, #0]
 8001204:	4605      	mov	r5, r0
 8001206:	b911      	cbnz	r1, 800120e <sbrk_aligned+0x12>
 8001208:	f000 fcb0 	bl	8001b6c <_sbrk_r>
 800120c:	6030      	str	r0, [r6, #0]
 800120e:	4621      	mov	r1, r4
 8001210:	4628      	mov	r0, r5
 8001212:	f000 fcab 	bl	8001b6c <_sbrk_r>
 8001216:	1c43      	adds	r3, r0, #1
 8001218:	d103      	bne.n	8001222 <sbrk_aligned+0x26>
 800121a:	f04f 34ff 	mov.w	r4, #4294967295
 800121e:	4620      	mov	r0, r4
 8001220:	bd70      	pop	{r4, r5, r6, pc}
 8001222:	1cc4      	adds	r4, r0, #3
 8001224:	f024 0403 	bic.w	r4, r4, #3
 8001228:	42a0      	cmp	r0, r4
 800122a:	d0f8      	beq.n	800121e <sbrk_aligned+0x22>
 800122c:	1a21      	subs	r1, r4, r0
 800122e:	4628      	mov	r0, r5
 8001230:	f000 fc9c 	bl	8001b6c <_sbrk_r>
 8001234:	3001      	adds	r0, #1
 8001236:	d1f2      	bne.n	800121e <sbrk_aligned+0x22>
 8001238:	e7ef      	b.n	800121a <sbrk_aligned+0x1e>
 800123a:	bf00      	nop
 800123c:	200005d4 	.word	0x200005d4

08001240 <_malloc_r>:
 8001240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001244:	1ccd      	adds	r5, r1, #3
 8001246:	f025 0503 	bic.w	r5, r5, #3
 800124a:	3508      	adds	r5, #8
 800124c:	2d0c      	cmp	r5, #12
 800124e:	bf38      	it	cc
 8001250:	250c      	movcc	r5, #12
 8001252:	2d00      	cmp	r5, #0
 8001254:	4606      	mov	r6, r0
 8001256:	db01      	blt.n	800125c <_malloc_r+0x1c>
 8001258:	42a9      	cmp	r1, r5
 800125a:	d904      	bls.n	8001266 <_malloc_r+0x26>
 800125c:	230c      	movs	r3, #12
 800125e:	6033      	str	r3, [r6, #0]
 8001260:	2000      	movs	r0, #0
 8001262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001266:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800133c <_malloc_r+0xfc>
 800126a:	f000 f869 	bl	8001340 <__malloc_lock>
 800126e:	f8d8 3000 	ldr.w	r3, [r8]
 8001272:	461c      	mov	r4, r3
 8001274:	bb44      	cbnz	r4, 80012c8 <_malloc_r+0x88>
 8001276:	4629      	mov	r1, r5
 8001278:	4630      	mov	r0, r6
 800127a:	f7ff ffbf 	bl	80011fc <sbrk_aligned>
 800127e:	1c43      	adds	r3, r0, #1
 8001280:	4604      	mov	r4, r0
 8001282:	d158      	bne.n	8001336 <_malloc_r+0xf6>
 8001284:	f8d8 4000 	ldr.w	r4, [r8]
 8001288:	4627      	mov	r7, r4
 800128a:	2f00      	cmp	r7, #0
 800128c:	d143      	bne.n	8001316 <_malloc_r+0xd6>
 800128e:	2c00      	cmp	r4, #0
 8001290:	d04b      	beq.n	800132a <_malloc_r+0xea>
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	4639      	mov	r1, r7
 8001296:	4630      	mov	r0, r6
 8001298:	eb04 0903 	add.w	r9, r4, r3
 800129c:	f000 fc66 	bl	8001b6c <_sbrk_r>
 80012a0:	4581      	cmp	r9, r0
 80012a2:	d142      	bne.n	800132a <_malloc_r+0xea>
 80012a4:	6821      	ldr	r1, [r4, #0]
 80012a6:	1a6d      	subs	r5, r5, r1
 80012a8:	4629      	mov	r1, r5
 80012aa:	4630      	mov	r0, r6
 80012ac:	f7ff ffa6 	bl	80011fc <sbrk_aligned>
 80012b0:	3001      	adds	r0, #1
 80012b2:	d03a      	beq.n	800132a <_malloc_r+0xea>
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	442b      	add	r3, r5
 80012b8:	6023      	str	r3, [r4, #0]
 80012ba:	f8d8 3000 	ldr.w	r3, [r8]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	bb62      	cbnz	r2, 800131c <_malloc_r+0xdc>
 80012c2:	f8c8 7000 	str.w	r7, [r8]
 80012c6:	e00f      	b.n	80012e8 <_malloc_r+0xa8>
 80012c8:	6822      	ldr	r2, [r4, #0]
 80012ca:	1b52      	subs	r2, r2, r5
 80012cc:	d420      	bmi.n	8001310 <_malloc_r+0xd0>
 80012ce:	2a0b      	cmp	r2, #11
 80012d0:	d917      	bls.n	8001302 <_malloc_r+0xc2>
 80012d2:	1961      	adds	r1, r4, r5
 80012d4:	42a3      	cmp	r3, r4
 80012d6:	6025      	str	r5, [r4, #0]
 80012d8:	bf18      	it	ne
 80012da:	6059      	strne	r1, [r3, #4]
 80012dc:	6863      	ldr	r3, [r4, #4]
 80012de:	bf08      	it	eq
 80012e0:	f8c8 1000 	streq.w	r1, [r8]
 80012e4:	5162      	str	r2, [r4, r5]
 80012e6:	604b      	str	r3, [r1, #4]
 80012e8:	4630      	mov	r0, r6
 80012ea:	f000 f82f 	bl	800134c <__malloc_unlock>
 80012ee:	f104 000b 	add.w	r0, r4, #11
 80012f2:	1d23      	adds	r3, r4, #4
 80012f4:	f020 0007 	bic.w	r0, r0, #7
 80012f8:	1ac2      	subs	r2, r0, r3
 80012fa:	bf1c      	itt	ne
 80012fc:	1a1b      	subne	r3, r3, r0
 80012fe:	50a3      	strne	r3, [r4, r2]
 8001300:	e7af      	b.n	8001262 <_malloc_r+0x22>
 8001302:	6862      	ldr	r2, [r4, #4]
 8001304:	42a3      	cmp	r3, r4
 8001306:	bf0c      	ite	eq
 8001308:	f8c8 2000 	streq.w	r2, [r8]
 800130c:	605a      	strne	r2, [r3, #4]
 800130e:	e7eb      	b.n	80012e8 <_malloc_r+0xa8>
 8001310:	4623      	mov	r3, r4
 8001312:	6864      	ldr	r4, [r4, #4]
 8001314:	e7ae      	b.n	8001274 <_malloc_r+0x34>
 8001316:	463c      	mov	r4, r7
 8001318:	687f      	ldr	r7, [r7, #4]
 800131a:	e7b6      	b.n	800128a <_malloc_r+0x4a>
 800131c:	461a      	mov	r2, r3
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	42a3      	cmp	r3, r4
 8001322:	d1fb      	bne.n	800131c <_malloc_r+0xdc>
 8001324:	2300      	movs	r3, #0
 8001326:	6053      	str	r3, [r2, #4]
 8001328:	e7de      	b.n	80012e8 <_malloc_r+0xa8>
 800132a:	230c      	movs	r3, #12
 800132c:	6033      	str	r3, [r6, #0]
 800132e:	4630      	mov	r0, r6
 8001330:	f000 f80c 	bl	800134c <__malloc_unlock>
 8001334:	e794      	b.n	8001260 <_malloc_r+0x20>
 8001336:	6005      	str	r5, [r0, #0]
 8001338:	e7d6      	b.n	80012e8 <_malloc_r+0xa8>
 800133a:	bf00      	nop
 800133c:	200005d8 	.word	0x200005d8

08001340 <__malloc_lock>:
 8001340:	4801      	ldr	r0, [pc, #4]	@ (8001348 <__malloc_lock+0x8>)
 8001342:	f7ff bf0e 	b.w	8001162 <__retarget_lock_acquire_recursive>
 8001346:	bf00      	nop
 8001348:	200005d0 	.word	0x200005d0

0800134c <__malloc_unlock>:
 800134c:	4801      	ldr	r0, [pc, #4]	@ (8001354 <__malloc_unlock+0x8>)
 800134e:	f7ff bf09 	b.w	8001164 <__retarget_lock_release_recursive>
 8001352:	bf00      	nop
 8001354:	200005d0 	.word	0x200005d0

08001358 <__sfputc_r>:
 8001358:	6893      	ldr	r3, [r2, #8]
 800135a:	3b01      	subs	r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	b410      	push	{r4}
 8001360:	6093      	str	r3, [r2, #8]
 8001362:	da07      	bge.n	8001374 <__sfputc_r+0x1c>
 8001364:	6994      	ldr	r4, [r2, #24]
 8001366:	42a3      	cmp	r3, r4
 8001368:	db01      	blt.n	800136e <__sfputc_r+0x16>
 800136a:	290a      	cmp	r1, #10
 800136c:	d102      	bne.n	8001374 <__sfputc_r+0x1c>
 800136e:	bc10      	pop	{r4}
 8001370:	f000 bb68 	b.w	8001a44 <__swbuf_r>
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	1c58      	adds	r0, r3, #1
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	7019      	strb	r1, [r3, #0]
 800137c:	4608      	mov	r0, r1
 800137e:	bc10      	pop	{r4}
 8001380:	4770      	bx	lr

08001382 <__sfputs_r>:
 8001382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001384:	4606      	mov	r6, r0
 8001386:	460f      	mov	r7, r1
 8001388:	4614      	mov	r4, r2
 800138a:	18d5      	adds	r5, r2, r3
 800138c:	42ac      	cmp	r4, r5
 800138e:	d101      	bne.n	8001394 <__sfputs_r+0x12>
 8001390:	2000      	movs	r0, #0
 8001392:	e007      	b.n	80013a4 <__sfputs_r+0x22>
 8001394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001398:	463a      	mov	r2, r7
 800139a:	4630      	mov	r0, r6
 800139c:	f7ff ffdc 	bl	8001358 <__sfputc_r>
 80013a0:	1c43      	adds	r3, r0, #1
 80013a2:	d1f3      	bne.n	800138c <__sfputs_r+0xa>
 80013a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080013a8 <_vfiprintf_r>:
 80013a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013ac:	460d      	mov	r5, r1
 80013ae:	b09d      	sub	sp, #116	@ 0x74
 80013b0:	4614      	mov	r4, r2
 80013b2:	4698      	mov	r8, r3
 80013b4:	4606      	mov	r6, r0
 80013b6:	b118      	cbz	r0, 80013c0 <_vfiprintf_r+0x18>
 80013b8:	6a03      	ldr	r3, [r0, #32]
 80013ba:	b90b      	cbnz	r3, 80013c0 <_vfiprintf_r+0x18>
 80013bc:	f7ff fdcc 	bl	8000f58 <__sinit>
 80013c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80013c2:	07d9      	lsls	r1, r3, #31
 80013c4:	d405      	bmi.n	80013d2 <_vfiprintf_r+0x2a>
 80013c6:	89ab      	ldrh	r3, [r5, #12]
 80013c8:	059a      	lsls	r2, r3, #22
 80013ca:	d402      	bmi.n	80013d2 <_vfiprintf_r+0x2a>
 80013cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80013ce:	f7ff fec8 	bl	8001162 <__retarget_lock_acquire_recursive>
 80013d2:	89ab      	ldrh	r3, [r5, #12]
 80013d4:	071b      	lsls	r3, r3, #28
 80013d6:	d501      	bpl.n	80013dc <_vfiprintf_r+0x34>
 80013d8:	692b      	ldr	r3, [r5, #16]
 80013da:	b99b      	cbnz	r3, 8001404 <_vfiprintf_r+0x5c>
 80013dc:	4629      	mov	r1, r5
 80013de:	4630      	mov	r0, r6
 80013e0:	f000 fb6e 	bl	8001ac0 <__swsetup_r>
 80013e4:	b170      	cbz	r0, 8001404 <_vfiprintf_r+0x5c>
 80013e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80013e8:	07dc      	lsls	r4, r3, #31
 80013ea:	d504      	bpl.n	80013f6 <_vfiprintf_r+0x4e>
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	b01d      	add	sp, #116	@ 0x74
 80013f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013f6:	89ab      	ldrh	r3, [r5, #12]
 80013f8:	0598      	lsls	r0, r3, #22
 80013fa:	d4f7      	bmi.n	80013ec <_vfiprintf_r+0x44>
 80013fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80013fe:	f7ff feb1 	bl	8001164 <__retarget_lock_release_recursive>
 8001402:	e7f3      	b.n	80013ec <_vfiprintf_r+0x44>
 8001404:	2300      	movs	r3, #0
 8001406:	9309      	str	r3, [sp, #36]	@ 0x24
 8001408:	2320      	movs	r3, #32
 800140a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800140e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001412:	2330      	movs	r3, #48	@ 0x30
 8001414:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80015c4 <_vfiprintf_r+0x21c>
 8001418:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800141c:	f04f 0901 	mov.w	r9, #1
 8001420:	4623      	mov	r3, r4
 8001422:	469a      	mov	sl, r3
 8001424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001428:	b10a      	cbz	r2, 800142e <_vfiprintf_r+0x86>
 800142a:	2a25      	cmp	r2, #37	@ 0x25
 800142c:	d1f9      	bne.n	8001422 <_vfiprintf_r+0x7a>
 800142e:	ebba 0b04 	subs.w	fp, sl, r4
 8001432:	d00b      	beq.n	800144c <_vfiprintf_r+0xa4>
 8001434:	465b      	mov	r3, fp
 8001436:	4622      	mov	r2, r4
 8001438:	4629      	mov	r1, r5
 800143a:	4630      	mov	r0, r6
 800143c:	f7ff ffa1 	bl	8001382 <__sfputs_r>
 8001440:	3001      	adds	r0, #1
 8001442:	f000 80a7 	beq.w	8001594 <_vfiprintf_r+0x1ec>
 8001446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001448:	445a      	add	r2, fp
 800144a:	9209      	str	r2, [sp, #36]	@ 0x24
 800144c:	f89a 3000 	ldrb.w	r3, [sl]
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 809f 	beq.w	8001594 <_vfiprintf_r+0x1ec>
 8001456:	2300      	movs	r3, #0
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001460:	f10a 0a01 	add.w	sl, sl, #1
 8001464:	9304      	str	r3, [sp, #16]
 8001466:	9307      	str	r3, [sp, #28]
 8001468:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800146c:	931a      	str	r3, [sp, #104]	@ 0x68
 800146e:	4654      	mov	r4, sl
 8001470:	2205      	movs	r2, #5
 8001472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001476:	4853      	ldr	r0, [pc, #332]	@ (80015c4 <_vfiprintf_r+0x21c>)
 8001478:	f7fe feaa 	bl	80001d0 <memchr>
 800147c:	9a04      	ldr	r2, [sp, #16]
 800147e:	b9d8      	cbnz	r0, 80014b8 <_vfiprintf_r+0x110>
 8001480:	06d1      	lsls	r1, r2, #27
 8001482:	bf44      	itt	mi
 8001484:	2320      	movmi	r3, #32
 8001486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800148a:	0713      	lsls	r3, r2, #28
 800148c:	bf44      	itt	mi
 800148e:	232b      	movmi	r3, #43	@ 0x2b
 8001490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001494:	f89a 3000 	ldrb.w	r3, [sl]
 8001498:	2b2a      	cmp	r3, #42	@ 0x2a
 800149a:	d015      	beq.n	80014c8 <_vfiprintf_r+0x120>
 800149c:	9a07      	ldr	r2, [sp, #28]
 800149e:	4654      	mov	r4, sl
 80014a0:	2000      	movs	r0, #0
 80014a2:	f04f 0c0a 	mov.w	ip, #10
 80014a6:	4621      	mov	r1, r4
 80014a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014ac:	3b30      	subs	r3, #48	@ 0x30
 80014ae:	2b09      	cmp	r3, #9
 80014b0:	d94b      	bls.n	800154a <_vfiprintf_r+0x1a2>
 80014b2:	b1b0      	cbz	r0, 80014e2 <_vfiprintf_r+0x13a>
 80014b4:	9207      	str	r2, [sp, #28]
 80014b6:	e014      	b.n	80014e2 <_vfiprintf_r+0x13a>
 80014b8:	eba0 0308 	sub.w	r3, r0, r8
 80014bc:	fa09 f303 	lsl.w	r3, r9, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	9304      	str	r3, [sp, #16]
 80014c4:	46a2      	mov	sl, r4
 80014c6:	e7d2      	b.n	800146e <_vfiprintf_r+0xc6>
 80014c8:	9b03      	ldr	r3, [sp, #12]
 80014ca:	1d19      	adds	r1, r3, #4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	9103      	str	r1, [sp, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bfbb      	ittet	lt
 80014d4:	425b      	neglt	r3, r3
 80014d6:	f042 0202 	orrlt.w	r2, r2, #2
 80014da:	9307      	strge	r3, [sp, #28]
 80014dc:	9307      	strlt	r3, [sp, #28]
 80014de:	bfb8      	it	lt
 80014e0:	9204      	strlt	r2, [sp, #16]
 80014e2:	7823      	ldrb	r3, [r4, #0]
 80014e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80014e6:	d10a      	bne.n	80014fe <_vfiprintf_r+0x156>
 80014e8:	7863      	ldrb	r3, [r4, #1]
 80014ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80014ec:	d132      	bne.n	8001554 <_vfiprintf_r+0x1ac>
 80014ee:	9b03      	ldr	r3, [sp, #12]
 80014f0:	1d1a      	adds	r2, r3, #4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	9203      	str	r2, [sp, #12]
 80014f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80014fa:	3402      	adds	r4, #2
 80014fc:	9305      	str	r3, [sp, #20]
 80014fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80015c8 <_vfiprintf_r+0x220>
 8001502:	7821      	ldrb	r1, [r4, #0]
 8001504:	2203      	movs	r2, #3
 8001506:	4650      	mov	r0, sl
 8001508:	f7fe fe62 	bl	80001d0 <memchr>
 800150c:	b138      	cbz	r0, 800151e <_vfiprintf_r+0x176>
 800150e:	9b04      	ldr	r3, [sp, #16]
 8001510:	eba0 000a 	sub.w	r0, r0, sl
 8001514:	2240      	movs	r2, #64	@ 0x40
 8001516:	4082      	lsls	r2, r0
 8001518:	4313      	orrs	r3, r2
 800151a:	3401      	adds	r4, #1
 800151c:	9304      	str	r3, [sp, #16]
 800151e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001522:	482a      	ldr	r0, [pc, #168]	@ (80015cc <_vfiprintf_r+0x224>)
 8001524:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001528:	2206      	movs	r2, #6
 800152a:	f7fe fe51 	bl	80001d0 <memchr>
 800152e:	2800      	cmp	r0, #0
 8001530:	d03f      	beq.n	80015b2 <_vfiprintf_r+0x20a>
 8001532:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <_vfiprintf_r+0x228>)
 8001534:	bb1b      	cbnz	r3, 800157e <_vfiprintf_r+0x1d6>
 8001536:	9b03      	ldr	r3, [sp, #12]
 8001538:	3307      	adds	r3, #7
 800153a:	f023 0307 	bic.w	r3, r3, #7
 800153e:	3308      	adds	r3, #8
 8001540:	9303      	str	r3, [sp, #12]
 8001542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001544:	443b      	add	r3, r7
 8001546:	9309      	str	r3, [sp, #36]	@ 0x24
 8001548:	e76a      	b.n	8001420 <_vfiprintf_r+0x78>
 800154a:	fb0c 3202 	mla	r2, ip, r2, r3
 800154e:	460c      	mov	r4, r1
 8001550:	2001      	movs	r0, #1
 8001552:	e7a8      	b.n	80014a6 <_vfiprintf_r+0xfe>
 8001554:	2300      	movs	r3, #0
 8001556:	3401      	adds	r4, #1
 8001558:	9305      	str	r3, [sp, #20]
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 0c0a 	mov.w	ip, #10
 8001560:	4620      	mov	r0, r4
 8001562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001566:	3a30      	subs	r2, #48	@ 0x30
 8001568:	2a09      	cmp	r2, #9
 800156a:	d903      	bls.n	8001574 <_vfiprintf_r+0x1cc>
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0c6      	beq.n	80014fe <_vfiprintf_r+0x156>
 8001570:	9105      	str	r1, [sp, #20]
 8001572:	e7c4      	b.n	80014fe <_vfiprintf_r+0x156>
 8001574:	fb0c 2101 	mla	r1, ip, r1, r2
 8001578:	4604      	mov	r4, r0
 800157a:	2301      	movs	r3, #1
 800157c:	e7f0      	b.n	8001560 <_vfiprintf_r+0x1b8>
 800157e:	ab03      	add	r3, sp, #12
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	462a      	mov	r2, r5
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_vfiprintf_r+0x22c>)
 8001586:	a904      	add	r1, sp, #16
 8001588:	4630      	mov	r0, r6
 800158a:	f3af 8000 	nop.w
 800158e:	4607      	mov	r7, r0
 8001590:	1c78      	adds	r0, r7, #1
 8001592:	d1d6      	bne.n	8001542 <_vfiprintf_r+0x19a>
 8001594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001596:	07d9      	lsls	r1, r3, #31
 8001598:	d405      	bmi.n	80015a6 <_vfiprintf_r+0x1fe>
 800159a:	89ab      	ldrh	r3, [r5, #12]
 800159c:	059a      	lsls	r2, r3, #22
 800159e:	d402      	bmi.n	80015a6 <_vfiprintf_r+0x1fe>
 80015a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80015a2:	f7ff fddf 	bl	8001164 <__retarget_lock_release_recursive>
 80015a6:	89ab      	ldrh	r3, [r5, #12]
 80015a8:	065b      	lsls	r3, r3, #25
 80015aa:	f53f af1f 	bmi.w	80013ec <_vfiprintf_r+0x44>
 80015ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80015b0:	e71e      	b.n	80013f0 <_vfiprintf_r+0x48>
 80015b2:	ab03      	add	r3, sp, #12
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	462a      	mov	r2, r5
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <_vfiprintf_r+0x22c>)
 80015ba:	a904      	add	r1, sp, #16
 80015bc:	4630      	mov	r0, r6
 80015be:	f000 f879 	bl	80016b4 <_printf_i>
 80015c2:	e7e4      	b.n	800158e <_vfiprintf_r+0x1e6>
 80015c4:	08001cbf 	.word	0x08001cbf
 80015c8:	08001cc5 	.word	0x08001cc5
 80015cc:	08001cc9 	.word	0x08001cc9
 80015d0:	00000000 	.word	0x00000000
 80015d4:	08001383 	.word	0x08001383

080015d8 <_printf_common>:
 80015d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015dc:	4616      	mov	r6, r2
 80015de:	4698      	mov	r8, r3
 80015e0:	688a      	ldr	r2, [r1, #8]
 80015e2:	690b      	ldr	r3, [r1, #16]
 80015e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80015e8:	4293      	cmp	r3, r2
 80015ea:	bfb8      	it	lt
 80015ec:	4613      	movlt	r3, r2
 80015ee:	6033      	str	r3, [r6, #0]
 80015f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80015f4:	4607      	mov	r7, r0
 80015f6:	460c      	mov	r4, r1
 80015f8:	b10a      	cbz	r2, 80015fe <_printf_common+0x26>
 80015fa:	3301      	adds	r3, #1
 80015fc:	6033      	str	r3, [r6, #0]
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	0699      	lsls	r1, r3, #26
 8001602:	bf42      	ittt	mi
 8001604:	6833      	ldrmi	r3, [r6, #0]
 8001606:	3302      	addmi	r3, #2
 8001608:	6033      	strmi	r3, [r6, #0]
 800160a:	6825      	ldr	r5, [r4, #0]
 800160c:	f015 0506 	ands.w	r5, r5, #6
 8001610:	d106      	bne.n	8001620 <_printf_common+0x48>
 8001612:	f104 0a19 	add.w	sl, r4, #25
 8001616:	68e3      	ldr	r3, [r4, #12]
 8001618:	6832      	ldr	r2, [r6, #0]
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	42ab      	cmp	r3, r5
 800161e:	dc26      	bgt.n	800166e <_printf_common+0x96>
 8001620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001624:	6822      	ldr	r2, [r4, #0]
 8001626:	3b00      	subs	r3, #0
 8001628:	bf18      	it	ne
 800162a:	2301      	movne	r3, #1
 800162c:	0692      	lsls	r2, r2, #26
 800162e:	d42b      	bmi.n	8001688 <_printf_common+0xb0>
 8001630:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001634:	4641      	mov	r1, r8
 8001636:	4638      	mov	r0, r7
 8001638:	47c8      	blx	r9
 800163a:	3001      	adds	r0, #1
 800163c:	d01e      	beq.n	800167c <_printf_common+0xa4>
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	6922      	ldr	r2, [r4, #16]
 8001642:	f003 0306 	and.w	r3, r3, #6
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf02      	ittt	eq
 800164a:	68e5      	ldreq	r5, [r4, #12]
 800164c:	6833      	ldreq	r3, [r6, #0]
 800164e:	1aed      	subeq	r5, r5, r3
 8001650:	68a3      	ldr	r3, [r4, #8]
 8001652:	bf0c      	ite	eq
 8001654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001658:	2500      	movne	r5, #0
 800165a:	4293      	cmp	r3, r2
 800165c:	bfc4      	itt	gt
 800165e:	1a9b      	subgt	r3, r3, r2
 8001660:	18ed      	addgt	r5, r5, r3
 8001662:	2600      	movs	r6, #0
 8001664:	341a      	adds	r4, #26
 8001666:	42b5      	cmp	r5, r6
 8001668:	d11a      	bne.n	80016a0 <_printf_common+0xc8>
 800166a:	2000      	movs	r0, #0
 800166c:	e008      	b.n	8001680 <_printf_common+0xa8>
 800166e:	2301      	movs	r3, #1
 8001670:	4652      	mov	r2, sl
 8001672:	4641      	mov	r1, r8
 8001674:	4638      	mov	r0, r7
 8001676:	47c8      	blx	r9
 8001678:	3001      	adds	r0, #1
 800167a:	d103      	bne.n	8001684 <_printf_common+0xac>
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001684:	3501      	adds	r5, #1
 8001686:	e7c6      	b.n	8001616 <_printf_common+0x3e>
 8001688:	18e1      	adds	r1, r4, r3
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	2030      	movs	r0, #48	@ 0x30
 800168e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001692:	4422      	add	r2, r4
 8001694:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001698:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800169c:	3302      	adds	r3, #2
 800169e:	e7c7      	b.n	8001630 <_printf_common+0x58>
 80016a0:	2301      	movs	r3, #1
 80016a2:	4622      	mov	r2, r4
 80016a4:	4641      	mov	r1, r8
 80016a6:	4638      	mov	r0, r7
 80016a8:	47c8      	blx	r9
 80016aa:	3001      	adds	r0, #1
 80016ac:	d0e6      	beq.n	800167c <_printf_common+0xa4>
 80016ae:	3601      	adds	r6, #1
 80016b0:	e7d9      	b.n	8001666 <_printf_common+0x8e>
	...

080016b4 <_printf_i>:
 80016b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016b8:	7e0f      	ldrb	r7, [r1, #24]
 80016ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80016bc:	2f78      	cmp	r7, #120	@ 0x78
 80016be:	4691      	mov	r9, r2
 80016c0:	4680      	mov	r8, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	469a      	mov	sl, r3
 80016c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80016ca:	d807      	bhi.n	80016dc <_printf_i+0x28>
 80016cc:	2f62      	cmp	r7, #98	@ 0x62
 80016ce:	d80a      	bhi.n	80016e6 <_printf_i+0x32>
 80016d0:	2f00      	cmp	r7, #0
 80016d2:	f000 80d2 	beq.w	800187a <_printf_i+0x1c6>
 80016d6:	2f58      	cmp	r7, #88	@ 0x58
 80016d8:	f000 80b9 	beq.w	800184e <_printf_i+0x19a>
 80016dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80016e4:	e03a      	b.n	800175c <_printf_i+0xa8>
 80016e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80016ea:	2b15      	cmp	r3, #21
 80016ec:	d8f6      	bhi.n	80016dc <_printf_i+0x28>
 80016ee:	a101      	add	r1, pc, #4	@ (adr r1, 80016f4 <_printf_i+0x40>)
 80016f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016f4:	0800174d 	.word	0x0800174d
 80016f8:	08001761 	.word	0x08001761
 80016fc:	080016dd 	.word	0x080016dd
 8001700:	080016dd 	.word	0x080016dd
 8001704:	080016dd 	.word	0x080016dd
 8001708:	080016dd 	.word	0x080016dd
 800170c:	08001761 	.word	0x08001761
 8001710:	080016dd 	.word	0x080016dd
 8001714:	080016dd 	.word	0x080016dd
 8001718:	080016dd 	.word	0x080016dd
 800171c:	080016dd 	.word	0x080016dd
 8001720:	08001861 	.word	0x08001861
 8001724:	0800178b 	.word	0x0800178b
 8001728:	0800181b 	.word	0x0800181b
 800172c:	080016dd 	.word	0x080016dd
 8001730:	080016dd 	.word	0x080016dd
 8001734:	08001883 	.word	0x08001883
 8001738:	080016dd 	.word	0x080016dd
 800173c:	0800178b 	.word	0x0800178b
 8001740:	080016dd 	.word	0x080016dd
 8001744:	080016dd 	.word	0x080016dd
 8001748:	08001823 	.word	0x08001823
 800174c:	6833      	ldr	r3, [r6, #0]
 800174e:	1d1a      	adds	r2, r3, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6032      	str	r2, [r6, #0]
 8001754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001758:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800175c:	2301      	movs	r3, #1
 800175e:	e09d      	b.n	800189c <_printf_i+0x1e8>
 8001760:	6833      	ldr	r3, [r6, #0]
 8001762:	6820      	ldr	r0, [r4, #0]
 8001764:	1d19      	adds	r1, r3, #4
 8001766:	6031      	str	r1, [r6, #0]
 8001768:	0606      	lsls	r6, r0, #24
 800176a:	d501      	bpl.n	8001770 <_printf_i+0xbc>
 800176c:	681d      	ldr	r5, [r3, #0]
 800176e:	e003      	b.n	8001778 <_printf_i+0xc4>
 8001770:	0645      	lsls	r5, r0, #25
 8001772:	d5fb      	bpl.n	800176c <_printf_i+0xb8>
 8001774:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001778:	2d00      	cmp	r5, #0
 800177a:	da03      	bge.n	8001784 <_printf_i+0xd0>
 800177c:	232d      	movs	r3, #45	@ 0x2d
 800177e:	426d      	negs	r5, r5
 8001780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001784:	4859      	ldr	r0, [pc, #356]	@ (80018ec <_printf_i+0x238>)
 8001786:	230a      	movs	r3, #10
 8001788:	e011      	b.n	80017ae <_printf_i+0xfa>
 800178a:	6821      	ldr	r1, [r4, #0]
 800178c:	6833      	ldr	r3, [r6, #0]
 800178e:	0608      	lsls	r0, r1, #24
 8001790:	f853 5b04 	ldr.w	r5, [r3], #4
 8001794:	d402      	bmi.n	800179c <_printf_i+0xe8>
 8001796:	0649      	lsls	r1, r1, #25
 8001798:	bf48      	it	mi
 800179a:	b2ad      	uxthmi	r5, r5
 800179c:	2f6f      	cmp	r7, #111	@ 0x6f
 800179e:	4853      	ldr	r0, [pc, #332]	@ (80018ec <_printf_i+0x238>)
 80017a0:	6033      	str	r3, [r6, #0]
 80017a2:	bf14      	ite	ne
 80017a4:	230a      	movne	r3, #10
 80017a6:	2308      	moveq	r3, #8
 80017a8:	2100      	movs	r1, #0
 80017aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80017ae:	6866      	ldr	r6, [r4, #4]
 80017b0:	60a6      	str	r6, [r4, #8]
 80017b2:	2e00      	cmp	r6, #0
 80017b4:	bfa2      	ittt	ge
 80017b6:	6821      	ldrge	r1, [r4, #0]
 80017b8:	f021 0104 	bicge.w	r1, r1, #4
 80017bc:	6021      	strge	r1, [r4, #0]
 80017be:	b90d      	cbnz	r5, 80017c4 <_printf_i+0x110>
 80017c0:	2e00      	cmp	r6, #0
 80017c2:	d04b      	beq.n	800185c <_printf_i+0x1a8>
 80017c4:	4616      	mov	r6, r2
 80017c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80017ca:	fb03 5711 	mls	r7, r3, r1, r5
 80017ce:	5dc7      	ldrb	r7, [r0, r7]
 80017d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80017d4:	462f      	mov	r7, r5
 80017d6:	42bb      	cmp	r3, r7
 80017d8:	460d      	mov	r5, r1
 80017da:	d9f4      	bls.n	80017c6 <_printf_i+0x112>
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d10b      	bne.n	80017f8 <_printf_i+0x144>
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	07df      	lsls	r7, r3, #31
 80017e4:	d508      	bpl.n	80017f8 <_printf_i+0x144>
 80017e6:	6923      	ldr	r3, [r4, #16]
 80017e8:	6861      	ldr	r1, [r4, #4]
 80017ea:	4299      	cmp	r1, r3
 80017ec:	bfde      	ittt	le
 80017ee:	2330      	movle	r3, #48	@ 0x30
 80017f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80017f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80017f8:	1b92      	subs	r2, r2, r6
 80017fa:	6122      	str	r2, [r4, #16]
 80017fc:	f8cd a000 	str.w	sl, [sp]
 8001800:	464b      	mov	r3, r9
 8001802:	aa03      	add	r2, sp, #12
 8001804:	4621      	mov	r1, r4
 8001806:	4640      	mov	r0, r8
 8001808:	f7ff fee6 	bl	80015d8 <_printf_common>
 800180c:	3001      	adds	r0, #1
 800180e:	d14a      	bne.n	80018a6 <_printf_i+0x1f2>
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	b004      	add	sp, #16
 8001816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	f043 0320 	orr.w	r3, r3, #32
 8001820:	6023      	str	r3, [r4, #0]
 8001822:	4833      	ldr	r0, [pc, #204]	@ (80018f0 <_printf_i+0x23c>)
 8001824:	2778      	movs	r7, #120	@ 0x78
 8001826:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	6831      	ldr	r1, [r6, #0]
 800182e:	061f      	lsls	r7, r3, #24
 8001830:	f851 5b04 	ldr.w	r5, [r1], #4
 8001834:	d402      	bmi.n	800183c <_printf_i+0x188>
 8001836:	065f      	lsls	r7, r3, #25
 8001838:	bf48      	it	mi
 800183a:	b2ad      	uxthmi	r5, r5
 800183c:	6031      	str	r1, [r6, #0]
 800183e:	07d9      	lsls	r1, r3, #31
 8001840:	bf44      	itt	mi
 8001842:	f043 0320 	orrmi.w	r3, r3, #32
 8001846:	6023      	strmi	r3, [r4, #0]
 8001848:	b11d      	cbz	r5, 8001852 <_printf_i+0x19e>
 800184a:	2310      	movs	r3, #16
 800184c:	e7ac      	b.n	80017a8 <_printf_i+0xf4>
 800184e:	4827      	ldr	r0, [pc, #156]	@ (80018ec <_printf_i+0x238>)
 8001850:	e7e9      	b.n	8001826 <_printf_i+0x172>
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	f023 0320 	bic.w	r3, r3, #32
 8001858:	6023      	str	r3, [r4, #0]
 800185a:	e7f6      	b.n	800184a <_printf_i+0x196>
 800185c:	4616      	mov	r6, r2
 800185e:	e7bd      	b.n	80017dc <_printf_i+0x128>
 8001860:	6833      	ldr	r3, [r6, #0]
 8001862:	6825      	ldr	r5, [r4, #0]
 8001864:	6961      	ldr	r1, [r4, #20]
 8001866:	1d18      	adds	r0, r3, #4
 8001868:	6030      	str	r0, [r6, #0]
 800186a:	062e      	lsls	r6, r5, #24
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	d501      	bpl.n	8001874 <_printf_i+0x1c0>
 8001870:	6019      	str	r1, [r3, #0]
 8001872:	e002      	b.n	800187a <_printf_i+0x1c6>
 8001874:	0668      	lsls	r0, r5, #25
 8001876:	d5fb      	bpl.n	8001870 <_printf_i+0x1bc>
 8001878:	8019      	strh	r1, [r3, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	6123      	str	r3, [r4, #16]
 800187e:	4616      	mov	r6, r2
 8001880:	e7bc      	b.n	80017fc <_printf_i+0x148>
 8001882:	6833      	ldr	r3, [r6, #0]
 8001884:	1d1a      	adds	r2, r3, #4
 8001886:	6032      	str	r2, [r6, #0]
 8001888:	681e      	ldr	r6, [r3, #0]
 800188a:	6862      	ldr	r2, [r4, #4]
 800188c:	2100      	movs	r1, #0
 800188e:	4630      	mov	r0, r6
 8001890:	f7fe fc9e 	bl	80001d0 <memchr>
 8001894:	b108      	cbz	r0, 800189a <_printf_i+0x1e6>
 8001896:	1b80      	subs	r0, r0, r6
 8001898:	6060      	str	r0, [r4, #4]
 800189a:	6863      	ldr	r3, [r4, #4]
 800189c:	6123      	str	r3, [r4, #16]
 800189e:	2300      	movs	r3, #0
 80018a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80018a4:	e7aa      	b.n	80017fc <_printf_i+0x148>
 80018a6:	6923      	ldr	r3, [r4, #16]
 80018a8:	4632      	mov	r2, r6
 80018aa:	4649      	mov	r1, r9
 80018ac:	4640      	mov	r0, r8
 80018ae:	47d0      	blx	sl
 80018b0:	3001      	adds	r0, #1
 80018b2:	d0ad      	beq.n	8001810 <_printf_i+0x15c>
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	079b      	lsls	r3, r3, #30
 80018b8:	d413      	bmi.n	80018e2 <_printf_i+0x22e>
 80018ba:	68e0      	ldr	r0, [r4, #12]
 80018bc:	9b03      	ldr	r3, [sp, #12]
 80018be:	4298      	cmp	r0, r3
 80018c0:	bfb8      	it	lt
 80018c2:	4618      	movlt	r0, r3
 80018c4:	e7a6      	b.n	8001814 <_printf_i+0x160>
 80018c6:	2301      	movs	r3, #1
 80018c8:	4632      	mov	r2, r6
 80018ca:	4649      	mov	r1, r9
 80018cc:	4640      	mov	r0, r8
 80018ce:	47d0      	blx	sl
 80018d0:	3001      	adds	r0, #1
 80018d2:	d09d      	beq.n	8001810 <_printf_i+0x15c>
 80018d4:	3501      	adds	r5, #1
 80018d6:	68e3      	ldr	r3, [r4, #12]
 80018d8:	9903      	ldr	r1, [sp, #12]
 80018da:	1a5b      	subs	r3, r3, r1
 80018dc:	42ab      	cmp	r3, r5
 80018de:	dcf2      	bgt.n	80018c6 <_printf_i+0x212>
 80018e0:	e7eb      	b.n	80018ba <_printf_i+0x206>
 80018e2:	2500      	movs	r5, #0
 80018e4:	f104 0619 	add.w	r6, r4, #25
 80018e8:	e7f5      	b.n	80018d6 <_printf_i+0x222>
 80018ea:	bf00      	nop
 80018ec:	08001cd0 	.word	0x08001cd0
 80018f0:	08001ce1 	.word	0x08001ce1

080018f4 <__sflush_r>:
 80018f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fa:	0716      	lsls	r6, r2, #28
 80018fc:	4605      	mov	r5, r0
 80018fe:	460c      	mov	r4, r1
 8001900:	d454      	bmi.n	80019ac <__sflush_r+0xb8>
 8001902:	684b      	ldr	r3, [r1, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	dc02      	bgt.n	800190e <__sflush_r+0x1a>
 8001908:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	dd48      	ble.n	80019a0 <__sflush_r+0xac>
 800190e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001910:	2e00      	cmp	r6, #0
 8001912:	d045      	beq.n	80019a0 <__sflush_r+0xac>
 8001914:	2300      	movs	r3, #0
 8001916:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800191a:	682f      	ldr	r7, [r5, #0]
 800191c:	6a21      	ldr	r1, [r4, #32]
 800191e:	602b      	str	r3, [r5, #0]
 8001920:	d030      	beq.n	8001984 <__sflush_r+0x90>
 8001922:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001924:	89a3      	ldrh	r3, [r4, #12]
 8001926:	0759      	lsls	r1, r3, #29
 8001928:	d505      	bpl.n	8001936 <__sflush_r+0x42>
 800192a:	6863      	ldr	r3, [r4, #4]
 800192c:	1ad2      	subs	r2, r2, r3
 800192e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001930:	b10b      	cbz	r3, 8001936 <__sflush_r+0x42>
 8001932:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001934:	1ad2      	subs	r2, r2, r3
 8001936:	2300      	movs	r3, #0
 8001938:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800193a:	6a21      	ldr	r1, [r4, #32]
 800193c:	4628      	mov	r0, r5
 800193e:	47b0      	blx	r6
 8001940:	1c43      	adds	r3, r0, #1
 8001942:	89a3      	ldrh	r3, [r4, #12]
 8001944:	d106      	bne.n	8001954 <__sflush_r+0x60>
 8001946:	6829      	ldr	r1, [r5, #0]
 8001948:	291d      	cmp	r1, #29
 800194a:	d82b      	bhi.n	80019a4 <__sflush_r+0xb0>
 800194c:	4a28      	ldr	r2, [pc, #160]	@ (80019f0 <__sflush_r+0xfc>)
 800194e:	410a      	asrs	r2, r1
 8001950:	07d6      	lsls	r6, r2, #31
 8001952:	d427      	bmi.n	80019a4 <__sflush_r+0xb0>
 8001954:	2200      	movs	r2, #0
 8001956:	6062      	str	r2, [r4, #4]
 8001958:	04d9      	lsls	r1, r3, #19
 800195a:	6922      	ldr	r2, [r4, #16]
 800195c:	6022      	str	r2, [r4, #0]
 800195e:	d504      	bpl.n	800196a <__sflush_r+0x76>
 8001960:	1c42      	adds	r2, r0, #1
 8001962:	d101      	bne.n	8001968 <__sflush_r+0x74>
 8001964:	682b      	ldr	r3, [r5, #0]
 8001966:	b903      	cbnz	r3, 800196a <__sflush_r+0x76>
 8001968:	6560      	str	r0, [r4, #84]	@ 0x54
 800196a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800196c:	602f      	str	r7, [r5, #0]
 800196e:	b1b9      	cbz	r1, 80019a0 <__sflush_r+0xac>
 8001970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001974:	4299      	cmp	r1, r3
 8001976:	d002      	beq.n	800197e <__sflush_r+0x8a>
 8001978:	4628      	mov	r0, r5
 800197a:	f7ff fbf5 	bl	8001168 <_free_r>
 800197e:	2300      	movs	r3, #0
 8001980:	6363      	str	r3, [r4, #52]	@ 0x34
 8001982:	e00d      	b.n	80019a0 <__sflush_r+0xac>
 8001984:	2301      	movs	r3, #1
 8001986:	4628      	mov	r0, r5
 8001988:	47b0      	blx	r6
 800198a:	4602      	mov	r2, r0
 800198c:	1c50      	adds	r0, r2, #1
 800198e:	d1c9      	bne.n	8001924 <__sflush_r+0x30>
 8001990:	682b      	ldr	r3, [r5, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0c6      	beq.n	8001924 <__sflush_r+0x30>
 8001996:	2b1d      	cmp	r3, #29
 8001998:	d001      	beq.n	800199e <__sflush_r+0xaa>
 800199a:	2b16      	cmp	r3, #22
 800199c:	d11d      	bne.n	80019da <__sflush_r+0xe6>
 800199e:	602f      	str	r7, [r5, #0]
 80019a0:	2000      	movs	r0, #0
 80019a2:	e021      	b.n	80019e8 <__sflush_r+0xf4>
 80019a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	e01a      	b.n	80019e2 <__sflush_r+0xee>
 80019ac:	690f      	ldr	r7, [r1, #16]
 80019ae:	2f00      	cmp	r7, #0
 80019b0:	d0f6      	beq.n	80019a0 <__sflush_r+0xac>
 80019b2:	0793      	lsls	r3, r2, #30
 80019b4:	680e      	ldr	r6, [r1, #0]
 80019b6:	bf08      	it	eq
 80019b8:	694b      	ldreq	r3, [r1, #20]
 80019ba:	600f      	str	r7, [r1, #0]
 80019bc:	bf18      	it	ne
 80019be:	2300      	movne	r3, #0
 80019c0:	1bf6      	subs	r6, r6, r7
 80019c2:	608b      	str	r3, [r1, #8]
 80019c4:	2e00      	cmp	r6, #0
 80019c6:	ddeb      	ble.n	80019a0 <__sflush_r+0xac>
 80019c8:	6a21      	ldr	r1, [r4, #32]
 80019ca:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80019ce:	4633      	mov	r3, r6
 80019d0:	463a      	mov	r2, r7
 80019d2:	4628      	mov	r0, r5
 80019d4:	47e0      	blx	ip
 80019d6:	2800      	cmp	r0, #0
 80019d8:	dc07      	bgt.n	80019ea <__sflush_r+0xf6>
 80019da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019e2:	81a3      	strh	r3, [r4, #12]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ea:	4407      	add	r7, r0
 80019ec:	1a36      	subs	r6, r6, r0
 80019ee:	e7e9      	b.n	80019c4 <__sflush_r+0xd0>
 80019f0:	dfbffffe 	.word	0xdfbffffe

080019f4 <_fflush_r>:
 80019f4:	b538      	push	{r3, r4, r5, lr}
 80019f6:	690b      	ldr	r3, [r1, #16]
 80019f8:	4605      	mov	r5, r0
 80019fa:	460c      	mov	r4, r1
 80019fc:	b913      	cbnz	r3, 8001a04 <_fflush_r+0x10>
 80019fe:	2500      	movs	r5, #0
 8001a00:	4628      	mov	r0, r5
 8001a02:	bd38      	pop	{r3, r4, r5, pc}
 8001a04:	b118      	cbz	r0, 8001a0e <_fflush_r+0x1a>
 8001a06:	6a03      	ldr	r3, [r0, #32]
 8001a08:	b90b      	cbnz	r3, 8001a0e <_fflush_r+0x1a>
 8001a0a:	f7ff faa5 	bl	8000f58 <__sinit>
 8001a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f3      	beq.n	80019fe <_fflush_r+0xa>
 8001a16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001a18:	07d0      	lsls	r0, r2, #31
 8001a1a:	d404      	bmi.n	8001a26 <_fflush_r+0x32>
 8001a1c:	0599      	lsls	r1, r3, #22
 8001a1e:	d402      	bmi.n	8001a26 <_fflush_r+0x32>
 8001a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a22:	f7ff fb9e 	bl	8001162 <__retarget_lock_acquire_recursive>
 8001a26:	4628      	mov	r0, r5
 8001a28:	4621      	mov	r1, r4
 8001a2a:	f7ff ff63 	bl	80018f4 <__sflush_r>
 8001a2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001a30:	07da      	lsls	r2, r3, #31
 8001a32:	4605      	mov	r5, r0
 8001a34:	d4e4      	bmi.n	8001a00 <_fflush_r+0xc>
 8001a36:	89a3      	ldrh	r3, [r4, #12]
 8001a38:	059b      	lsls	r3, r3, #22
 8001a3a:	d4e1      	bmi.n	8001a00 <_fflush_r+0xc>
 8001a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a3e:	f7ff fb91 	bl	8001164 <__retarget_lock_release_recursive>
 8001a42:	e7dd      	b.n	8001a00 <_fflush_r+0xc>

08001a44 <__swbuf_r>:
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	460e      	mov	r6, r1
 8001a48:	4614      	mov	r4, r2
 8001a4a:	4605      	mov	r5, r0
 8001a4c:	b118      	cbz	r0, 8001a56 <__swbuf_r+0x12>
 8001a4e:	6a03      	ldr	r3, [r0, #32]
 8001a50:	b90b      	cbnz	r3, 8001a56 <__swbuf_r+0x12>
 8001a52:	f7ff fa81 	bl	8000f58 <__sinit>
 8001a56:	69a3      	ldr	r3, [r4, #24]
 8001a58:	60a3      	str	r3, [r4, #8]
 8001a5a:	89a3      	ldrh	r3, [r4, #12]
 8001a5c:	071a      	lsls	r2, r3, #28
 8001a5e:	d501      	bpl.n	8001a64 <__swbuf_r+0x20>
 8001a60:	6923      	ldr	r3, [r4, #16]
 8001a62:	b943      	cbnz	r3, 8001a76 <__swbuf_r+0x32>
 8001a64:	4621      	mov	r1, r4
 8001a66:	4628      	mov	r0, r5
 8001a68:	f000 f82a 	bl	8001ac0 <__swsetup_r>
 8001a6c:	b118      	cbz	r0, 8001a76 <__swbuf_r+0x32>
 8001a6e:	f04f 37ff 	mov.w	r7, #4294967295
 8001a72:	4638      	mov	r0, r7
 8001a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	6922      	ldr	r2, [r4, #16]
 8001a7a:	1a98      	subs	r0, r3, r2
 8001a7c:	6963      	ldr	r3, [r4, #20]
 8001a7e:	b2f6      	uxtb	r6, r6
 8001a80:	4283      	cmp	r3, r0
 8001a82:	4637      	mov	r7, r6
 8001a84:	dc05      	bgt.n	8001a92 <__swbuf_r+0x4e>
 8001a86:	4621      	mov	r1, r4
 8001a88:	4628      	mov	r0, r5
 8001a8a:	f7ff ffb3 	bl	80019f4 <_fflush_r>
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	d1ed      	bne.n	8001a6e <__swbuf_r+0x2a>
 8001a92:	68a3      	ldr	r3, [r4, #8]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	60a3      	str	r3, [r4, #8]
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	6022      	str	r2, [r4, #0]
 8001a9e:	701e      	strb	r6, [r3, #0]
 8001aa0:	6962      	ldr	r2, [r4, #20]
 8001aa2:	1c43      	adds	r3, r0, #1
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d004      	beq.n	8001ab2 <__swbuf_r+0x6e>
 8001aa8:	89a3      	ldrh	r3, [r4, #12]
 8001aaa:	07db      	lsls	r3, r3, #31
 8001aac:	d5e1      	bpl.n	8001a72 <__swbuf_r+0x2e>
 8001aae:	2e0a      	cmp	r6, #10
 8001ab0:	d1df      	bne.n	8001a72 <__swbuf_r+0x2e>
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	f7ff ff9d 	bl	80019f4 <_fflush_r>
 8001aba:	2800      	cmp	r0, #0
 8001abc:	d0d9      	beq.n	8001a72 <__swbuf_r+0x2e>
 8001abe:	e7d6      	b.n	8001a6e <__swbuf_r+0x2a>

08001ac0 <__swsetup_r>:
 8001ac0:	b538      	push	{r3, r4, r5, lr}
 8001ac2:	4b29      	ldr	r3, [pc, #164]	@ (8001b68 <__swsetup_r+0xa8>)
 8001ac4:	4605      	mov	r5, r0
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	460c      	mov	r4, r1
 8001aca:	b118      	cbz	r0, 8001ad4 <__swsetup_r+0x14>
 8001acc:	6a03      	ldr	r3, [r0, #32]
 8001ace:	b90b      	cbnz	r3, 8001ad4 <__swsetup_r+0x14>
 8001ad0:	f7ff fa42 	bl	8000f58 <__sinit>
 8001ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ad8:	0719      	lsls	r1, r3, #28
 8001ada:	d422      	bmi.n	8001b22 <__swsetup_r+0x62>
 8001adc:	06da      	lsls	r2, r3, #27
 8001ade:	d407      	bmi.n	8001af0 <__swsetup_r+0x30>
 8001ae0:	2209      	movs	r2, #9
 8001ae2:	602a      	str	r2, [r5, #0]
 8001ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ae8:	81a3      	strh	r3, [r4, #12]
 8001aea:	f04f 30ff 	mov.w	r0, #4294967295
 8001aee:	e033      	b.n	8001b58 <__swsetup_r+0x98>
 8001af0:	0758      	lsls	r0, r3, #29
 8001af2:	d512      	bpl.n	8001b1a <__swsetup_r+0x5a>
 8001af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001af6:	b141      	cbz	r1, 8001b0a <__swsetup_r+0x4a>
 8001af8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001afc:	4299      	cmp	r1, r3
 8001afe:	d002      	beq.n	8001b06 <__swsetup_r+0x46>
 8001b00:	4628      	mov	r0, r5
 8001b02:	f7ff fb31 	bl	8001168 <_free_r>
 8001b06:	2300      	movs	r3, #0
 8001b08:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b0a:	89a3      	ldrh	r3, [r4, #12]
 8001b0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001b10:	81a3      	strh	r3, [r4, #12]
 8001b12:	2300      	movs	r3, #0
 8001b14:	6063      	str	r3, [r4, #4]
 8001b16:	6923      	ldr	r3, [r4, #16]
 8001b18:	6023      	str	r3, [r4, #0]
 8001b1a:	89a3      	ldrh	r3, [r4, #12]
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	81a3      	strh	r3, [r4, #12]
 8001b22:	6923      	ldr	r3, [r4, #16]
 8001b24:	b94b      	cbnz	r3, 8001b3a <__swsetup_r+0x7a>
 8001b26:	89a3      	ldrh	r3, [r4, #12]
 8001b28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b30:	d003      	beq.n	8001b3a <__swsetup_r+0x7a>
 8001b32:	4621      	mov	r1, r4
 8001b34:	4628      	mov	r0, r5
 8001b36:	f000 f84f 	bl	8001bd8 <__smakebuf_r>
 8001b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b3e:	f013 0201 	ands.w	r2, r3, #1
 8001b42:	d00a      	beq.n	8001b5a <__swsetup_r+0x9a>
 8001b44:	2200      	movs	r2, #0
 8001b46:	60a2      	str	r2, [r4, #8]
 8001b48:	6962      	ldr	r2, [r4, #20]
 8001b4a:	4252      	negs	r2, r2
 8001b4c:	61a2      	str	r2, [r4, #24]
 8001b4e:	6922      	ldr	r2, [r4, #16]
 8001b50:	b942      	cbnz	r2, 8001b64 <__swsetup_r+0xa4>
 8001b52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b56:	d1c5      	bne.n	8001ae4 <__swsetup_r+0x24>
 8001b58:	bd38      	pop	{r3, r4, r5, pc}
 8001b5a:	0799      	lsls	r1, r3, #30
 8001b5c:	bf58      	it	pl
 8001b5e:	6962      	ldrpl	r2, [r4, #20]
 8001b60:	60a2      	str	r2, [r4, #8]
 8001b62:	e7f4      	b.n	8001b4e <__swsetup_r+0x8e>
 8001b64:	2000      	movs	r0, #0
 8001b66:	e7f7      	b.n	8001b58 <__swsetup_r+0x98>
 8001b68:	20000010 	.word	0x20000010

08001b6c <_sbrk_r>:
 8001b6c:	b538      	push	{r3, r4, r5, lr}
 8001b6e:	4d06      	ldr	r5, [pc, #24]	@ (8001b88 <_sbrk_r+0x1c>)
 8001b70:	2300      	movs	r3, #0
 8001b72:	4604      	mov	r4, r0
 8001b74:	4608      	mov	r0, r1
 8001b76:	602b      	str	r3, [r5, #0]
 8001b78:	f7fe fc8e 	bl	8000498 <_sbrk>
 8001b7c:	1c43      	adds	r3, r0, #1
 8001b7e:	d102      	bne.n	8001b86 <_sbrk_r+0x1a>
 8001b80:	682b      	ldr	r3, [r5, #0]
 8001b82:	b103      	cbz	r3, 8001b86 <_sbrk_r+0x1a>
 8001b84:	6023      	str	r3, [r4, #0]
 8001b86:	bd38      	pop	{r3, r4, r5, pc}
 8001b88:	200005cc 	.word	0x200005cc

08001b8c <__swhatbuf_r>:
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	460c      	mov	r4, r1
 8001b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b94:	2900      	cmp	r1, #0
 8001b96:	b096      	sub	sp, #88	@ 0x58
 8001b98:	4615      	mov	r5, r2
 8001b9a:	461e      	mov	r6, r3
 8001b9c:	da0d      	bge.n	8001bba <__swhatbuf_r+0x2e>
 8001b9e:	89a3      	ldrh	r3, [r4, #12]
 8001ba0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001ba4:	f04f 0100 	mov.w	r1, #0
 8001ba8:	bf14      	ite	ne
 8001baa:	2340      	movne	r3, #64	@ 0x40
 8001bac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	6031      	str	r1, [r6, #0]
 8001bb4:	602b      	str	r3, [r5, #0]
 8001bb6:	b016      	add	sp, #88	@ 0x58
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
 8001bba:	466a      	mov	r2, sp
 8001bbc:	f000 f848 	bl	8001c50 <_fstat_r>
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	dbec      	blt.n	8001b9e <__swhatbuf_r+0x12>
 8001bc4:	9901      	ldr	r1, [sp, #4]
 8001bc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001bca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001bce:	4259      	negs	r1, r3
 8001bd0:	4159      	adcs	r1, r3
 8001bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bd6:	e7eb      	b.n	8001bb0 <__swhatbuf_r+0x24>

08001bd8 <__smakebuf_r>:
 8001bd8:	898b      	ldrh	r3, [r1, #12]
 8001bda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bdc:	079d      	lsls	r5, r3, #30
 8001bde:	4606      	mov	r6, r0
 8001be0:	460c      	mov	r4, r1
 8001be2:	d507      	bpl.n	8001bf4 <__smakebuf_r+0x1c>
 8001be4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001be8:	6023      	str	r3, [r4, #0]
 8001bea:	6123      	str	r3, [r4, #16]
 8001bec:	2301      	movs	r3, #1
 8001bee:	6163      	str	r3, [r4, #20]
 8001bf0:	b003      	add	sp, #12
 8001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf4:	ab01      	add	r3, sp, #4
 8001bf6:	466a      	mov	r2, sp
 8001bf8:	f7ff ffc8 	bl	8001b8c <__swhatbuf_r>
 8001bfc:	9f00      	ldr	r7, [sp, #0]
 8001bfe:	4605      	mov	r5, r0
 8001c00:	4639      	mov	r1, r7
 8001c02:	4630      	mov	r0, r6
 8001c04:	f7ff fb1c 	bl	8001240 <_malloc_r>
 8001c08:	b948      	cbnz	r0, 8001c1e <__smakebuf_r+0x46>
 8001c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c0e:	059a      	lsls	r2, r3, #22
 8001c10:	d4ee      	bmi.n	8001bf0 <__smakebuf_r+0x18>
 8001c12:	f023 0303 	bic.w	r3, r3, #3
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	81a3      	strh	r3, [r4, #12]
 8001c1c:	e7e2      	b.n	8001be4 <__smakebuf_r+0xc>
 8001c1e:	89a3      	ldrh	r3, [r4, #12]
 8001c20:	6020      	str	r0, [r4, #0]
 8001c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c26:	81a3      	strh	r3, [r4, #12]
 8001c28:	9b01      	ldr	r3, [sp, #4]
 8001c2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001c2e:	b15b      	cbz	r3, 8001c48 <__smakebuf_r+0x70>
 8001c30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c34:	4630      	mov	r0, r6
 8001c36:	f000 f81d 	bl	8001c74 <_isatty_r>
 8001c3a:	b128      	cbz	r0, 8001c48 <__smakebuf_r+0x70>
 8001c3c:	89a3      	ldrh	r3, [r4, #12]
 8001c3e:	f023 0303 	bic.w	r3, r3, #3
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	81a3      	strh	r3, [r4, #12]
 8001c48:	89a3      	ldrh	r3, [r4, #12]
 8001c4a:	431d      	orrs	r5, r3
 8001c4c:	81a5      	strh	r5, [r4, #12]
 8001c4e:	e7cf      	b.n	8001bf0 <__smakebuf_r+0x18>

08001c50 <_fstat_r>:
 8001c50:	b538      	push	{r3, r4, r5, lr}
 8001c52:	4d07      	ldr	r5, [pc, #28]	@ (8001c70 <_fstat_r+0x20>)
 8001c54:	2300      	movs	r3, #0
 8001c56:	4604      	mov	r4, r0
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	602b      	str	r3, [r5, #0]
 8001c5e:	f7fe fbf5 	bl	800044c <_fstat>
 8001c62:	1c43      	adds	r3, r0, #1
 8001c64:	d102      	bne.n	8001c6c <_fstat_r+0x1c>
 8001c66:	682b      	ldr	r3, [r5, #0]
 8001c68:	b103      	cbz	r3, 8001c6c <_fstat_r+0x1c>
 8001c6a:	6023      	str	r3, [r4, #0]
 8001c6c:	bd38      	pop	{r3, r4, r5, pc}
 8001c6e:	bf00      	nop
 8001c70:	200005cc 	.word	0x200005cc

08001c74 <_isatty_r>:
 8001c74:	b538      	push	{r3, r4, r5, lr}
 8001c76:	4d06      	ldr	r5, [pc, #24]	@ (8001c90 <_isatty_r+0x1c>)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	602b      	str	r3, [r5, #0]
 8001c80:	f7fe fbf3 	bl	800046a <_isatty>
 8001c84:	1c43      	adds	r3, r0, #1
 8001c86:	d102      	bne.n	8001c8e <_isatty_r+0x1a>
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	b103      	cbz	r3, 8001c8e <_isatty_r+0x1a>
 8001c8c:	6023      	str	r3, [r4, #0]
 8001c8e:	bd38      	pop	{r3, r4, r5, pc}
 8001c90:	200005cc 	.word	0x200005cc

08001c94 <_init>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	bf00      	nop
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr

08001ca0 <_fini>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr
