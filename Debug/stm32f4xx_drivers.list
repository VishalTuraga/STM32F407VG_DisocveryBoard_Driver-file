
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d9c  08000d9c  00002034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d9c  08000d9c  00002034  2**0
                  CONTENTS
  4 .ARM          00000008  08000d9c  08000d9c  00001d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000da4  08000da4  00002034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000da4  08000da4  00001da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000da8  08000da8  00001da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08000dac  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002034  2**0
                  CONTENTS
 10 .bss          00000044  20000034  20000034  00002034  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  00002034  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a02  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000705  00000000  00000000  00003a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00004168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000166  00000000  00000000  00004340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002fb9  00000000  00000000  000044a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000260e  00000000  00000000  0000745f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b86e  00000000  00000000  00009a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000152db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006b4  00000000  00000000  00015320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  000159d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d84 	.word	0x08000d84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08000d84 	.word	0x08000d84

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <delay>:
#define MY_ADDR 0x61

#define SLAVE_ADDR  0x68

void delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 50000/2 ; i ++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 80001f0:	4293      	cmp	r3, r2
 80001f2:	d9f7      	bls.n	80001e4 <delay+0xc>
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB9 or PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	/*Note : Internal pull-up resistors are used */

	I2CPins.pGPIOx = GPIOB;
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <I2C1_GPIOInits+0x40>)
 8000208:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020a:	2302      	movs	r3, #2
 800020c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_OD;
 800020e:	2301      	movs	r3, #1
 8000210:	733b      	strb	r3, [r7, #12]
	/*
	 * Note : In the below line use GPIO_NO_PUPD option if you want to use external pullup resistors, then you have to use 3.3K pull up resistors
	 * for both SDA and SCL lines
	 */
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_PULLUP;
 8000212:	2301      	movs	r3, #1
 8000214:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000216:	2304      	movs	r3, #4
 8000218:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_OUT_SPEED_HIGH;
 800021a:	2302      	movs	r3, #2
 800021c:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800021e:	2306      	movs	r3, #6
 8000220:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fbdf 	bl	80009e8 <GPIO_Init>


	//sda
	//Note : since we found a glitch on PB9 , you can also try with PB7
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800022a:	2307      	movs	r3, #7
 800022c:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fbd9 	bl	80009e8 <GPIO_Init>


}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40020400 	.word	0x40020400

08000244 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000248:	4b09      	ldr	r3, [pc, #36]	@ (8000270 <I2C1_Inits+0x2c>)
 800024a:	4a0a      	ldr	r2, [pc, #40]	@ (8000274 <I2C1_Inits+0x30>)
 800024c:	609a      	str	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACKCTRL_ACK_EN;
 800024e:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <I2C1_Inits+0x2c>)
 8000250:	2201      	movs	r2, #1
 8000252:	715a      	strb	r2, [r3, #5]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <I2C1_Inits+0x2c>)
 8000256:	2261      	movs	r2, #97	@ 0x61
 8000258:	711a      	strb	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_DUTYCYCLE_2;
 800025a:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <I2C1_Inits+0x2c>)
 800025c:	2200      	movs	r2, #0
 800025e:	80da      	strh	r2, [r3, #6]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM_KHZ;
 8000260:	4b03      	ldr	r3, [pc, #12]	@ (8000270 <I2C1_Inits+0x2c>)
 8000262:	4a05      	ldr	r2, [pc, #20]	@ (8000278 <I2C1_Inits+0x34>)
 8000264:	601a      	str	r2, [r3, #0]

	I2C_Init(&I2C1Handle);
 8000266:	4802      	ldr	r0, [pc, #8]	@ (8000270 <I2C1_Inits+0x2c>)
 8000268:	f000 f940 	bl	80004ec <I2C_Init>

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000050 	.word	0x20000050
 8000274:	40005400 	.word	0x40005400
 8000278:	000186a0 	.word	0x000186a0

0800027c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000282:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <GPIO_ButtonInit+0x2c>)
 8000284:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000286:	2300      	movs	r3, #0
 8000288:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800028a:	2300      	movs	r3, #0
 800028c:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OUT_SPEED_HIGH;
 800028e:	2302      	movs	r3, #2
 8000290:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NONE;
 8000292:	2300      	movs	r3, #0
 8000294:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fba5 	bl	80009e8 <GPIO_Init>

}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40020000 	.word	0x40020000

080002ac <main>:


int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af02      	add	r7, sp, #8

	GPIO_ButtonInit();
 80002b2:	f7ff ffe3 	bl	800027c <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002b6:	f7ff ffa3 	bl	8000200 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002ba:	f7ff ffc3 	bl	8000244 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002be:	2101      	movs	r1, #1
 80002c0:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <main+0x48>)
 80002c2:	f000 f89d 	bl	8000400 <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
//		printf("value of GPIO Pin 0 before while loop: %ld\n",GPIOA->IDR & 0x1);
		while( ! GPIO_ReadPin(GPIOA,GPIO_PIN_0) );
 80002c6:	bf00      	nop
 80002c8:	2100      	movs	r1, #0
 80002ca:	480b      	ldr	r0, [pc, #44]	@ (80002f8 <main+0x4c>)
 80002cc:	f000 fd22 	bl	8000d14 <GPIO_ReadPin>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f8      	beq.n	80002c8 <main+0x1c>
//		printf("value of GPIO Pin 0 after while loop: %ld\n",GPIOA->IDR & 0x1);

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002d6:	f7ff ff7f 	bl	80001d8 <delay>

		//send some data to the slave
		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR,0);
 80002da:	4808      	ldr	r0, [pc, #32]	@ (80002fc <main+0x50>)
 80002dc:	f7ff ff74 	bl	80001c8 <strlen>
 80002e0:	4603      	mov	r3, r0
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2368      	movs	r3, #104	@ 0x68
 80002ea:	4904      	ldr	r1, [pc, #16]	@ (80002fc <main+0x50>)
 80002ec:	4804      	ldr	r0, [pc, #16]	@ (8000300 <main+0x54>)
 80002ee:	f000 f9c2 	bl	8000676 <I2C_MasterSendData>
		while( ! GPIO_ReadPin(GPIOA,GPIO_PIN_0) );
 80002f2:	e7e8      	b.n	80002c6 <main+0x1a>
 80002f4:	40005400 	.word	0x40005400
 80002f8:	40020000 	.word	0x40020000
 80002fc:	20000000 	.word	0x20000000
 8000300:	20000050 	.word	0x20000050

08000304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000304:	480d      	ldr	r0, [pc, #52]	@ (800033c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000306:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000308:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800030c:	480c      	ldr	r0, [pc, #48]	@ (8000340 <LoopForever+0x6>)
  ldr r1, =_edata
 800030e:	490d      	ldr	r1, [pc, #52]	@ (8000344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000310:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <LoopForever+0xe>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000314:	e002      	b.n	800031c <LoopCopyDataInit>

08000316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031a:	3304      	adds	r3, #4

0800031c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800031c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000320:	d3f9      	bcc.n	8000316 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000322:	4a0a      	ldr	r2, [pc, #40]	@ (800034c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000324:	4c0a      	ldr	r4, [pc, #40]	@ (8000350 <LoopForever+0x16>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000328:	e001      	b.n	800032e <LoopFillZerobss>

0800032a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800032c:	3204      	adds	r2, #4

0800032e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000330:	d3fb      	bcc.n	800032a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000332:	f000 fd03 	bl	8000d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000336:	f7ff ffb9 	bl	80002ac <main>

0800033a <LoopForever>:

LoopForever:
  b LoopForever
 800033a:	e7fe      	b.n	800033a <LoopForever>
  ldr   r0, =_estack
 800033c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000348:	08000dac 	.word	0x08000dac
  ldr r2, =_sbss
 800034c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000350:	20000078 	.word	0x20000078

08000354 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC_IRQHandler>

08000356 <I2C_ManageAcking>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000356:	b480      	push	{r7}
 8000358:	b083      	sub	sp, #12
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
 800035e:	460b      	mov	r3, r1
 8000360:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d106      	bne.n	8000376 <I2C_ManageAcking+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	601a      	str	r2, [r3, #0]
	}
	else if(EnOrDi == DISABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
	}
}
 8000374:	e008      	b.n	8000388 <I2C_ManageAcking+0x32>
	else if(EnOrDi == DISABLE)
 8000376:	78fb      	ldrb	r3, [r7, #3]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d105      	bne.n	8000388 <I2C_ManageAcking+0x32>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	601a      	str	r2, [r3, #0]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr

08000392 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	b084      	sub	sp, #16
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// check if device is master mode or slave mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d01f      	beq.n	80003e8 <I2C_ClearADDRFlag+0x56>
	{
		// device in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7f1b      	ldrb	r3, [r3, #28]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d112      	bne.n	80003d6 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6a1b      	ldr	r3, [r3, #32]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d11f      	bne.n	80003f8 <I2C_ClearADDRFlag+0x66>
			{
				// disable the ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ffc9 	bl	8000356 <I2C_ManageAcking>

				// clear ADDR flag
				dummyRead = pI2CHandle->pI2Cx->SR1;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}


}
 80003d4:	e010      	b.n	80003f8 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	60fb      	str	r3, [r7, #12]
}
 80003e6:	e007      	b.n	80003f8 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	60fb      	str	r3, [r7, #12]
}
 80003f8:	bf00      	nop
 80003fa:	3710      	adds	r7, #16
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <I2C_PeripheralControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800040c:	78fb      	ldrb	r3, [r7, #3]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d106      	bne.n	8000420 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f043 0201 	orr.w	r2, r3, #1
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	601a      	str	r2, [r3, #0]
	}
	else if(EnOrDi == DISABLE)
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 800041e:	e008      	b.n	8000432 <I2C_PeripheralControl+0x32>
	else if(EnOrDi == DISABLE)
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d105      	bne.n	8000432 <I2C_PeripheralControl+0x32>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f023 0201 	bic.w	r2, r3, #1
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	601a      	str	r2, [r3, #0]
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <I2C_ClockControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_ClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d120      	bne.n	8000490 <I2C_ClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a22      	ldr	r2, [pc, #136]	@ (80004dc <I2C_ClockControl+0xa0>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <I2C_ClockControl+0x28>
		{
			I2C1_CLK_EN();
 8000456:	4b22      	ldr	r3, [pc, #136]	@ (80004e0 <I2C_ClockControl+0xa4>)
 8000458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800045a:	4a21      	ldr	r2, [pc, #132]	@ (80004e0 <I2C_ClockControl+0xa4>)
 800045c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000460:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_CLK_DI();
		}
	}
}
 8000462:	e035      	b.n	80004d0 <I2C_ClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a1f      	ldr	r2, [pc, #124]	@ (80004e4 <I2C_ClockControl+0xa8>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <I2C_ClockControl+0x3e>
			I2C2_CLK_EN();
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <I2C_ClockControl+0xa4>)
 800046e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000470:	4a1b      	ldr	r2, [pc, #108]	@ (80004e0 <I2C_ClockControl+0xa4>)
 8000472:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000476:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000478:	e02a      	b.n	80004d0 <I2C_ClockControl+0x94>
		else if(pI2Cx == I2C3)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a1a      	ldr	r2, [pc, #104]	@ (80004e8 <I2C_ClockControl+0xac>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d126      	bne.n	80004d0 <I2C_ClockControl+0x94>
			I2C3_CLK_EN();
 8000482:	4b17      	ldr	r3, [pc, #92]	@ (80004e0 <I2C_ClockControl+0xa4>)
 8000484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000486:	4a16      	ldr	r2, [pc, #88]	@ (80004e0 <I2C_ClockControl+0xa4>)
 8000488:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800048c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800048e:	e01f      	b.n	80004d0 <I2C_ClockControl+0x94>
		if(pI2Cx == I2C1)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a12      	ldr	r2, [pc, #72]	@ (80004dc <I2C_ClockControl+0xa0>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <I2C_ClockControl+0x6a>
			I2C1_CLK_DI();
 8000498:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <I2C_ClockControl+0xa4>)
 800049a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800049c:	4a10      	ldr	r2, [pc, #64]	@ (80004e0 <I2C_ClockControl+0xa4>)
 800049e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80004a2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80004a4:	e014      	b.n	80004d0 <I2C_ClockControl+0x94>
		else if(pI2Cx == I2C2)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a0e      	ldr	r2, [pc, #56]	@ (80004e4 <I2C_ClockControl+0xa8>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <I2C_ClockControl+0x80>
			I2C2_CLK_DI();
 80004ae:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <I2C_ClockControl+0xa4>)
 80004b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004b2:	4a0b      	ldr	r2, [pc, #44]	@ (80004e0 <I2C_ClockControl+0xa4>)
 80004b4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80004b8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80004ba:	e009      	b.n	80004d0 <I2C_ClockControl+0x94>
		else if(pI2Cx == I2C3)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a0a      	ldr	r2, [pc, #40]	@ (80004e8 <I2C_ClockControl+0xac>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d105      	bne.n	80004d0 <I2C_ClockControl+0x94>
			I2C3_CLK_DI();
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <I2C_ClockControl+0xa4>)
 80004c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004c8:	4a05      	ldr	r2, [pc, #20]	@ (80004e0 <I2C_ClockControl+0xa4>)
 80004ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80004ce:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40005400 	.word	0x40005400
 80004e0:	40023800 	.word	0x40023800
 80004e4:	40005800 	.word	0x40005800
 80004e8:	40005c00 	.word	0x40005c00

080004ec <I2C_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	I2C_ClockControl(pI2CHandle->pI2Cx, ENABLE);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	2101      	movs	r1, #1
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff9e 	bl	800043c <I2C_ClockControl>
	uint32_t tempreg = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
	//1. Configure the mode (Standard or fast)
	uint16_t ccr_value = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM_KHZ)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a4c      	ldr	r2, [pc, #304]	@ (8000644 <I2C_Init+0x158>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d80f      	bhi.n	8000536 <I2C_Init+0x4a>
	{
		// mode is standard
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000516:	f000 f91f 	bl	8000758 <RCC_GetPCLK1Value>
 800051a:	4602      	mov	r2, r0
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	fbb2 f3f3 	udiv	r3, r2, r3
 8000526:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000528:	897b      	ldrh	r3, [r7, #10]
 800052a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	4313      	orrs	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e02c      	b.n	8000590 <I2C_Init+0xa4>
	}
	else
	{
		// mode is fast mode
		tempreg |= (1 << I2C_CCR_FS);
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800053c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	88db      	ldrh	r3, [r3, #6]
 8000542:	039b      	lsls	r3, r3, #14
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	4313      	orrs	r3, r2
 8000548:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_DUTYCYCLE_2)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	88db      	ldrh	r3, [r3, #6]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d10b      	bne.n	800056a <I2C_Init+0x7e>
		{
			// Tlow = 2*Thigh
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000552:	f000 f901 	bl	8000758 <RCC_GetPCLK1Value>
 8000556:	4601      	mov	r1, r0
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4613      	mov	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	4413      	add	r3, r2
 8000562:	fbb1 f3f3 	udiv	r3, r1, r3
 8000566:	817b      	strh	r3, [r7, #10]
 8000568:	e00c      	b.n	8000584 <I2C_Init+0x98>

		}
		else
		{
			//  Tlow = 1.7*Thigh
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800056a:	f000 f8f5 	bl	8000758 <RCC_GetPCLK1Value>
 800056e:	4601      	mov	r1, r0
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4613      	mov	r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	4413      	add	r3, r2
 800057a:	009a      	lsls	r2, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000582:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000584:	897b      	ldrh	r3, [r7, #10]
 8000586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	4313      	orrs	r3, r2
 800058e:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	61da      	str	r2, [r3, #28]

	//2. Configure the speed of the serial clock. Configure the FREQ field of CR2
	tempreg = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
	tempreg = RCC_GetPCLK1Value()/1000000U;
 800059c:	f000 f8dc 	bl	8000758 <RCC_GetPCLK1Value>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a29      	ldr	r2, [pc, #164]	@ (8000648 <I2C_Init+0x15c>)
 80005a4:	fba2 2303 	umull	r2, r3, r2, r3
 80005a8:	0c9b      	lsrs	r3, r3, #18
 80005aa:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	6859      	ldr	r1, [r3, #4]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	430a      	orrs	r2, r1
 80005be:	605a      	str	r2, [r3, #4]

	//3. Configure the device address (if the device is behaving as slave)
	// configuring for only 7 bit mode
	tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= (1 << 14);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	689a      	ldr	r2, [r3, #8]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80005d6:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	609a      	str	r2, [r3, #8]

	//4. Enable the acking
	pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	6819      	ldr	r1, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	029a      	lsls	r2, r3, #10
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	430a      	orrs	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]

	//5. Configure the rise time for I2C pins
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM_KHZ)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <I2C_Init+0x158>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d809      	bhi.n	8000612 <I2C_Init+0x126>
	{
		// mode is standard
		// here trsie = (Fclk * Trisemax) + 1.
		// For I2C, trisemax is 1000ns or 1microsecond and in frequency terms it is 1 MHz. Hence we are dividing with 1 MHz
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80005fe:	f000 f8ab 	bl	8000758 <RCC_GetPCLK1Value>
 8000602:	4603      	mov	r3, r0
 8000604:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <I2C_Init+0x15c>)
 8000606:	fba2 2303 	umull	r2, r3, r2, r3
 800060a:	0c9b      	lsrs	r3, r3, #18
 800060c:	3301      	adds	r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	e00d      	b.n	800062e <I2C_Init+0x142>
	}
	else
	{
		// mode is fast mode
		// trise max for fast mode is 300ns
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000612:	f000 f8a1 	bl	8000758 <RCC_GetPCLK1Value>
 8000616:	4603      	mov	r3, r0
 8000618:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800061c:	fb02 f303 	mul.w	r3, r2, r3
 8000620:	0a5b      	lsrs	r3, r3, #9
 8000622:	4a0a      	ldr	r2, [pc, #40]	@ (800064c <I2C_Init+0x160>)
 8000624:	fba2 2303 	umull	r2, r3, r2, r3
 8000628:	09db      	lsrs	r3, r3, #7
 800062a:	3301      	adds	r3, #1
 800062c:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000638:	621a      	str	r2, [r3, #32]

	// CCR calculations


}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	000186a0 	.word	0x000186a0
 8000648:	431bde83 	.word	0x431bde83
 800064c:	00044b83 	.word	0x00044b83

08000650 <I2C_GetFlagStatus>:
 *
 * @Note			-
 *
 *************************************************************************************************/
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	if((pI2Cx->SR1 & FlagName))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	695a      	ldr	r2, [r3, #20]
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	4013      	ands	r3, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <I2C_MasterSendData>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *TxBuffer, uint8_t len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	4611      	mov	r1, r2
 8000682:	461a      	mov	r2, r3
 8000684:	460b      	mov	r3, r1
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	4613      	mov	r3, r2
 800068a:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the start condition
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_START);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800069a:	601a      	str	r2, [r3, #0]

	// 2. Check if the start bit is set and then Read the SR1 register to clear the start bit
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)));
 800069c:	bf00      	nop
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	2101      	movs	r1, #1
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffd3 	bl	8000650 <I2C_GetFlagStatus>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0f6      	beq.n	800069e <I2C_MasterSendData+0x28>
	//uint32_t temp = pI2CHandle->pI2Cx->SR1;

	// 3. Send the address of slave with transmission byte (0)
	SlaveAddr = SlaveAddr << 1;
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	71bb      	strb	r3, [r7, #6]
	SlaveAddr &= ~(1);
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	f023 0301 	bic.w	r3, r3, #1
 80006bc:	71bb      	strb	r3, [r7, #6]
	pI2CHandle->pI2Cx->DR = SlaveAddr;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	79ba      	ldrb	r2, [r7, #6]
 80006c4:	611a      	str	r2, [r3, #16]

	// 4. ADDR bit is set if it receives an ACK
	if(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_FLAG_ADDR)))
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	2104      	movs	r1, #4
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffbf 	bl	8000650 <I2C_GetFlagStatus>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d018      	beq.n	800070a <I2C_MasterSendData+0x94>
	{
		// The ADDR bit is set which means that the master received an ack. Now we should reset this ADDR bit
		// read SR1 and SR2 to clear this bit
		I2C_ClearADDRFlag(pI2CHandle);
 80006d8:	68f8      	ldr	r0, [r7, #12]
 80006da:	f7ff fe5a 	bl	8000392 <I2C_ClearADDRFlag>
	}

	// 5. Send data till len becomes zero. We don't have to check for ack every time as it is handled by the hardware
	while(len)
 80006de:	e014      	b.n	800070a <I2C_MasterSendData+0x94>
	{
		// wait till Txe is 1 indicating that DR is empty and ready to be filled with data
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_FLAG_TxE))))
		{
			pI2CHandle->pI2Cx->DR = *TxBuffer;
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	611a      	str	r2, [r3, #16]
			TxBuffer++;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
			len--;
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	71fb      	strb	r3, [r7, #7]
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_FLAG_TxE))))
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffa6 	bl	8000650 <I2C_GetFlagStatus>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0ea      	beq.n	80006e0 <I2C_MasterSendData+0x6a>
	while(len)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1f2      	bne.n	80006f6 <I2C_MasterSendData+0x80>
		}
	}

	// 6. Close the communication
	// 6.1 wait for Txe = 1 and BTF = 1 before generating the stop condition
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_FLAG_TxE))));
 8000710:	bf00      	nop
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff98 	bl	8000650 <I2C_GetFlagStatus>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d0f5      	beq.n	8000712 <I2C_MasterSendData+0x9c>
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_FLAG_BTF))));
 8000726:	bf00      	nop
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	2108      	movs	r1, #8
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff8e 	bl	8000650 <I2C_GetFlagStatus>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f6      	beq.n	8000728 <I2C_MasterSendData+0xb2>

	// 6.2 Generate the stop condition (if repeated start isn't enabled)
	if(Sr == I2C_NO_SR)
 800073a:	7e3b      	ldrb	r3, [r7, #24]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d107      	bne.n	8000750 <I2C_MasterSendData+0xda>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800074e:	601a      	str	r2, [r3, #0]
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800075e:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <RCC_GetPCLK1Value+0x9c>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	089b      	lsrs	r3, r3, #2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 800076c:	7a7b      	ldrb	r3, [r7, #9]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <RCC_GetPCLK1Value+0xa0>)
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e00b      	b.n	8000790 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000778:	7a7b      	ldrb	r3, [r7, #9]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d102      	bne.n	8000784 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <RCC_GetPCLK1Value+0xa4>)
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	e005      	b.n	8000790 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000784:	7a7b      	ldrb	r3, [r7, #9]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d102      	bne.n	8000790 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800078a:	f000 f83d 	bl	8000808 <RCC_GetPLLOutputClock>
 800078e:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <RCC_GetPCLK1Value+0x9c>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	091b      	lsrs	r3, r3, #4
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800079e:	7a3b      	ldrb	r3, [r7, #8]
 80007a0:	2b07      	cmp	r3, #7
 80007a2:	d802      	bhi.n	80007aa <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	72fb      	strb	r3, [r7, #11]
 80007a8:	e005      	b.n	80007b6 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80007aa:	7a3b      	ldrb	r3, [r7, #8]
 80007ac:	3b08      	subs	r3, #8
 80007ae:	4a14      	ldr	r2, [pc, #80]	@ (8000800 <RCC_GetPCLK1Value+0xa8>)
 80007b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b4:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <RCC_GetPCLK1Value+0x9c>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	0a9b      	lsrs	r3, r3, #10
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80007c4:	7a3b      	ldrb	r3, [r7, #8]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d802      	bhi.n	80007d0 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	72bb      	strb	r3, [r7, #10]
 80007ce:	e004      	b.n	80007da <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80007d0:	7a3b      	ldrb	r3, [r7, #8]
 80007d2:	3b04      	subs	r3, #4
 80007d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000804 <RCC_GetPCLK1Value+0xac>)
 80007d6:	5cd3      	ldrb	r3, [r2, r3]
 80007d8:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80007da:	7afb      	ldrb	r3, [r7, #11]
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	fbb2 f2f3 	udiv	r2, r2, r3
 80007e2:	7abb      	ldrb	r3, [r7, #10]
 80007e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e8:	607b      	str	r3, [r7, #4]

	return pclk1;
 80007ea:	687b      	ldr	r3, [r7, #4]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	00f42400 	.word	0x00f42400
 80007fc:	007a1200 	.word	0x007a1200
 8000800:	20000020 	.word	0x20000020
 8000804:	20000030 	.word	0x20000030

08000808 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

	return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
	...

08000818 <GPIO_ClockControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d162      	bne.n	80008f0 <GPIO_ClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a64      	ldr	r2, [pc, #400]	@ (80009c0 <GPIO_ClockControl+0x1a8>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d106      	bne.n	8000840 <GPIO_ClockControl+0x28>
		{
			GPIOA_CLK_EN();
 8000832:	4b64      	ldr	r3, [pc, #400]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a63      	ldr	r2, [pc, #396]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_CLK_DI();
		}
	}
}
 800083e:	e0b9      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a61      	ldr	r2, [pc, #388]	@ (80009c8 <GPIO_ClockControl+0x1b0>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d106      	bne.n	8000856 <GPIO_ClockControl+0x3e>
			GPIOB_CLK_EN();
 8000848:	4b5e      	ldr	r3, [pc, #376]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084c:	4a5d      	ldr	r2, [pc, #372]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000854:	e0ae      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a5c      	ldr	r2, [pc, #368]	@ (80009cc <GPIO_ClockControl+0x1b4>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d106      	bne.n	800086c <GPIO_ClockControl+0x54>
			GPIOC_CLK_EN();
 800085e:	4b59      	ldr	r3, [pc, #356]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a58      	ldr	r2, [pc, #352]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800086a:	e0a3      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a58      	ldr	r2, [pc, #352]	@ (80009d0 <GPIO_ClockControl+0x1b8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d106      	bne.n	8000882 <GPIO_ClockControl+0x6a>
			GPIOD_CLK_EN();
 8000874:	4b53      	ldr	r3, [pc, #332]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000878:	4a52      	ldr	r2, [pc, #328]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 800087a:	f043 0308 	orr.w	r3, r3, #8
 800087e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000880:	e098      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a53      	ldr	r2, [pc, #332]	@ (80009d4 <GPIO_ClockControl+0x1bc>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d106      	bne.n	8000898 <GPIO_ClockControl+0x80>
			GPIOE_CLK_EN();
 800088a:	4b4e      	ldr	r3, [pc, #312]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a4d      	ldr	r2, [pc, #308]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000890:	f043 0310 	orr.w	r3, r3, #16
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000896:	e08d      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a4f      	ldr	r2, [pc, #316]	@ (80009d8 <GPIO_ClockControl+0x1c0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d106      	bne.n	80008ae <GPIO_ClockControl+0x96>
			GPIOF_CLK_EN();
 80008a0:	4b48      	ldr	r3, [pc, #288]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a4:	4a47      	ldr	r2, [pc, #284]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80008a6:	f043 0320 	orr.w	r3, r3, #32
 80008aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008ac:	e082      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a4a      	ldr	r2, [pc, #296]	@ (80009dc <GPIO_ClockControl+0x1c4>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d106      	bne.n	80008c4 <GPIO_ClockControl+0xac>
			GPIOG_CLK_EN();
 80008b6:	4b43      	ldr	r3, [pc, #268]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a42      	ldr	r2, [pc, #264]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80008bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008c2:	e077      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a46      	ldr	r2, [pc, #280]	@ (80009e0 <GPIO_ClockControl+0x1c8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d106      	bne.n	80008da <GPIO_ClockControl+0xc2>
			GPIOH_CLK_EN();
 80008cc:	4b3d      	ldr	r3, [pc, #244]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d0:	4a3c      	ldr	r2, [pc, #240]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80008d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008d8:	e06c      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a41      	ldr	r2, [pc, #260]	@ (80009e4 <GPIO_ClockControl+0x1cc>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d168      	bne.n	80009b4 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_EN();
 80008e2:	4b38      	ldr	r3, [pc, #224]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a37      	ldr	r2, [pc, #220]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80008e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008ee:	e061      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a33      	ldr	r2, [pc, #204]	@ (80009c0 <GPIO_ClockControl+0x1a8>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d106      	bne.n	8000906 <GPIO_ClockControl+0xee>
			GPIOA_CLK_DI();
 80008f8:	4b32      	ldr	r3, [pc, #200]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fc:	4a31      	ldr	r2, [pc, #196]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80008fe:	f023 0301 	bic.w	r3, r3, #1
 8000902:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000904:	e056      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a2f      	ldr	r2, [pc, #188]	@ (80009c8 <GPIO_ClockControl+0x1b0>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <GPIO_ClockControl+0x104>
			GPIOB_CLK_DI();
 800090e:	4b2d      	ldr	r3, [pc, #180]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a2c      	ldr	r2, [pc, #176]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000914:	f023 0302 	bic.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800091a:	e04b      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a2b      	ldr	r2, [pc, #172]	@ (80009cc <GPIO_ClockControl+0x1b4>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d106      	bne.n	8000932 <GPIO_ClockControl+0x11a>
			GPIOC_CLK_DI();
 8000924:	4b27      	ldr	r3, [pc, #156]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	4a26      	ldr	r2, [pc, #152]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 800092a:	f023 0304 	bic.w	r3, r3, #4
 800092e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000930:	e040      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a26      	ldr	r2, [pc, #152]	@ (80009d0 <GPIO_ClockControl+0x1b8>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d106      	bne.n	8000948 <GPIO_ClockControl+0x130>
			GPIOD_CLK_DI();
 800093a:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a21      	ldr	r2, [pc, #132]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000940:	f023 0308 	bic.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000946:	e035      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a22      	ldr	r2, [pc, #136]	@ (80009d4 <GPIO_ClockControl+0x1bc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d106      	bne.n	800095e <GPIO_ClockControl+0x146>
			GPIOE_CLK_DI();
 8000950:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000954:	4a1b      	ldr	r2, [pc, #108]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000956:	f023 0310 	bic.w	r3, r3, #16
 800095a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800095c:	e02a      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a1d      	ldr	r2, [pc, #116]	@ (80009d8 <GPIO_ClockControl+0x1c0>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d106      	bne.n	8000974 <GPIO_ClockControl+0x15c>
			GPIOF_CLK_DI();
 8000966:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a16      	ldr	r2, [pc, #88]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 800096c:	f023 0320 	bic.w	r3, r3, #32
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000972:	e01f      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a19      	ldr	r2, [pc, #100]	@ (80009dc <GPIO_ClockControl+0x1c4>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d106      	bne.n	800098a <GPIO_ClockControl+0x172>
			GPIOG_CLK_DI();
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000980:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000986:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000988:	e014      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <GPIO_ClockControl+0x1c8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d106      	bne.n	80009a0 <GPIO_ClockControl+0x188>
			GPIOH_CLK_DI();
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a0b      	ldr	r2, [pc, #44]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 8000998:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800099e:	e009      	b.n	80009b4 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a10      	ldr	r2, [pc, #64]	@ (80009e4 <GPIO_ClockControl+0x1cc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d105      	bne.n	80009b4 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_DI();
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ac:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <GPIO_ClockControl+0x1ac>)
 80009ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80009b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40021400 	.word	0x40021400
 80009dc:	40021800 	.word	0x40021800
 80009e0:	40021c00 	.word	0x40021c00
 80009e4:	40022000 	.word	0x40022000

080009e8 <GPIO_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	GPIO_ClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff0e 	bl	8000818 <GPIO_ClockControl>

	uint32_t temp = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	795b      	ldrb	r3, [r3, #5]
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	d820      	bhi.n	8000a4a <GPIO_Init+0x62>
	{
		// Non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	795b      	ldrb	r3, [r3, #5]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	791b      	ldrb	r3, [r3, #4]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	791b      	ldrb	r3, [r3, #4]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	2103      	movs	r1, #3
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	4619      	mov	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	400a      	ands	r2, r1
 8000a36:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6819      	ldr	r1, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	430a      	orrs	r2, r1
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	e0c3      	b.n	8000bd2 <GPIO_Init+0x1ea>
	}
	else
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	791b      	ldrb	r3, [r3, #4]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2103      	movs	r1, #3
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	400a      	ands	r2, r1
 8000a66:	601a      	str	r2, [r3, #0]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	795b      	ldrb	r3, [r3, #5]
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d117      	bne.n	8000aa0 <GPIO_Init+0xb8>
		{
			// 1. Configure the FTSR
			// first we clear the corresponding RTSR bit so that we only have FTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a70:	4b96      	ldr	r3, [pc, #600]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	7912      	ldrb	r2, [r2, #4]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	408a      	lsls	r2, r1
 8000a7e:	43d2      	mvns	r2, r2
 8000a80:	4611      	mov	r1, r2
 8000a82:	4a92      	ldr	r2, [pc, #584]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000a84:	400b      	ands	r3, r1
 8000a86:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a88:	4b90      	ldr	r3, [pc, #576]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	7912      	ldrb	r2, [r2, #4]
 8000a90:	4611      	mov	r1, r2
 8000a92:	2201      	movs	r2, #1
 8000a94:	408a      	lsls	r2, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	4a8c      	ldr	r2, [pc, #560]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	60d3      	str	r3, [r2, #12]
 8000a9e:	e035      	b.n	8000b0c <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	795b      	ldrb	r3, [r3, #5]
 8000aa4:	2b05      	cmp	r3, #5
 8000aa6:	d117      	bne.n	8000ad8 <GPIO_Init+0xf0>
		{
			// 1. Configure the RTSR
			// first we clear the corresponding FTSR bit so that we only have RTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aa8:	4b88      	ldr	r3, [pc, #544]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	7912      	ldrb	r2, [r2, #4]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	408a      	lsls	r2, r1
 8000ab6:	43d2      	mvns	r2, r2
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4a84      	ldr	r2, [pc, #528]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000abc:	400b      	ands	r3, r1
 8000abe:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ac0:	4b82      	ldr	r3, [pc, #520]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	7912      	ldrb	r2, [r2, #4]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	2201      	movs	r2, #1
 8000acc:	408a      	lsls	r2, r1
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4a7e      	ldr	r2, [pc, #504]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000ad2:	430b      	orrs	r3, r1
 8000ad4:	6093      	str	r3, [r2, #8]
 8000ad6:	e019      	b.n	8000b0c <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	795b      	ldrb	r3, [r3, #5]
 8000adc:	2b06      	cmp	r3, #6
 8000ade:	d115      	bne.n	8000b0c <GPIO_Init+0x124>
		{
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ae0:	4b7a      	ldr	r3, [pc, #488]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	7912      	ldrb	r2, [r2, #4]
 8000ae8:	4611      	mov	r1, r2
 8000aea:	2201      	movs	r2, #1
 8000aec:	408a      	lsls	r2, r1
 8000aee:	4611      	mov	r1, r2
 8000af0:	4a76      	ldr	r2, [pc, #472]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000af2:	430b      	orrs	r3, r1
 8000af4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000af6:	4b75      	ldr	r3, [pc, #468]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	7912      	ldrb	r2, [r2, #4]
 8000afe:	4611      	mov	r1, r2
 8000b00:	2201      	movs	r2, #1
 8000b02:	408a      	lsls	r2, r1
 8000b04:	4611      	mov	r1, r2
 8000b06:	4a71      	ldr	r2, [pc, #452]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		// Calculate the register number EXTICR1/EXTICR2/EXTICR3/EXTICR4
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	791b      	ldrb	r3, [r3, #4]
 8000b10:	089b      	lsrs	r3, r3, #2
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	617b      	str	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a6d      	ldr	r2, [pc, #436]	@ (8000cd0 <GPIO_Init+0x2e8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d039      	beq.n	8000b94 <GPIO_Init+0x1ac>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a6b      	ldr	r2, [pc, #428]	@ (8000cd4 <GPIO_Init+0x2ec>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d032      	beq.n	8000b90 <GPIO_Init+0x1a8>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a6a      	ldr	r2, [pc, #424]	@ (8000cd8 <GPIO_Init+0x2f0>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d02b      	beq.n	8000b8c <GPIO_Init+0x1a4>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a68      	ldr	r2, [pc, #416]	@ (8000cdc <GPIO_Init+0x2f4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d024      	beq.n	8000b88 <GPIO_Init+0x1a0>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a67      	ldr	r2, [pc, #412]	@ (8000ce0 <GPIO_Init+0x2f8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d01d      	beq.n	8000b84 <GPIO_Init+0x19c>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a65      	ldr	r2, [pc, #404]	@ (8000ce4 <GPIO_Init+0x2fc>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d016      	beq.n	8000b80 <GPIO_Init+0x198>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a64      	ldr	r2, [pc, #400]	@ (8000ce8 <GPIO_Init+0x300>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d00f      	beq.n	8000b7c <GPIO_Init+0x194>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a62      	ldr	r2, [pc, #392]	@ (8000cec <GPIO_Init+0x304>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d008      	beq.n	8000b78 <GPIO_Init+0x190>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a61      	ldr	r2, [pc, #388]	@ (8000cf0 <GPIO_Init+0x308>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d101      	bne.n	8000b74 <GPIO_Init+0x18c>
 8000b70:	2308      	movs	r3, #8
 8000b72:	e010      	b.n	8000b96 <GPIO_Init+0x1ae>
 8000b74:	2300      	movs	r3, #0
 8000b76:	e00e      	b.n	8000b96 <GPIO_Init+0x1ae>
 8000b78:	2307      	movs	r3, #7
 8000b7a:	e00c      	b.n	8000b96 <GPIO_Init+0x1ae>
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	e00a      	b.n	8000b96 <GPIO_Init+0x1ae>
 8000b80:	2305      	movs	r3, #5
 8000b82:	e008      	b.n	8000b96 <GPIO_Init+0x1ae>
 8000b84:	2304      	movs	r3, #4
 8000b86:	e006      	b.n	8000b96 <GPIO_Init+0x1ae>
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e004      	b.n	8000b96 <GPIO_Init+0x1ae>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e002      	b.n	8000b96 <GPIO_Init+0x1ae>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <GPIO_Init+0x1ae>
 8000b94:	2300      	movs	r3, #0
 8000b96:	74fb      	strb	r3, [r7, #19]
		SYSCFG_CLK_EN();
 8000b98:	4b56      	ldr	r3, [pc, #344]	@ (8000cf4 <GPIO_Init+0x30c>)
 8000b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9c:	4a55      	ldr	r2, [pc, #340]	@ (8000cf4 <GPIO_Init+0x30c>)
 8000b9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba2:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp] |= (portcode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4));
 8000ba4:	4a54      	ldr	r2, [pc, #336]	@ (8000cf8 <GPIO_Init+0x310>)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bae:	7cfb      	ldrb	r3, [r7, #19]
 8000bb0:	4951      	ldr	r1, [pc, #324]	@ (8000cf8 <GPIO_Init+0x310>)
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000bbc:	4b43      	ldr	r3, [pc, #268]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	7912      	ldrb	r2, [r2, #4]
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	408a      	lsls	r2, r1
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4a3f      	ldr	r2, [pc, #252]	@ (8000ccc <GPIO_Init+0x2e4>)
 8000bce:	430b      	orrs	r3, r1
 8000bd0:	6013      	str	r3, [r2, #0]

	}

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	799b      	ldrb	r3, [r3, #6]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	400a      	ands	r2, r1
 8000c00:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6899      	ldr	r1, [r3, #8]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	609a      	str	r2, [r3, #8]

	// 3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	79db      	ldrb	r3, [r3, #7]
 8000c16:	461a      	mov	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	791b      	ldrb	r3, [r3, #4]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	791b      	ldrb	r3, [r3, #4]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2103      	movs	r1, #3
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	400a      	ands	r2, r1
 8000c40:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68d9      	ldr	r1, [r3, #12]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	60da      	str	r2, [r3, #12]

	// 4. Conigure the optype
 	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7a1b      	ldrb	r3, [r3, #8]
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	791b      	ldrb	r3, [r3, #4]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	791b      	ldrb	r3, [r3, #4]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	4619      	mov	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	6859      	ldr	r1, [r3, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	605a      	str	r2, [r3, #4]

	// 5. configure the alt function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	795b      	ldrb	r3, [r3, #5]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d139      	bne.n	8000d0c <GPIO_Init+0x324>
	{
		uint32_t pinpos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	791b      	ldrb	r3, [r3, #4]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	60fb      	str	r3, [r7, #12]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pinpos));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7a5b      	ldrb	r3, [r3, #9]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_7)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	791b      	ldrb	r3, [r3, #4]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	d820      	bhi.n	8000cfc <GPIO_Init+0x314>
		{
			// use AFL

			pGPIOHandle->pGPIOx->AFRL |= temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6a19      	ldr	r1, [r3, #32]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	621a      	str	r2, [r3, #32]
		{
			// use AFH
			pGPIOHandle->pGPIOx->AFRH |= temp;
		}
	}
}
 8000cca:	e01f      	b.n	8000d0c <GPIO_Init+0x324>
 8000ccc:	40013c00 	.word	0x40013c00
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020c00 	.word	0x40020c00
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40021400 	.word	0x40021400
 8000ce8:	40021800 	.word	0x40021800
 8000cec:	40021c00 	.word	0x40021c00
 8000cf0:	40022000 	.word	0x40022000
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <GPIO_ReadPin>:
 *
 * @Note			-
 *
 *************************************************************************************************/
uint8_t GPIO_ReadPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
	return (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691a      	ldr	r2, [r3, #16]
 8000d24:	78fb      	ldrb	r3, [r7, #3]
 8000d26:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	b2db      	uxtb	r3, r3
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <__libc_init_array>:
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	4d0d      	ldr	r5, [pc, #52]	@ (8000d74 <__libc_init_array+0x38>)
 8000d40:	4c0d      	ldr	r4, [pc, #52]	@ (8000d78 <__libc_init_array+0x3c>)
 8000d42:	1b64      	subs	r4, r4, r5
 8000d44:	10a4      	asrs	r4, r4, #2
 8000d46:	2600      	movs	r6, #0
 8000d48:	42a6      	cmp	r6, r4
 8000d4a:	d109      	bne.n	8000d60 <__libc_init_array+0x24>
 8000d4c:	4d0b      	ldr	r5, [pc, #44]	@ (8000d7c <__libc_init_array+0x40>)
 8000d4e:	4c0c      	ldr	r4, [pc, #48]	@ (8000d80 <__libc_init_array+0x44>)
 8000d50:	f000 f818 	bl	8000d84 <_init>
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	10a4      	asrs	r4, r4, #2
 8000d58:	2600      	movs	r6, #0
 8000d5a:	42a6      	cmp	r6, r4
 8000d5c:	d105      	bne.n	8000d6a <__libc_init_array+0x2e>
 8000d5e:	bd70      	pop	{r4, r5, r6, pc}
 8000d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d64:	4798      	blx	r3
 8000d66:	3601      	adds	r6, #1
 8000d68:	e7ee      	b.n	8000d48 <__libc_init_array+0xc>
 8000d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d6e:	4798      	blx	r3
 8000d70:	3601      	adds	r6, #1
 8000d72:	e7f2      	b.n	8000d5a <__libc_init_array+0x1e>
 8000d74:	08000da4 	.word	0x08000da4
 8000d78:	08000da4 	.word	0x08000da4
 8000d7c:	08000da4 	.word	0x08000da4
 8000d80:	08000da8 	.word	0x08000da8

08000d84 <_init>:
 8000d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d86:	bf00      	nop
 8000d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8a:	bc08      	pop	{r3}
 8000d8c:	469e      	mov	lr, r3
 8000d8e:	4770      	bx	lr

08000d90 <_fini>:
 8000d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d92:	bf00      	nop
 8000d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d96:	bc08      	pop	{r3}
 8000d98:	469e      	mov	lr, r3
 8000d9a:	4770      	bx	lr
