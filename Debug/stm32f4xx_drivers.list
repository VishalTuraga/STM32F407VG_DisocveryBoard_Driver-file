
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000082c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009b4  080009bc  000019bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009b4  080009b4  000019bc  2**0
                  CONTENTS
  4 .ARM          00000000  080009b4  080009b4  000019bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009b4  080009bc  000019bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009b4  080009b4  000019b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009b8  080009b8  000019b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000019bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000019bc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013d8  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004ac  00000000  00000000  00002dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00003270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000121  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025f4  00000000  00000000  00003511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b61  00000000  00000000  00005b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a113  00000000  00000000  00007666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011779  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000057c  00000000  00000000  000117bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00011d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800099c 	.word	0x0800099c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800099c 	.word	0x0800099c

080001c8 <SPI2_GPIOInits>:
	for(uint32_t i=0; i< 250000; i++);
}


SPI2_GPIOInits(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	GPIO_Handle_t 	SPIPins;
	SPIPins.pGPIOx = GPIOB;
 80001ce:	4b12      	ldr	r3, [pc, #72]	@ (8000218 <SPI2_GPIOInits+0x50>)
 80001d0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001d2:	2302      	movs	r3, #2
 80001d4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALTFN_AF5;
 80001d6:	2305      	movs	r3, #5
 80001d8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 80001da:	2300      	movs	r3, #0
 80001dc:	733b      	strb	r3, [r7, #12]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80001de:	230c      	movs	r3, #12
 80001e0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f957 	bl	8000498 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80001ea:	230d      	movs	r3, #13
 80001ec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 f951 	bl	8000498 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 80001f6:	230e      	movs	r3, #14
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f94b 	bl	8000498 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000202:	230f      	movs	r3, #15
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f945 	bl	8000498 <GPIO_Init>
}
 800020e:	bf00      	nop
 8000210:	4618      	mov	r0, r3
 8000212:	3710      	adds	r7, #16
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40020400 	.word	0x40020400

0800021c <SPI2_Inits>:

SPI2_Inits(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b08a      	sub	sp, #40	@ 0x28
 8000220:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI_2;
	SPI_2.pSPIx = SPI2;
 8000222:	4b0b      	ldr	r3, [pc, #44]	@ (8000250 <SPI2_Inits+0x34>)
 8000224:	607b      	str	r3, [r7, #4]
	SPI_2.SPIConfig.BusConfig = SPI_BUSCONFIG_FULLDUPLEX;
 8000226:	2301      	movs	r3, #1
 8000228:	727b      	strb	r3, [r7, #9]
	SPI_2.SPIConfig.DeviceMode = SPI_DEVICEMODE_MASTER;
 800022a:	2301      	movs	r3, #1
 800022c:	723b      	strb	r3, [r7, #8]
	SPI_2.SPIConfig.CPHA = SPI_CPHA_TRAILING_EDGE;
 800022e:	2300      	movs	r3, #0
 8000230:	737b      	strb	r3, [r7, #13]
	SPI_2.SPIConfig.CPOL = SPI_CPOL_LOW_IDLE_STATE;
 8000232:	2300      	movs	r3, #0
 8000234:	733b      	strb	r3, [r7, #12]
	SPI_2.SPIConfig.DFF = SPI_DFF_8BIT;
 8000236:	2300      	movs	r3, #0
 8000238:	72fb      	strb	r3, [r7, #11]
	SPI_2.SPIConfig.SclkSpeed = SPI_SCLKSPEED_FPCLK_8;
 800023a:	2302      	movs	r3, #2
 800023c:	72bb      	strb	r3, [r7, #10]
	SPI_2.SPIConfig.SSM = SPI_SSM_DI;
 800023e:	2300      	movs	r3, #0
 8000240:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI_2);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fb33 	bl	80008b0 <SPI_Init>

	while(1);
 800024a:	bf00      	nop
 800024c:	e7fd      	b.n	800024a <SPI2_Inits+0x2e>
 800024e:	bf00      	nop
 8000250:	40003800 	.word	0x40003800

08000254 <main>:

}

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0


	SPI2_GPIOInits();
 8000258:	f7ff ffb6 	bl	80001c8 <SPI2_GPIOInits>

	SPI2_Inits();
 800025c:	f7ff ffde 	bl	800021c <SPI2_Inits>

	SPI_SSOEConfig(SPI2, ENABLE);
 8000260:	2101      	movs	r1, #1
 8000262:	4803      	ldr	r0, [pc, #12]	@ (8000270 <main+0x1c>)
 8000264:	f000 faae 	bl	80007c4 <SPI_SSOEConfig>





	return 0;
 8000268:	2300      	movs	r3, #0
}
 800026a:	4618      	mov	r0, r3
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40003800 	.word	0x40003800

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	@ (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	@ (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	@ (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	@ (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	@ (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 fb57 	bl	8000954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ffd5 	bl	8000254 <main>

080002aa <LoopForever>:

LoopForever:
  b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	080009bc 	.word	0x080009bc
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000001c 	.word	0x2000001c

080002c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC_IRQHandler>
	...

080002c8 <GPIO_ClockControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d162      	bne.n	80003a0 <GPIO_ClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a64      	ldr	r2, [pc, #400]	@ (8000470 <GPIO_ClockControl+0x1a8>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d106      	bne.n	80002f0 <GPIO_ClockControl+0x28>
		{
			GPIOA_CLK_EN();
 80002e2:	4b64      	ldr	r3, [pc, #400]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e6:	4a63      	ldr	r2, [pc, #396]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_CLK_DI();
		}
	}
}
 80002ee:	e0b9      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a61      	ldr	r2, [pc, #388]	@ (8000478 <GPIO_ClockControl+0x1b0>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d106      	bne.n	8000306 <GPIO_ClockControl+0x3e>
			GPIOB_CLK_EN();
 80002f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fc:	4a5d      	ldr	r2, [pc, #372]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000304:	e0ae      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a5c      	ldr	r2, [pc, #368]	@ (800047c <GPIO_ClockControl+0x1b4>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_ClockControl+0x54>
			GPIOC_CLK_EN();
 800030e:	4b59      	ldr	r3, [pc, #356]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000312:	4a58      	ldr	r2, [pc, #352]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800031a:	e0a3      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a58      	ldr	r2, [pc, #352]	@ (8000480 <GPIO_ClockControl+0x1b8>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_ClockControl+0x6a>
			GPIOD_CLK_EN();
 8000324:	4b53      	ldr	r3, [pc, #332]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4a52      	ldr	r2, [pc, #328]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000330:	e098      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a53      	ldr	r2, [pc, #332]	@ (8000484 <GPIO_ClockControl+0x1bc>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_ClockControl+0x80>
			GPIOE_CLK_EN();
 800033a:	4b4e      	ldr	r3, [pc, #312]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033e:	4a4d      	ldr	r2, [pc, #308]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000340:	f043 0310 	orr.w	r3, r3, #16
 8000344:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000346:	e08d      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a4f      	ldr	r2, [pc, #316]	@ (8000488 <GPIO_ClockControl+0x1c0>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_ClockControl+0x96>
			GPIOF_CLK_EN();
 8000350:	4b48      	ldr	r3, [pc, #288]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a47      	ldr	r2, [pc, #284]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000356:	f043 0320 	orr.w	r3, r3, #32
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035c:	e082      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a4a      	ldr	r2, [pc, #296]	@ (800048c <GPIO_ClockControl+0x1c4>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_ClockControl+0xac>
			GPIOG_CLK_EN();
 8000366:	4b43      	ldr	r3, [pc, #268]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a42      	ldr	r2, [pc, #264]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 800036c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000372:	e077      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a46      	ldr	r2, [pc, #280]	@ (8000490 <GPIO_ClockControl+0x1c8>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIO_ClockControl+0xc2>
			GPIOH_CLK_EN();
 800037c:	4b3d      	ldr	r3, [pc, #244]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a3c      	ldr	r2, [pc, #240]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000388:	e06c      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a41      	ldr	r2, [pc, #260]	@ (8000494 <GPIO_ClockControl+0x1cc>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d168      	bne.n	8000464 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_EN();
 8000392:	4b38      	ldr	r3, [pc, #224]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000396:	4a37      	ldr	r2, [pc, #220]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800039c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039e:	e061      	b.n	8000464 <GPIO_ClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a33      	ldr	r2, [pc, #204]	@ (8000470 <GPIO_ClockControl+0x1a8>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_ClockControl+0xee>
			GPIOA_CLK_DI();
 80003a8:	4b32      	ldr	r3, [pc, #200]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ac:	4a31      	ldr	r2, [pc, #196]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b4:	e056      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000478 <GPIO_ClockControl+0x1b0>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_ClockControl+0x104>
			GPIOB_CLK_DI();
 80003be:	4b2d      	ldr	r3, [pc, #180]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80003c4:	f043 0302 	orr.w	r3, r3, #2
 80003c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ca:	e04b      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a2b      	ldr	r2, [pc, #172]	@ (800047c <GPIO_ClockControl+0x1b4>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_ClockControl+0x11a>
			GPIOC_CLK_DI();
 80003d4:	4b27      	ldr	r3, [pc, #156]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d8:	4a26      	ldr	r2, [pc, #152]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e0:	e040      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a26      	ldr	r2, [pc, #152]	@ (8000480 <GPIO_ClockControl+0x1b8>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_ClockControl+0x130>
			GPIOD_CLK_DI();
 80003ea:	4b22      	ldr	r3, [pc, #136]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ee:	4a21      	ldr	r2, [pc, #132]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 80003f0:	f043 0308 	orr.w	r3, r3, #8
 80003f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f6:	e035      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a22      	ldr	r2, [pc, #136]	@ (8000484 <GPIO_ClockControl+0x1bc>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_ClockControl+0x146>
			GPIOE_CLK_DI();
 8000400:	4b1c      	ldr	r3, [pc, #112]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000404:	4a1b      	ldr	r2, [pc, #108]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040c:	e02a      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a1d      	ldr	r2, [pc, #116]	@ (8000488 <GPIO_ClockControl+0x1c0>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_ClockControl+0x15c>
			GPIOF_CLK_DI();
 8000416:	4b17      	ldr	r3, [pc, #92]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041a:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 800041c:	f043 0320 	orr.w	r3, r3, #32
 8000420:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000422:	e01f      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a19      	ldr	r2, [pc, #100]	@ (800048c <GPIO_ClockControl+0x1c4>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_ClockControl+0x172>
			GPIOG_CLK_DI();
 800042c:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000430:	4a10      	ldr	r2, [pc, #64]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000436:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000438:	e014      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a14      	ldr	r2, [pc, #80]	@ (8000490 <GPIO_ClockControl+0x1c8>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_ClockControl+0x188>
			GPIOH_CLK_DI();
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000446:	4a0b      	ldr	r2, [pc, #44]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 8000448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800044c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800044e:	e009      	b.n	8000464 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a10      	ldr	r2, [pc, #64]	@ (8000494 <GPIO_ClockControl+0x1cc>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d105      	bne.n	8000464 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_DI();
 8000458:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045c:	4a05      	ldr	r2, [pc, #20]	@ (8000474 <GPIO_ClockControl+0x1ac>)
 800045e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000462:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40020000 	.word	0x40020000
 8000474:	40023800 	.word	0x40023800
 8000478:	40020400 	.word	0x40020400
 800047c:	40020800 	.word	0x40020800
 8000480:	40020c00 	.word	0x40020c00
 8000484:	40021000 	.word	0x40021000
 8000488:	40021400 	.word	0x40021400
 800048c:	40021800 	.word	0x40021800
 8000490:	40021c00 	.word	0x40021c00
 8000494:	40022000 	.word	0x40022000

08000498 <GPIO_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	GPIO_ClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2101      	movs	r1, #1
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff0e 	bl	80002c8 <GPIO_ClockControl>

	uint32_t temp = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	795b      	ldrb	r3, [r3, #5]
 80004b4:	2b03      	cmp	r3, #3
 80004b6:	d820      	bhi.n	80004fa <GPIO_Init+0x62>
	{
		// Non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	795b      	ldrb	r3, [r3, #5]
 80004bc:	461a      	mov	r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	fa02 f303 	lsl.w	r3, r2, r3
 80004c8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	2103      	movs	r1, #3
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	43db      	mvns	r3, r3
 80004de:	4619      	mov	r1, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	400a      	ands	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	6819      	ldr	r1, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	697a      	ldr	r2, [r7, #20]
 80004f4:	430a      	orrs	r2, r1
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	e0c3      	b.n	8000682 <GPIO_Init+0x1ea>
	}
	else
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	791b      	ldrb	r3, [r3, #4]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	2103      	movs	r1, #3
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	43db      	mvns	r3, r3
 800050e:	4619      	mov	r1, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	400a      	ands	r2, r1
 8000516:	601a      	str	r2, [r3, #0]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	795b      	ldrb	r3, [r3, #5]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d117      	bne.n	8000550 <GPIO_Init+0xb8>
		{
			// 1. Configure the FTSR
			// first we clear the corresponding RTSR bit so that we only have FTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000520:	4b96      	ldr	r3, [pc, #600]	@ (800077c <GPIO_Init+0x2e4>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7912      	ldrb	r2, [r2, #4]
 8000528:	4611      	mov	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	408a      	lsls	r2, r1
 800052e:	43d2      	mvns	r2, r2
 8000530:	4611      	mov	r1, r2
 8000532:	4a92      	ldr	r2, [pc, #584]	@ (800077c <GPIO_Init+0x2e4>)
 8000534:	400b      	ands	r3, r1
 8000536:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000538:	4b90      	ldr	r3, [pc, #576]	@ (800077c <GPIO_Init+0x2e4>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	7912      	ldrb	r2, [r2, #4]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a8c      	ldr	r2, [pc, #560]	@ (800077c <GPIO_Init+0x2e4>)
 800054a:	430b      	orrs	r3, r1
 800054c:	60d3      	str	r3, [r2, #12]
 800054e:	e035      	b.n	80005bc <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	2b05      	cmp	r3, #5
 8000556:	d117      	bne.n	8000588 <GPIO_Init+0xf0>
		{
			// 1. Configure the RTSR
			// first we clear the corresponding FTSR bit so that we only have RTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000558:	4b88      	ldr	r3, [pc, #544]	@ (800077c <GPIO_Init+0x2e4>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	43d2      	mvns	r2, r2
 8000568:	4611      	mov	r1, r2
 800056a:	4a84      	ldr	r2, [pc, #528]	@ (800077c <GPIO_Init+0x2e4>)
 800056c:	400b      	ands	r3, r1
 800056e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000570:	4b82      	ldr	r3, [pc, #520]	@ (800077c <GPIO_Init+0x2e4>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a7e      	ldr	r2, [pc, #504]	@ (800077c <GPIO_Init+0x2e4>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6093      	str	r3, [r2, #8]
 8000586:	e019      	b.n	80005bc <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	2b06      	cmp	r3, #6
 800058e:	d115      	bne.n	80005bc <GPIO_Init+0x124>
		{
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000590:	4b7a      	ldr	r3, [pc, #488]	@ (800077c <GPIO_Init+0x2e4>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7912      	ldrb	r2, [r2, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	4a76      	ldr	r2, [pc, #472]	@ (800077c <GPIO_Init+0x2e4>)
 80005a2:	430b      	orrs	r3, r1
 80005a4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a6:	4b75      	ldr	r3, [pc, #468]	@ (800077c <GPIO_Init+0x2e4>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7912      	ldrb	r2, [r2, #4]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a71      	ldr	r2, [pc, #452]	@ (800077c <GPIO_Init+0x2e4>)
 80005b8:	430b      	orrs	r3, r1
 80005ba:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		// Calculate the register number EXTICR1/EXTICR2/EXTICR3/EXTICR4
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	089b      	lsrs	r3, r3, #2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	617b      	str	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a6d      	ldr	r2, [pc, #436]	@ (8000780 <GPIO_Init+0x2e8>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d039      	beq.n	8000644 <GPIO_Init+0x1ac>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a6b      	ldr	r2, [pc, #428]	@ (8000784 <GPIO_Init+0x2ec>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d032      	beq.n	8000640 <GPIO_Init+0x1a8>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a6a      	ldr	r2, [pc, #424]	@ (8000788 <GPIO_Init+0x2f0>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d02b      	beq.n	800063c <GPIO_Init+0x1a4>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a68      	ldr	r2, [pc, #416]	@ (800078c <GPIO_Init+0x2f4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d024      	beq.n	8000638 <GPIO_Init+0x1a0>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a67      	ldr	r2, [pc, #412]	@ (8000790 <GPIO_Init+0x2f8>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d01d      	beq.n	8000634 <GPIO_Init+0x19c>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a65      	ldr	r2, [pc, #404]	@ (8000794 <GPIO_Init+0x2fc>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d016      	beq.n	8000630 <GPIO_Init+0x198>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a64      	ldr	r2, [pc, #400]	@ (8000798 <GPIO_Init+0x300>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d00f      	beq.n	800062c <GPIO_Init+0x194>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a62      	ldr	r2, [pc, #392]	@ (800079c <GPIO_Init+0x304>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d008      	beq.n	8000628 <GPIO_Init+0x190>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a61      	ldr	r2, [pc, #388]	@ (80007a0 <GPIO_Init+0x308>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d101      	bne.n	8000624 <GPIO_Init+0x18c>
 8000620:	2308      	movs	r3, #8
 8000622:	e010      	b.n	8000646 <GPIO_Init+0x1ae>
 8000624:	2300      	movs	r3, #0
 8000626:	e00e      	b.n	8000646 <GPIO_Init+0x1ae>
 8000628:	2307      	movs	r3, #7
 800062a:	e00c      	b.n	8000646 <GPIO_Init+0x1ae>
 800062c:	2306      	movs	r3, #6
 800062e:	e00a      	b.n	8000646 <GPIO_Init+0x1ae>
 8000630:	2305      	movs	r3, #5
 8000632:	e008      	b.n	8000646 <GPIO_Init+0x1ae>
 8000634:	2304      	movs	r3, #4
 8000636:	e006      	b.n	8000646 <GPIO_Init+0x1ae>
 8000638:	2303      	movs	r3, #3
 800063a:	e004      	b.n	8000646 <GPIO_Init+0x1ae>
 800063c:	2302      	movs	r3, #2
 800063e:	e002      	b.n	8000646 <GPIO_Init+0x1ae>
 8000640:	2301      	movs	r3, #1
 8000642:	e000      	b.n	8000646 <GPIO_Init+0x1ae>
 8000644:	2300      	movs	r3, #0
 8000646:	74fb      	strb	r3, [r7, #19]
		SYSCFG_CLK_EN();
 8000648:	4b56      	ldr	r3, [pc, #344]	@ (80007a4 <GPIO_Init+0x30c>)
 800064a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064c:	4a55      	ldr	r2, [pc, #340]	@ (80007a4 <GPIO_Init+0x30c>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp] |= (portcode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4));
 8000654:	4a54      	ldr	r2, [pc, #336]	@ (80007a8 <GPIO_Init+0x310>)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	3302      	adds	r3, #2
 800065a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800065e:	7cfb      	ldrb	r3, [r7, #19]
 8000660:	4951      	ldr	r1, [pc, #324]	@ (80007a8 <GPIO_Init+0x310>)
 8000662:	431a      	orrs	r2, r3
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	3302      	adds	r3, #2
 8000668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800066c:	4b43      	ldr	r3, [pc, #268]	@ (800077c <GPIO_Init+0x2e4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	7912      	ldrb	r2, [r2, #4]
 8000674:	4611      	mov	r1, r2
 8000676:	2201      	movs	r2, #1
 8000678:	408a      	lsls	r2, r1
 800067a:	4611      	mov	r1, r2
 800067c:	4a3f      	ldr	r2, [pc, #252]	@ (800077c <GPIO_Init+0x2e4>)
 800067e:	430b      	orrs	r3, r1
 8000680:	6013      	str	r3, [r2, #0]

	}

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	799b      	ldrb	r3, [r3, #6]
 8000686:	461a      	mov	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	791b      	ldrb	r3, [r3, #4]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	2103      	movs	r1, #3
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	43db      	mvns	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	400a      	ands	r2, r1
 80006b0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6899      	ldr	r1, [r3, #8]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	430a      	orrs	r2, r1
 80006c0:	609a      	str	r2, [r3, #8]

	// 3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	79db      	ldrb	r3, [r3, #7]
 80006c6:	461a      	mov	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	68da      	ldr	r2, [r3, #12]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	2103      	movs	r1, #3
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	43db      	mvns	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	400a      	ands	r2, r1
 80006f0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	68d9      	ldr	r1, [r3, #12]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	430a      	orrs	r2, r1
 8000700:	60da      	str	r2, [r3, #12]

	// 4. Conigure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	7a1b      	ldrb	r3, [r3, #8]
 8000706:	461a      	mov	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	685a      	ldr	r2, [r3, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	2101      	movs	r1, #1
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	400a      	ands	r2, r1
 800072e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6859      	ldr	r1, [r3, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	430a      	orrs	r2, r1
 800073e:	605a      	str	r2, [r3, #4]

	// 5. configure the alt function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	795b      	ldrb	r3, [r3, #5]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d139      	bne.n	80007bc <GPIO_Init+0x324>
	{
		uint32_t pinpos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	f003 0307 	and.w	r3, r3, #7
 8000750:	60fb      	str	r3, [r7, #12]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pinpos));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7a5b      	ldrb	r3, [r3, #9]
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_7)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	2b07      	cmp	r3, #7
 8000768:	d820      	bhi.n	80007ac <GPIO_Init+0x314>
		{
			// use AFL

			pGPIOHandle->pGPIOx->AFRL |= temp;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6a19      	ldr	r1, [r3, #32]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	430a      	orrs	r2, r1
 8000778:	621a      	str	r2, [r3, #32]
		{
			// use AFH
			pGPIOHandle->pGPIOx->AFRH |= temp;
		}
	}
}
 800077a:	e01f      	b.n	80007bc <GPIO_Init+0x324>
 800077c:	40013c00 	.word	0x40013c00
 8000780:	40020000 	.word	0x40020000
 8000784:	40020400 	.word	0x40020400
 8000788:	40020800 	.word	0x40020800
 800078c:	40020c00 	.word	0x40020c00
 8000790:	40021000 	.word	0x40021000
 8000794:	40021400 	.word	0x40021400
 8000798:	40021800 	.word	0x40021800
 800079c:	40021c00 	.word	0x40021c00
 80007a0:	40022000 	.word	0x40022000
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFRH |= temp;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	430a      	orrs	r2, r1
 80007ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SPI_SSOEConfig>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d106      	bne.n	80007e4 <SPI_SSOEConfig+0x20>
	{
		SPI2->CR1 |= (1 << SPI_CR2_SSOE);
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <SPI_SSOEConfig+0x38>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <SPI_SSOEConfig+0x38>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6013      	str	r3, [r2, #0]
	}
	else
	{
		SPI2->CR1 &= ~(1 << SPI_CR2_SSOE);
	}
}
 80007e2:	e005      	b.n	80007f0 <SPI_SSOEConfig+0x2c>
		SPI2->CR1 &= ~(1 << SPI_CR2_SSOE);
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <SPI_SSOEConfig+0x38>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <SPI_SSOEConfig+0x38>)
 80007ea:	f023 0304 	bic.w	r3, r3, #4
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40003800 	.word	0x40003800

08000800 <SPI_ClockControl>:
 * @Note			-
 *
 *************************************************************************************************/
//#define SPI1							((GPIO_RegDef_t*)SPI1_BASEADDR)
void SPI_ClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d120      	bne.n	8000854 <SPI_ClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a22      	ldr	r2, [pc, #136]	@ (80008a0 <SPI_ClockControl+0xa0>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <SPI_ClockControl+0x28>
		{
			SPI1_CLK_EN();
 800081a:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <SPI_ClockControl+0xa4>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	4a21      	ldr	r2, [pc, #132]	@ (80008a4 <SPI_ClockControl+0xa4>)
 8000820:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000824:	6453      	str	r3, [r2, #68]	@ 0x44
		else if(pSPIx == SPI3)
		{
			SPI3_CLK_DI();
		}
	}
}
 8000826:	e035      	b.n	8000894 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a1f      	ldr	r2, [pc, #124]	@ (80008a8 <SPI_ClockControl+0xa8>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <SPI_ClockControl+0x3e>
			SPI2_CLK_EN();
 8000830:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <SPI_ClockControl+0xa4>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <SPI_ClockControl+0xa4>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800083a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800083c:	e02a      	b.n	8000894 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI3)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a1a      	ldr	r2, [pc, #104]	@ (80008ac <SPI_ClockControl+0xac>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d126      	bne.n	8000894 <SPI_ClockControl+0x94>
			SPI3_CLK_EN();
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <SPI_ClockControl+0xa4>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	4a16      	ldr	r2, [pc, #88]	@ (80008a4 <SPI_ClockControl+0xa4>)
 800084c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000852:	e01f      	b.n	8000894 <SPI_ClockControl+0x94>
		if(pSPIx == SPI1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <SPI_ClockControl+0xa0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <SPI_ClockControl+0x6a>
			SPI1_CLK_DI();
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <SPI_ClockControl+0xa4>)
 800085e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000860:	4a10      	ldr	r2, [pc, #64]	@ (80008a4 <SPI_ClockControl+0xa4>)
 8000862:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000866:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000868:	e014      	b.n	8000894 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a0e      	ldr	r2, [pc, #56]	@ (80008a8 <SPI_ClockControl+0xa8>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <SPI_ClockControl+0x80>
			SPI2_CLK_DI();
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <SPI_ClockControl+0xa4>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	4a0b      	ldr	r2, [pc, #44]	@ (80008a4 <SPI_ClockControl+0xa4>)
 8000878:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800087c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800087e:	e009      	b.n	8000894 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI3)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <SPI_ClockControl+0xac>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d105      	bne.n	8000894 <SPI_ClockControl+0x94>
			SPI3_CLK_DI();
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <SPI_ClockControl+0xa4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <SPI_ClockControl+0xa4>)
 800088e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000892:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40013000 	.word	0x40013000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40003800 	.word	0x40003800
 80008ac:	40003c00 	.word	0x40003c00

080008b0 <SPI_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	//	uint8_t DFF;						/*DFF can either be 8 bit or 16 bits*/
	//	uint8_t CPOL;						/*CPOL is used to select the clock polarity*/
	//	uint8_t CPHA;						/*CPHA is used to select the clock phase*/
	//	uint8_t SSM;						/*SSM is Slave Select Management which is ued to select what slave to communicate to*/

	uint32_t temp = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]

	// enable peripheral clock
	SPI_ClockControl(pSPIHandle->pSPIx, ENABLE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff9c 	bl	8000800 <SPI_ClockControl>

	// 1. Configure the device mode
	temp = pSPIHandle->SPIConfig.BusConfig << 2;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]

	// 2. Configure the Bus communication type
	if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_FULLDUPLEX)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	795b      	ldrb	r3, [r3, #5]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d104      	bne.n	80008e2 <SPI_Init+0x32>
	{
		//Clear BIDIMODE (bit 15)
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e014      	b.n	800090c <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_HALFDUPLES)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	795b      	ldrb	r3, [r3, #5]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d104      	bne.n	80008f4 <SPI_Init+0x44>
	{
		//Set BIDIMODE (bit 15)
		temp |= (1 << SPI_CR1_BIDIMODE);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e00b      	b.n	800090c <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_SIMPLEX)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	795b      	ldrb	r3, [r3, #5]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d107      	bne.n	800090c <SPI_Init+0x5c>
	{
		//clear BIDIMODE (bit 15) and set RXONLY (bit 10)
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000902:	60fb      	str	r3, [r7, #12]
		temp |= (1 << SPI_CR1_RXONLY);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800090a:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the Clock Speed
	temp |= pSPIHandle->SPIConfig.SclkSpeed << SPI_CR1_BR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	799b      	ldrb	r3, [r3, #6]
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	4313      	orrs	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]

	// 4. DFF configuration
	temp |= pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	79db      	ldrb	r3, [r3, #7]
 800091c:	02db      	lsls	r3, r3, #11
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4313      	orrs	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

	// 5. Configure CPOL
	temp |= pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	7a1b      	ldrb	r3, [r3, #8]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]

	// 6. Configure CPHA
	temp |= pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7a5b      	ldrb	r3, [r3, #9]
 8000934:	461a      	mov	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	4313      	orrs	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 |= temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	6819      	ldr	r1, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	430a      	orrs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]

}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <__libc_init_array>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	4d0d      	ldr	r5, [pc, #52]	@ (800098c <__libc_init_array+0x38>)
 8000958:	4c0d      	ldr	r4, [pc, #52]	@ (8000990 <__libc_init_array+0x3c>)
 800095a:	1b64      	subs	r4, r4, r5
 800095c:	10a4      	asrs	r4, r4, #2
 800095e:	2600      	movs	r6, #0
 8000960:	42a6      	cmp	r6, r4
 8000962:	d109      	bne.n	8000978 <__libc_init_array+0x24>
 8000964:	4d0b      	ldr	r5, [pc, #44]	@ (8000994 <__libc_init_array+0x40>)
 8000966:	4c0c      	ldr	r4, [pc, #48]	@ (8000998 <__libc_init_array+0x44>)
 8000968:	f000 f818 	bl	800099c <_init>
 800096c:	1b64      	subs	r4, r4, r5
 800096e:	10a4      	asrs	r4, r4, #2
 8000970:	2600      	movs	r6, #0
 8000972:	42a6      	cmp	r6, r4
 8000974:	d105      	bne.n	8000982 <__libc_init_array+0x2e>
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f855 3b04 	ldr.w	r3, [r5], #4
 800097c:	4798      	blx	r3
 800097e:	3601      	adds	r6, #1
 8000980:	e7ee      	b.n	8000960 <__libc_init_array+0xc>
 8000982:	f855 3b04 	ldr.w	r3, [r5], #4
 8000986:	4798      	blx	r3
 8000988:	3601      	adds	r6, #1
 800098a:	e7f2      	b.n	8000972 <__libc_init_array+0x1e>
 800098c:	080009b4 	.word	0x080009b4
 8000990:	080009b4 	.word	0x080009b4
 8000994:	080009b4 	.word	0x080009b4
 8000998:	080009b8 	.word	0x080009b8

0800099c <_init>:
 800099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099e:	bf00      	nop
 80009a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a2:	bc08      	pop	{r3}
 80009a4:	469e      	mov	lr, r3
 80009a6:	4770      	bx	lr

080009a8 <_fini>:
 80009a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009aa:	bf00      	nop
 80009ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ae:	bc08      	pop	{r3}
 80009b0:	469e      	mov	lr, r3
 80009b2:	4770      	bx	lr
