
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002094  08002094  00003094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020d8  080020d8  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  080020d8  080020d8  000030d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020e0  080020e0  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020e0  080020e0  000030e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020e4  080020e4  000030e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080020e8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          00000390  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ec  200003ec  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e06  00000000  00000000  00004086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007fb  00000000  00000000  00005e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  00006688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c7  00000000  00000000  000068f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003972  00000000  00000000  00006ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002aff  00000000  00000000  0000a429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cd4a  00000000  00000000  0000cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00019c72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001094  00000000  00000000  00019cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0001ad4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800207c 	.word	0x0800207c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800207c 	.word	0x0800207c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_Inits>:




void GPIO_Inits(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000276:	4b12      	ldr	r3, [pc, #72]	@ (80002c0 <GPIO_Inits+0x50>)
 8000278:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800027a:	2302      	movs	r3, #2
 800027c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALTFN_AF5;
 800027e:	2305      	movs	r3, #5
 8000280:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 8000282:	2300      	movs	r3, #0
 8000284:	733b      	strb	r3, [r7, #12]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000286:	230c      	movs	r3, #12
 8000288:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fab7 	bl	8000800 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000292:	230d      	movs	r3, #13
 8000294:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fab1 	bl	8000800 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 800029e:	230e      	movs	r3, #14
 80002a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 faab 	bl	8000800 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 80002aa:	230f      	movs	r3, #15
 80002ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 faa5 	bl	8000800 <GPIO_Init>
}
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40020400 	.word	0x40020400

080002c4 <SPI_Inits>:

void SPI_Inits(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08a      	sub	sp, #40	@ 0x28
 80002c8:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI_2;
	SPI_2.pSPIx = SPI2;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <SPI_Inits+0x38>)
 80002cc:	607b      	str	r3, [r7, #4]
	SPI_2.SPIConfig.BusConfig = SPI_BUSCONFIG_FULLDUPLEX;
 80002ce:	2301      	movs	r3, #1
 80002d0:	727b      	strb	r3, [r7, #9]
	SPI_2.SPIConfig.DeviceMode = SPI_DEVICEMODE_MASTER;
 80002d2:	2301      	movs	r3, #1
 80002d4:	723b      	strb	r3, [r7, #8]
	SPI_2.SPIConfig.CPHA = SPI_CPHA_TRAILING_EDGE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	737b      	strb	r3, [r7, #13]
	SPI_2.SPIConfig.CPOL = SPI_CPOL_LOW_IDLE_STATE;
 80002da:	2300      	movs	r3, #0
 80002dc:	733b      	strb	r3, [r7, #12]
	SPI_2.SPIConfig.DFF = SPI_DFF_8BIT;
 80002de:	2300      	movs	r3, #0
 80002e0:	72fb      	strb	r3, [r7, #11]
	SPI_2.SPIConfig.SclkSpeed = SPI_SCLKSPEED_FPCLK_32;
 80002e2:	2304      	movs	r3, #4
 80002e4:	72bb      	strb	r3, [r7, #10]
	SPI_2.SPIConfig.SSM = SPI_SSM_DI;
 80002e6:	2300      	movs	r3, #0
 80002e8:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI_2);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fd55 	bl	8000d9c <SPI_Init>
}
 80002f2:	bf00      	nop
 80002f4:	3728      	adds	r7, #40	@ 0x28
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40003800 	.word	0x40003800

08000300 <Slave_GPIO_InterruptPinInit>:

void Slave_GPIO_InterruptPinInit(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI_IT_Pin;
	memset(&SPI_IT_Pin,0,sizeof(SPI_IT_Pin));
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	220c      	movs	r2, #12
 800030a:	2100      	movs	r1, #0
 800030c:	4618      	mov	r0, r3
 800030e:	f001 f8a2 	bl	8001456 <memset>
	SPI_IT_Pin.pGPIOx = GPIOD;
 8000312:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <Slave_GPIO_InterruptPinInit+0x40>)
 8000314:	607b      	str	r3, [r7, #4]
	SPI_IT_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000316:	2306      	movs	r3, #6
 8000318:	723b      	strb	r3, [r7, #8]
	SPI_IT_Pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800031a:	2304      	movs	r3, #4
 800031c:	727b      	strb	r3, [r7, #9]
	SPI_IT_Pin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OUT_SPEED_LOW;
 800031e:	2300      	movs	r3, #0
 8000320:	72bb      	strb	r3, [r7, #10]
	SPI_IT_Pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NONE;
 8000322:	2300      	movs	r3, #0
 8000324:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&SPI_IT_Pin);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fa69 	bl	8000800 <GPIO_Init>

	GPIO_IRQITConfig(IRQ_EXTI9_5,ENABLE);
 800032e:	2101      	movs	r1, #1
 8000330:	2017      	movs	r0, #23
 8000332:	f000 fbfb 	bl	8000b2c <GPIO_IRQITConfig>
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40020c00 	.word	0x40020c00

08000344 <main>:

int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xff;
 800034a:	23ff      	movs	r3, #255	@ 0xff
 800034c:	71fb      	strb	r3, [r7, #7]

	GPIO_Inits();
 800034e:	f7ff ff8f 	bl	8000270 <GPIO_Inits>

	SPI_Inits();
 8000352:	f7ff ffb7 	bl	80002c4 <SPI_Inits>

	Slave_GPIO_InterruptPinInit();
 8000356:	f7ff ffd3 	bl	8000300 <Slave_GPIO_InterruptPinInit>

	SPI_SSOEConfig(SPI2, ENABLE);
 800035a:	2101      	movs	r1, #1
 800035c:	4822      	ldr	r0, [pc, #136]	@ (80003e8 <main+0xa4>)
 800035e:	f000 fc89 	bl	8000c74 <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_SPI2, ENABLE);
 8000362:	2101      	movs	r1, #1
 8000364:	2024      	movs	r0, #36	@ 0x24
 8000366:	f000 fd6b 	bl	8000e40 <SPI_IRQInterruptConfig>

	while(1)
	{
		while(!dataAvailable); // wait till data available interrupt from transmitter device (slave)
 800036a:	bf00      	nop
 800036c:	4b1f      	ldr	r3, [pc, #124]	@ (80003ec <main+0xa8>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	b2db      	uxtb	r3, r3
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0fa      	beq.n	800036c <main+0x28>

		GPIO_IRQITConfig(IRQ_EXTI9_5, DISABLE);
 8000376:	2100      	movs	r1, #0
 8000378:	2017      	movs	r0, #23
 800037a:	f000 fbd7 	bl	8000b2c <GPIO_IRQITConfig>

		// enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	4819      	ldr	r0, [pc, #100]	@ (80003e8 <main+0xa4>)
 8000382:	f000 fc95 	bl	8000cb0 <SPI_PeripheralControl>

		while(!rcvStop)
 8000386:	e012      	b.n	80003ae <main+0x6a>
		{
			// fetch the data from the SPI peripheral byte by byte in interrupt mode
			while(SPI_SendDataIT(&SPI2handle, &dummy, 1) == SPI_BUSY_IN_TX); // send a dummy byte before fetching data
 8000388:	bf00      	nop
 800038a:	1dfb      	adds	r3, r7, #7
 800038c:	2201      	movs	r2, #1
 800038e:	4619      	mov	r1, r3
 8000390:	4817      	ldr	r0, [pc, #92]	@ (80003f0 <main+0xac>)
 8000392:	f000 fece 	bl	8001132 <SPI_SendDataIT>
 8000396:	4603      	mov	r3, r0
 8000398:	2b02      	cmp	r3, #2
 800039a:	d0f6      	beq.n	800038a <main+0x46>
			while(SPI_ReceiveDataIT(&SPI2handle, &ReadByte,1) == SPI_BUSY_IN_RX); //
 800039c:	bf00      	nop
 800039e:	2201      	movs	r2, #1
 80003a0:	4914      	ldr	r1, [pc, #80]	@ (80003f4 <main+0xb0>)
 80003a2:	4813      	ldr	r0, [pc, #76]	@ (80003f0 <main+0xac>)
 80003a4:	f000 fee8 	bl	8001178 <SPI_ReceiveDataIT>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d0f7      	beq.n	800039e <main+0x5a>
		while(!rcvStop)
 80003ae:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <main+0xb4>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0e7      	beq.n	8000388 <main+0x44>
		}

		// confirm SPI is not busy
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 80003b8:	bf00      	nop
 80003ba:	2180      	movs	r1, #128	@ 0x80
 80003bc:	480a      	ldr	r0, [pc, #40]	@ (80003e8 <main+0xa4>)
 80003be:	f000 fe40 	bl	8001042 <SPI_GetFlagStatus>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1f8      	bne.n	80003ba <main+0x76>

		// Disable the SPI2 Peripheral
		SPI_PeripheralControl(SPI2, DISABLE);
 80003c8:	2100      	movs	r1, #0
 80003ca:	4807      	ldr	r0, [pc, #28]	@ (80003e8 <main+0xa4>)
 80003cc:	f000 fc70 	bl	8000cb0 <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 80003d0:	490a      	ldr	r1, [pc, #40]	@ (80003fc <main+0xb8>)
 80003d2:	480b      	ldr	r0, [pc, #44]	@ (8000400 <main+0xbc>)
 80003d4:	f000 ffea 	bl	80013ac <iprintf>

		dataAvailable = 0;
 80003d8:	4b04      	ldr	r3, [pc, #16]	@ (80003ec <main+0xa8>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]

		GPIO_IRQITConfig(IRQ_EXTI9_5, ENABLE);
 80003de:	2101      	movs	r1, #1
 80003e0:	2017      	movs	r0, #23
 80003e2:	f000 fba3 	bl	8000b2c <GPIO_IRQITConfig>
		while(!dataAvailable); // wait till data available interrupt from transmitter device (slave)
 80003e6:	e7c0      	b.n	800036a <main+0x26>
 80003e8:	40003800 	.word	0x40003800
 80003ec:	20000079 	.word	0x20000079
 80003f0:	2000007c 	.word	0x2000007c
 80003f4:	20000294 	.word	0x20000294
 80003f8:	20000078 	.word	0x20000078
 80003fc:	200000a0 	.word	0x200000a0
 8000400:	08002094 	.word	0x08002094

08000404 <EXTI9_5_IRQHandler>:
	return 0;
}

// slave data available interrupt handler
void EXTI9_5_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_6);
 8000408:	2006      	movs	r0, #6
 800040a:	f000 fc13 	bl	8000c34 <GPIO_IRQHandling>
	dataAvailable = 1;
 800040e:	4b02      	ldr	r3, [pc, #8]	@ (8000418 <EXTI9_5_IRQHandler+0x14>)
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000079 	.word	0x20000079

0800041c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI2handle);
 8000420:	4802      	ldr	r0, [pc, #8]	@ (800042c <SPI2_IRQHandler+0x10>)
 8000422:	f000 fe39 	bl	8001098 <SPI_IRQHandling>
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	2000007c 	.word	0x2000007c

08000430 <SPI_ApplicationEventCallback>:

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	// in the Rx complete Event, copy data in the rcv buffer. '\0' indicates end of message (rcvStop = 1)
	if(AppEv == SPI_EVENT_RX_CMPLT)
 800043c:	78fb      	ldrb	r3, [r7, #3]
 800043e:	2b02      	cmp	r3, #2
 8000440:	d11f      	bne.n	8000482 <SPI_ApplicationEventCallback+0x52>
	{
		RcvBuff[i++] = ReadByte;
 8000442:	4b12      	ldr	r3, [pc, #72]	@ (800048c <SPI_ApplicationEventCallback+0x5c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	4910      	ldr	r1, [pc, #64]	@ (800048c <SPI_ApplicationEventCallback+0x5c>)
 800044a:	600a      	str	r2, [r1, #0]
 800044c:	4a10      	ldr	r2, [pc, #64]	@ (8000490 <SPI_ApplicationEventCallback+0x60>)
 800044e:	7812      	ldrb	r2, [r2, #0]
 8000450:	b2d1      	uxtb	r1, r2
 8000452:	4a10      	ldr	r2, [pc, #64]	@ (8000494 <SPI_ApplicationEventCallback+0x64>)
 8000454:	54d1      	strb	r1, [r2, r3]
		if(ReadByte == '\0' || (i == MAX_LEN))
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <SPI_ApplicationEventCallback+0x60>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	d004      	beq.n	800046a <SPI_ApplicationEventCallback+0x3a>
 8000460:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <SPI_ApplicationEventCallback+0x5c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000468:	d10b      	bne.n	8000482 <SPI_ApplicationEventCallback+0x52>
		{
			rcvStop = 1;
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <SPI_ApplicationEventCallback+0x68>)
 800046c:	2201      	movs	r2, #1
 800046e:	701a      	strb	r2, [r3, #0]
			RcvBuff[i-1] = '\0';
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <SPI_ApplicationEventCallback+0x5c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3b01      	subs	r3, #1
 8000476:	4a07      	ldr	r2, [pc, #28]	@ (8000494 <SPI_ApplicationEventCallback+0x64>)
 8000478:	2100      	movs	r1, #0
 800047a:	54d1      	strb	r1, [r2, r3]
			i=0;
 800047c:	4b03      	ldr	r3, [pc, #12]	@ (800048c <SPI_ApplicationEventCallback+0x5c>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	20000298 	.word	0x20000298
 8000490:	20000294 	.word	0x20000294
 8000494:	200000a0 	.word	0x200000a0
 8000498:	20000078 	.word	0x20000078

0800049c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	e00a      	b.n	80004c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004ae:	f3af 8000 	nop.w
 80004b2:	4601      	mov	r1, r0
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	60ba      	str	r2, [r7, #8]
 80004ba:	b2ca      	uxtb	r2, r1
 80004bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	3301      	adds	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	697a      	ldr	r2, [r7, #20]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	dbf0      	blt.n	80004ae <_read+0x12>
  }

  return len;
 80004cc:	687b      	ldr	r3, [r7, #4]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3718      	adds	r7, #24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b086      	sub	sp, #24
 80004da:	af00      	add	r7, sp, #0
 80004dc:	60f8      	str	r0, [r7, #12]
 80004de:	60b9      	str	r1, [r7, #8]
 80004e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	e009      	b.n	80004fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	1c5a      	adds	r2, r3, #1
 80004ec:	60ba      	str	r2, [r7, #8]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	697a      	ldr	r2, [r7, #20]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	429a      	cmp	r2, r3
 8000502:	dbf1      	blt.n	80004e8 <_write+0x12>
  }
  return len;
 8000504:	687b      	ldr	r3, [r7, #4]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <_close>:

int _close(int file)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000534:	605a      	str	r2, [r3, #4]
  return 0;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <_isatty>:

int _isatty(int file)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
	...

08000570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000578:	4a14      	ldr	r2, [pc, #80]	@ (80005cc <_sbrk+0x5c>)
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <_sbrk+0x60>)
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000584:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <_sbrk+0x64>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d102      	bne.n	8000592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <_sbrk+0x64>)
 800058e:	4a12      	ldr	r2, [pc, #72]	@ (80005d8 <_sbrk+0x68>)
 8000590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <_sbrk+0x64>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	429a      	cmp	r2, r3
 800059e:	d207      	bcs.n	80005b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a0:	f000 ffa8 	bl	80014f4 <__errno>
 80005a4:	4603      	mov	r3, r0
 80005a6:	220c      	movs	r2, #12
 80005a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	e009      	b.n	80005c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <_sbrk+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005b6:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <_sbrk+0x64>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	4a05      	ldr	r2, [pc, #20]	@ (80005d4 <_sbrk+0x64>)
 80005c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20020000 	.word	0x20020000
 80005d0:	00000400 	.word	0x00000400
 80005d4:	2000029c 	.word	0x2000029c
 80005d8:	200003f0 	.word	0x200003f0

080005dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005dc:	480d      	ldr	r0, [pc, #52]	@ (8000614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480c      	ldr	r0, [pc, #48]	@ (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490d      	ldr	r1, [pc, #52]	@ (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060a:	f000 ff79 	bl	8001500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060e:	f7ff fe99 	bl	8000344 <main>

08000612 <LoopForever>:

LoopForever:
  b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   r0, =_estack
 8000614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000620:	080020e8 	.word	0x080020e8
  ldr r2, =_sbss
 8000624:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000628:	200003ec 	.word	0x200003ec

0800062c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC_IRQHandler>
	...

08000630 <GPIO_ClockControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d162      	bne.n	8000708 <GPIO_ClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a64      	ldr	r2, [pc, #400]	@ (80007d8 <GPIO_ClockControl+0x1a8>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d106      	bne.n	8000658 <GPIO_ClockControl+0x28>
		{
			GPIOA_CLK_EN();
 800064a:	4b64      	ldr	r3, [pc, #400]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a63      	ldr	r2, [pc, #396]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_CLK_DI();
		}
	}
}
 8000656:	e0b9      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a61      	ldr	r2, [pc, #388]	@ (80007e0 <GPIO_ClockControl+0x1b0>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d106      	bne.n	800066e <GPIO_ClockControl+0x3e>
			GPIOB_CLK_EN();
 8000660:	4b5e      	ldr	r3, [pc, #376]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000664:	4a5d      	ldr	r2, [pc, #372]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000666:	f043 0302 	orr.w	r3, r3, #2
 800066a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800066c:	e0ae      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a5c      	ldr	r2, [pc, #368]	@ (80007e4 <GPIO_ClockControl+0x1b4>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <GPIO_ClockControl+0x54>
			GPIOC_CLK_EN();
 8000676:	4b59      	ldr	r3, [pc, #356]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a58      	ldr	r2, [pc, #352]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000682:	e0a3      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a58      	ldr	r2, [pc, #352]	@ (80007e8 <GPIO_ClockControl+0x1b8>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d106      	bne.n	800069a <GPIO_ClockControl+0x6a>
			GPIOD_CLK_EN();
 800068c:	4b53      	ldr	r3, [pc, #332]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000690:	4a52      	ldr	r2, [pc, #328]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000698:	e098      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a53      	ldr	r2, [pc, #332]	@ (80007ec <GPIO_ClockControl+0x1bc>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d106      	bne.n	80006b0 <GPIO_ClockControl+0x80>
			GPIOE_CLK_EN();
 80006a2:	4b4e      	ldr	r3, [pc, #312]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a4d      	ldr	r2, [pc, #308]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006ae:	e08d      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a4f      	ldr	r2, [pc, #316]	@ (80007f0 <GPIO_ClockControl+0x1c0>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d106      	bne.n	80006c6 <GPIO_ClockControl+0x96>
			GPIOF_CLK_EN();
 80006b8:	4b48      	ldr	r3, [pc, #288]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006bc:	4a47      	ldr	r2, [pc, #284]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80006be:	f043 0320 	orr.w	r3, r3, #32
 80006c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c4:	e082      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a4a      	ldr	r2, [pc, #296]	@ (80007f4 <GPIO_ClockControl+0x1c4>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d106      	bne.n	80006dc <GPIO_ClockControl+0xac>
			GPIOG_CLK_EN();
 80006ce:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a42      	ldr	r2, [pc, #264]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80006d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006da:	e077      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a46      	ldr	r2, [pc, #280]	@ (80007f8 <GPIO_ClockControl+0x1c8>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d106      	bne.n	80006f2 <GPIO_ClockControl+0xc2>
			GPIOH_CLK_EN();
 80006e4:	4b3d      	ldr	r3, [pc, #244]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e8:	4a3c      	ldr	r2, [pc, #240]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80006ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006f0:	e06c      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a41      	ldr	r2, [pc, #260]	@ (80007fc <GPIO_ClockControl+0x1cc>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d168      	bne.n	80007cc <GPIO_ClockControl+0x19c>
			GPIOI_CLK_EN();
 80006fa:	4b38      	ldr	r3, [pc, #224]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a37      	ldr	r2, [pc, #220]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000706:	e061      	b.n	80007cc <GPIO_ClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a33      	ldr	r2, [pc, #204]	@ (80007d8 <GPIO_ClockControl+0x1a8>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d106      	bne.n	800071e <GPIO_ClockControl+0xee>
			GPIOA_CLK_DI();
 8000710:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000714:	4a31      	ldr	r2, [pc, #196]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800071c:	e056      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a2f      	ldr	r2, [pc, #188]	@ (80007e0 <GPIO_ClockControl+0x1b0>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d106      	bne.n	8000734 <GPIO_ClockControl+0x104>
			GPIOB_CLK_DI();
 8000726:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a2c      	ldr	r2, [pc, #176]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000732:	e04b      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a2b      	ldr	r2, [pc, #172]	@ (80007e4 <GPIO_ClockControl+0x1b4>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d106      	bne.n	800074a <GPIO_ClockControl+0x11a>
			GPIOC_CLK_DI();
 800073c:	4b27      	ldr	r3, [pc, #156]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000740:	4a26      	ldr	r2, [pc, #152]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000748:	e040      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a26      	ldr	r2, [pc, #152]	@ (80007e8 <GPIO_ClockControl+0x1b8>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d106      	bne.n	8000760 <GPIO_ClockControl+0x130>
			GPIOD_CLK_DI();
 8000752:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a21      	ldr	r2, [pc, #132]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800075e:	e035      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a22      	ldr	r2, [pc, #136]	@ (80007ec <GPIO_ClockControl+0x1bc>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d106      	bne.n	8000776 <GPIO_ClockControl+0x146>
			GPIOE_CLK_DI();
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076c:	4a1b      	ldr	r2, [pc, #108]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000774:	e02a      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <GPIO_ClockControl+0x1c0>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <GPIO_ClockControl+0x15c>
			GPIOF_CLK_DI();
 800077e:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a16      	ldr	r2, [pc, #88]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800078a:	e01f      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a19      	ldr	r2, [pc, #100]	@ (80007f4 <GPIO_ClockControl+0x1c4>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d106      	bne.n	80007a2 <GPIO_ClockControl+0x172>
			GPIOG_CLK_DI();
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000798:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 800079a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800079e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007a0:	e014      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <GPIO_ClockControl+0x1c8>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d106      	bne.n	80007b8 <GPIO_ClockControl+0x188>
			GPIOH_CLK_DI();
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007b6:	e009      	b.n	80007cc <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a10      	ldr	r2, [pc, #64]	@ (80007fc <GPIO_ClockControl+0x1cc>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d105      	bne.n	80007cc <GPIO_ClockControl+0x19c>
			GPIOI_CLK_DI();
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c4:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <GPIO_ClockControl+0x1ac>)
 80007c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40020800 	.word	0x40020800
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40021400 	.word	0x40021400
 80007f4:	40021800 	.word	0x40021800
 80007f8:	40021c00 	.word	0x40021c00
 80007fc:	40022000 	.word	0x40022000

08000800 <GPIO_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	GPIO_ClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2101      	movs	r1, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff0e 	bl	8000630 <GPIO_ClockControl>

	uint32_t temp = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	795b      	ldrb	r3, [r3, #5]
 800081c:	2b03      	cmp	r3, #3
 800081e:	d820      	bhi.n	8000862 <GPIO_Init+0x62>
	{
		// Non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	461a      	mov	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	791b      	ldrb	r3, [r3, #4]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	2103      	movs	r1, #3
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	4619      	mov	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	400a      	ands	r2, r1
 800084e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	6819      	ldr	r1, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	430a      	orrs	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	e0c3      	b.n	80009ea <GPIO_Init+0x1ea>
	}
	else
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	2103      	movs	r1, #3
 8000870:	fa01 f303 	lsl.w	r3, r1, r3
 8000874:	43db      	mvns	r3, r3
 8000876:	4619      	mov	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	400a      	ands	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	795b      	ldrb	r3, [r3, #5]
 8000884:	2b04      	cmp	r3, #4
 8000886:	d117      	bne.n	80008b8 <GPIO_Init+0xb8>
		{
			// 1. Configure the FTSR
			// first we clear the corresponding RTSR bit so that we only have FTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000888:	4b96      	ldr	r3, [pc, #600]	@ (8000ae4 <GPIO_Init+0x2e4>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	7912      	ldrb	r2, [r2, #4]
 8000890:	4611      	mov	r1, r2
 8000892:	2201      	movs	r2, #1
 8000894:	408a      	lsls	r2, r1
 8000896:	43d2      	mvns	r2, r2
 8000898:	4611      	mov	r1, r2
 800089a:	4a92      	ldr	r2, [pc, #584]	@ (8000ae4 <GPIO_Init+0x2e4>)
 800089c:	400b      	ands	r3, r1
 800089e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a0:	4b90      	ldr	r3, [pc, #576]	@ (8000ae4 <GPIO_Init+0x2e4>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	7912      	ldrb	r2, [r2, #4]
 80008a8:	4611      	mov	r1, r2
 80008aa:	2201      	movs	r2, #1
 80008ac:	408a      	lsls	r2, r1
 80008ae:	4611      	mov	r1, r2
 80008b0:	4a8c      	ldr	r2, [pc, #560]	@ (8000ae4 <GPIO_Init+0x2e4>)
 80008b2:	430b      	orrs	r3, r1
 80008b4:	60d3      	str	r3, [r2, #12]
 80008b6:	e035      	b.n	8000924 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	795b      	ldrb	r3, [r3, #5]
 80008bc:	2b05      	cmp	r3, #5
 80008be:	d117      	bne.n	80008f0 <GPIO_Init+0xf0>
		{
			// 1. Configure the RTSR
			// first we clear the corresponding FTSR bit so that we only have RTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008c0:	4b88      	ldr	r3, [pc, #544]	@ (8000ae4 <GPIO_Init+0x2e4>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	7912      	ldrb	r2, [r2, #4]
 80008c8:	4611      	mov	r1, r2
 80008ca:	2201      	movs	r2, #1
 80008cc:	408a      	lsls	r2, r1
 80008ce:	43d2      	mvns	r2, r2
 80008d0:	4611      	mov	r1, r2
 80008d2:	4a84      	ldr	r2, [pc, #528]	@ (8000ae4 <GPIO_Init+0x2e4>)
 80008d4:	400b      	ands	r3, r1
 80008d6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008d8:	4b82      	ldr	r3, [pc, #520]	@ (8000ae4 <GPIO_Init+0x2e4>)
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	7912      	ldrb	r2, [r2, #4]
 80008e0:	4611      	mov	r1, r2
 80008e2:	2201      	movs	r2, #1
 80008e4:	408a      	lsls	r2, r1
 80008e6:	4611      	mov	r1, r2
 80008e8:	4a7e      	ldr	r2, [pc, #504]	@ (8000ae4 <GPIO_Init+0x2e4>)
 80008ea:	430b      	orrs	r3, r1
 80008ec:	6093      	str	r3, [r2, #8]
 80008ee:	e019      	b.n	8000924 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	795b      	ldrb	r3, [r3, #5]
 80008f4:	2b06      	cmp	r3, #6
 80008f6:	d115      	bne.n	8000924 <GPIO_Init+0x124>
		{
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008f8:	4b7a      	ldr	r3, [pc, #488]	@ (8000ae4 <GPIO_Init+0x2e4>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	7912      	ldrb	r2, [r2, #4]
 8000900:	4611      	mov	r1, r2
 8000902:	2201      	movs	r2, #1
 8000904:	408a      	lsls	r2, r1
 8000906:	4611      	mov	r1, r2
 8000908:	4a76      	ldr	r2, [pc, #472]	@ (8000ae4 <GPIO_Init+0x2e4>)
 800090a:	430b      	orrs	r3, r1
 800090c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800090e:	4b75      	ldr	r3, [pc, #468]	@ (8000ae4 <GPIO_Init+0x2e4>)
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	7912      	ldrb	r2, [r2, #4]
 8000916:	4611      	mov	r1, r2
 8000918:	2201      	movs	r2, #1
 800091a:	408a      	lsls	r2, r1
 800091c:	4611      	mov	r1, r2
 800091e:	4a71      	ldr	r2, [pc, #452]	@ (8000ae4 <GPIO_Init+0x2e4>)
 8000920:	430b      	orrs	r3, r1
 8000922:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		// Calculate the register number EXTICR1/EXTICR2/EXTICR3/EXTICR4
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	089b      	lsrs	r3, r3, #2
 800092a:	b2db      	uxtb	r3, r3
 800092c:	617b      	str	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a6d      	ldr	r2, [pc, #436]	@ (8000ae8 <GPIO_Init+0x2e8>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d039      	beq.n	80009ac <GPIO_Init+0x1ac>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a6b      	ldr	r2, [pc, #428]	@ (8000aec <GPIO_Init+0x2ec>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d032      	beq.n	80009a8 <GPIO_Init+0x1a8>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a6a      	ldr	r2, [pc, #424]	@ (8000af0 <GPIO_Init+0x2f0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d02b      	beq.n	80009a4 <GPIO_Init+0x1a4>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a68      	ldr	r2, [pc, #416]	@ (8000af4 <GPIO_Init+0x2f4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d024      	beq.n	80009a0 <GPIO_Init+0x1a0>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a67      	ldr	r2, [pc, #412]	@ (8000af8 <GPIO_Init+0x2f8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d01d      	beq.n	800099c <GPIO_Init+0x19c>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a65      	ldr	r2, [pc, #404]	@ (8000afc <GPIO_Init+0x2fc>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d016      	beq.n	8000998 <GPIO_Init+0x198>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a64      	ldr	r2, [pc, #400]	@ (8000b00 <GPIO_Init+0x300>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d00f      	beq.n	8000994 <GPIO_Init+0x194>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a62      	ldr	r2, [pc, #392]	@ (8000b04 <GPIO_Init+0x304>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d008      	beq.n	8000990 <GPIO_Init+0x190>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a61      	ldr	r2, [pc, #388]	@ (8000b08 <GPIO_Init+0x308>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d101      	bne.n	800098c <GPIO_Init+0x18c>
 8000988:	2308      	movs	r3, #8
 800098a:	e010      	b.n	80009ae <GPIO_Init+0x1ae>
 800098c:	2300      	movs	r3, #0
 800098e:	e00e      	b.n	80009ae <GPIO_Init+0x1ae>
 8000990:	2307      	movs	r3, #7
 8000992:	e00c      	b.n	80009ae <GPIO_Init+0x1ae>
 8000994:	2306      	movs	r3, #6
 8000996:	e00a      	b.n	80009ae <GPIO_Init+0x1ae>
 8000998:	2305      	movs	r3, #5
 800099a:	e008      	b.n	80009ae <GPIO_Init+0x1ae>
 800099c:	2304      	movs	r3, #4
 800099e:	e006      	b.n	80009ae <GPIO_Init+0x1ae>
 80009a0:	2303      	movs	r3, #3
 80009a2:	e004      	b.n	80009ae <GPIO_Init+0x1ae>
 80009a4:	2302      	movs	r3, #2
 80009a6:	e002      	b.n	80009ae <GPIO_Init+0x1ae>
 80009a8:	2301      	movs	r3, #1
 80009aa:	e000      	b.n	80009ae <GPIO_Init+0x1ae>
 80009ac:	2300      	movs	r3, #0
 80009ae:	74fb      	strb	r3, [r7, #19]
		SYSCFG_CLK_EN();
 80009b0:	4b56      	ldr	r3, [pc, #344]	@ (8000b0c <GPIO_Init+0x30c>)
 80009b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b4:	4a55      	ldr	r2, [pc, #340]	@ (8000b0c <GPIO_Init+0x30c>)
 80009b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ba:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp] |= (portcode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4));
 80009bc:	4a54      	ldr	r2, [pc, #336]	@ (8000b10 <GPIO_Init+0x310>)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3302      	adds	r3, #2
 80009c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c6:	7cfb      	ldrb	r3, [r7, #19]
 80009c8:	4951      	ldr	r1, [pc, #324]	@ (8000b10 <GPIO_Init+0x310>)
 80009ca:	431a      	orrs	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	3302      	adds	r3, #2
 80009d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80009d4:	4b43      	ldr	r3, [pc, #268]	@ (8000ae4 <GPIO_Init+0x2e4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	7912      	ldrb	r2, [r2, #4]
 80009dc:	4611      	mov	r1, r2
 80009de:	2201      	movs	r2, #1
 80009e0:	408a      	lsls	r2, r1
 80009e2:	4611      	mov	r1, r2
 80009e4:	4a3f      	ldr	r2, [pc, #252]	@ (8000ae4 <GPIO_Init+0x2e4>)
 80009e6:	430b      	orrs	r3, r1
 80009e8:	6013      	str	r3, [r2, #0]

	}

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	799b      	ldrb	r3, [r3, #6]
 80009ee:	461a      	mov	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	791b      	ldrb	r3, [r3, #4]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	791b      	ldrb	r3, [r3, #4]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	2103      	movs	r1, #3
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	4619      	mov	r1, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	400a      	ands	r2, r1
 8000a18:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6899      	ldr	r1, [r3, #8]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	430a      	orrs	r2, r1
 8000a28:	609a      	str	r2, [r3, #8]

	// 3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	79db      	ldrb	r3, [r3, #7]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	791b      	ldrb	r3, [r3, #4]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68da      	ldr	r2, [r3, #12]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	791b      	ldrb	r3, [r3, #4]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2103      	movs	r1, #3
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	4619      	mov	r1, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	400a      	ands	r2, r1
 8000a58:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	68d9      	ldr	r1, [r3, #12]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	430a      	orrs	r2, r1
 8000a68:	60da      	str	r2, [r3, #12]

	// 4. Conigure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7a1b      	ldrb	r3, [r3, #8]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	791b      	ldrb	r3, [r3, #4]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2101      	movs	r1, #1
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	400a      	ands	r2, r1
 8000a96:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6859      	ldr	r1, [r3, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	605a      	str	r2, [r3, #4]

	// 5. configure the alt function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	795b      	ldrb	r3, [r3, #5]
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d139      	bne.n	8000b24 <GPIO_Init+0x324>
	{
		uint32_t pinpos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	791b      	ldrb	r3, [r3, #4]
 8000ab4:	f003 0307 	and.w	r3, r3, #7
 8000ab8:	60fb      	str	r3, [r7, #12]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pinpos));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7a5b      	ldrb	r3, [r3, #9]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_7)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	2b07      	cmp	r3, #7
 8000ad0:	d820      	bhi.n	8000b14 <GPIO_Init+0x314>
		{
			// use AFL

			pGPIOHandle->pGPIOx->AFRL |= temp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6a19      	ldr	r1, [r3, #32]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	621a      	str	r2, [r3, #32]
		{
			// use AFH
			pGPIOHandle->pGPIOx->AFRH |= temp;
		}
	}
}
 8000ae2:	e01f      	b.n	8000b24 <GPIO_Init+0x324>
 8000ae4:	40013c00 	.word	0x40013c00
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40021400 	.word	0x40021400
 8000b00:	40021800 	.word	0x40021800
 8000b04:	40021c00 	.word	0x40021c00
 8000b08:	40022000 	.word	0x40022000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	430a      	orrs	r2, r1
 8000b22:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b24:	bf00      	nop
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <GPIO_IRQITConfig>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_IRQITConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	71bb      	strb	r3, [r7, #6]
	// processor side configuration
	if(EnorDi == ENABLE)
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d133      	bne.n	8000baa <GPIO_IRQITConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b1f      	cmp	r3, #31
 8000b46:	d80a      	bhi.n	8000b5e <GPIO_IRQITConfig+0x32>
		{
			// program ISER1
			*NVIC_ISER0 |= (1<<IRQNumber);
 8000b48:	4b34      	ldr	r3, [pc, #208]	@ (8000c1c <GPIO_IRQITConfig+0xf0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	79fa      	ldrb	r2, [r7, #7]
 8000b4e:	2101      	movs	r1, #1
 8000b50:	fa01 f202 	lsl.w	r2, r1, r2
 8000b54:	4611      	mov	r1, r2
 8000b56:	4a31      	ldr	r2, [pc, #196]	@ (8000c1c <GPIO_IRQITConfig+0xf0>)
 8000b58:	430b      	orrs	r3, r1
 8000b5a:	6013      	str	r3, [r2, #0]
		else if (IRQNumber >= 64 && IRQNumber <= 96)
		{
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
		}
	}
}
 8000b5c:	e059      	b.n	8000c12 <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber <=63)
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b1f      	cmp	r3, #31
 8000b62:	d90f      	bls.n	8000b84 <GPIO_IRQITConfig+0x58>
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b68:	d80c      	bhi.n	8000b84 <GPIO_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1<<(IRQNumber%32));
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c20 <GPIO_IRQITConfig+0xf4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	79fa      	ldrb	r2, [r7, #7]
 8000b70:	f002 021f 	and.w	r2, r2, #31
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4a28      	ldr	r2, [pc, #160]	@ (8000c20 <GPIO_IRQITConfig+0xf4>)
 8000b7e:	430b      	orrs	r3, r1
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e046      	b.n	8000c12 <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber <= 96)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b88:	d943      	bls.n	8000c12 <GPIO_IRQITConfig+0xe6>
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b60      	cmp	r3, #96	@ 0x60
 8000b8e:	d840      	bhi.n	8000c12 <GPIO_IRQITConfig+0xe6>
			*NVIC_ISER2 |= (1<<(IRQNumber%64));
 8000b90:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <GPIO_IRQITConfig+0xf8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	79fa      	ldrb	r2, [r7, #7]
 8000b96:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4a20      	ldr	r2, [pc, #128]	@ (8000c24 <GPIO_IRQITConfig+0xf8>)
 8000ba4:	430b      	orrs	r3, r1
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	e033      	b.n	8000c12 <GPIO_IRQITConfig+0xe6>
		if(IRQNumber <= 31)
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b1f      	cmp	r3, #31
 8000bae:	d80a      	bhi.n	8000bc6 <GPIO_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1<<IRQNumber);
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <GPIO_IRQITConfig+0xfc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	79fa      	ldrb	r2, [r7, #7]
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8000c28 <GPIO_IRQITConfig+0xfc>)
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	e025      	b.n	8000c12 <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber <=63)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b1f      	cmp	r3, #31
 8000bca:	d90f      	bls.n	8000bec <GPIO_IRQITConfig+0xc0>
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bd0:	d80c      	bhi.n	8000bec <GPIO_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1<<(IRQNumber%32));
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <GPIO_IRQITConfig+0x100>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	79fa      	ldrb	r2, [r7, #7]
 8000bd8:	f002 021f 	and.w	r2, r2, #31
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fa01 f202 	lsl.w	r2, r1, r2
 8000be2:	4611      	mov	r1, r2
 8000be4:	4a11      	ldr	r2, [pc, #68]	@ (8000c2c <GPIO_IRQITConfig+0x100>)
 8000be6:	430b      	orrs	r3, r1
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e012      	b.n	8000c12 <GPIO_IRQITConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber <= 96)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bf0:	d90f      	bls.n	8000c12 <GPIO_IRQITConfig+0xe6>
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b60      	cmp	r3, #96	@ 0x60
 8000bf6:	d80c      	bhi.n	8000c12 <GPIO_IRQITConfig+0xe6>
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <GPIO_IRQITConfig+0x104>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	79fa      	ldrb	r2, [r7, #7]
 8000bfe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c02:	2101      	movs	r1, #1
 8000c04:	fa01 f202 	lsl.w	r2, r1, r2
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4a09      	ldr	r2, [pc, #36]	@ (8000c30 <GPIO_IRQITConfig+0x104>)
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	e7ff      	b.n	8000c12 <GPIO_IRQITConfig+0xe6>
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000e104 	.word	0xe000e104
 8000c24:	e000e108 	.word	0xe000e108
 8000c28:	e000e180 	.word	0xe000e180
 8000c2c:	e000e184 	.word	0xe000e184
 8000c30:	e000e188 	.word	0xe000e188

08000c34 <GPIO_IRQHandling>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	// clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & (1<<PinNumber))
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <GPIO_IRQHandling+0x3c>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	2101      	movs	r1, #1
 8000c46:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d009      	beq.n	8000c64 <GPIO_IRQHandling+0x30>
	{
		// the interrupt is pended so we clear the register bit
		EXTI->PR |= (1 << PinNumber);
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <GPIO_IRQHandling+0x3c>)
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <GPIO_IRQHandling+0x3c>)
 8000c60:	430b      	orrs	r3, r1
 8000c62:	6153      	str	r3, [r2, #20]
	}
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40013c00 	.word	0x40013c00

08000c74 <SPI_SSOEConfig>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d106      	bne.n	8000c94 <SPI_SSOEConfig+0x20>
	{
		SPI2->CR1 |= (1 << SPI_CR2_SSOE);
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <SPI_SSOEConfig+0x38>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <SPI_SSOEConfig+0x38>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6013      	str	r3, [r2, #0]
	}
	else
	{
		SPI2->CR1 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000c92:	e005      	b.n	8000ca0 <SPI_SSOEConfig+0x2c>
		SPI2->CR1 &= ~(1 << SPI_CR2_SSOE);
 8000c94:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <SPI_SSOEConfig+0x38>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <SPI_SSOEConfig+0x38>)
 8000c9a:	f023 0304 	bic.w	r3, r3, #4
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40003800 	.word	0x40003800

08000cb0 <SPI_PeripheralControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d106      	bne.n	8000cd0 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
	}
	else if(EnOrDi == DISABLE)
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000cce:	e008      	b.n	8000ce2 <SPI_PeripheralControl+0x32>
	else if(EnOrDi == DISABLE)
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d105      	bne.n	8000ce2 <SPI_PeripheralControl+0x32>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	601a      	str	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <SPI_ClockControl>:
 * @Note			-
 *
 *************************************************************************************************/
//#define SPI1							((GPIO_RegDef_t*)SPI1_BASEADDR)
void SPI_ClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d120      	bne.n	8000d40 <SPI_ClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a22      	ldr	r2, [pc, #136]	@ (8000d8c <SPI_ClockControl+0xa0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d106      	bne.n	8000d14 <SPI_ClockControl+0x28>
		{
			SPI1_CLK_EN();
 8000d06:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	4a21      	ldr	r2, [pc, #132]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d10:	6453      	str	r3, [r2, #68]	@ 0x44
		else if(pSPIx == SPI3)
		{
			SPI3_CLK_DI();
		}
	}
}
 8000d12:	e035      	b.n	8000d80 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a1f      	ldr	r2, [pc, #124]	@ (8000d94 <SPI_ClockControl+0xa8>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d106      	bne.n	8000d2a <SPI_ClockControl+0x3e>
			SPI2_CLK_EN();
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d20:	4a1b      	ldr	r2, [pc, #108]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d26:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d28:	e02a      	b.n	8000d80 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI3)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000d98 <SPI_ClockControl+0xac>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d126      	bne.n	8000d80 <SPI_ClockControl+0x94>
			SPI3_CLK_EN();
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a16      	ldr	r2, [pc, #88]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d3e:	e01f      	b.n	8000d80 <SPI_ClockControl+0x94>
		if(pSPIx == SPI1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <SPI_ClockControl+0xa0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d106      	bne.n	8000d56 <SPI_ClockControl+0x6a>
			SPI1_CLK_DI();
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4c:	4a10      	ldr	r2, [pc, #64]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d52:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000d54:	e014      	b.n	8000d80 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a0e      	ldr	r2, [pc, #56]	@ (8000d94 <SPI_ClockControl+0xa8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d106      	bne.n	8000d6c <SPI_ClockControl+0x80>
			SPI2_CLK_DI();
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d68:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d6a:	e009      	b.n	8000d80 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <SPI_ClockControl+0xac>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d105      	bne.n	8000d80 <SPI_ClockControl+0x94>
			SPI3_CLK_DI();
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <SPI_ClockControl+0xa4>)
 8000d7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d7e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40013000 	.word	0x40013000
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40003800 	.word	0x40003800
 8000d98:	40003c00 	.word	0x40003c00

08000d9c <SPI_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	//	uint8_t DFF;						/*DFF can either be 8 bit or 16 bits*/
	//	uint8_t CPOL;						/*CPOL is used to select the clock polarity*/
	//	uint8_t CPHA;						/*CPHA is used to select the clock phase*/
	//	uint8_t SSM;						/*SSM is Slave Select Management which is ued to select what slave to communicate to*/

	uint32_t temp = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]

	// enable peripheral clock
	SPI_ClockControl(pSPIHandle->pSPIx, ENABLE);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff9c 	bl	8000cec <SPI_ClockControl>

	// 1. Configure the device mode
	temp = pSPIHandle->SPIConfig.BusConfig << 2;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	795b      	ldrb	r3, [r3, #5]
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]

	// 2. Configure the Bus communication type
	if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_FULLDUPLEX)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	795b      	ldrb	r3, [r3, #5]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d104      	bne.n	8000dce <SPI_Init+0x32>
	{
		//Clear BIDIMODE (bit 15)
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	e014      	b.n	8000df8 <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_HALFDUPLES)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	795b      	ldrb	r3, [r3, #5]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d104      	bne.n	8000de0 <SPI_Init+0x44>
	{
		//Set BIDIMODE (bit 15)
		temp |= (1 << SPI_CR1_BIDIMODE);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e00b      	b.n	8000df8 <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_SIMPLEX)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	795b      	ldrb	r3, [r3, #5]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d107      	bne.n	8000df8 <SPI_Init+0x5c>
	{
		//clear BIDIMODE (bit 15) and set RXONLY (bit 10)
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000dee:	60fb      	str	r3, [r7, #12]
		temp |= (1 << SPI_CR1_RXONLY);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df6:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the Clock Speed
	temp |= pSPIHandle->SPIConfig.SclkSpeed << SPI_CR1_BR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	799b      	ldrb	r3, [r3, #6]
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

	// 4. DFF configuration
	temp |= pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	79db      	ldrb	r3, [r3, #7]
 8000e08:	02db      	lsls	r3, r3, #11
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]

	// 5. Configure CPOL
	temp |= pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7a1b      	ldrb	r3, [r3, #8]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

	// 6. Configure CPHA
	temp |= pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7a5b      	ldrb	r3, [r3, #9]
 8000e20:	461a      	mov	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 |= temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	430a      	orrs	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]

}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <SPI_IRQInterruptConfig>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	460a      	mov	r2, r1
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	71bb      	strb	r3, [r7, #6]
	// processor side configuration
	if(EnorDi == ENABLE)
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d133      	bne.n	8000ebe <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b1f      	cmp	r3, #31
 8000e5a:	d80a      	bhi.n	8000e72 <SPI_IRQInterruptConfig+0x32>
		{
			// program ISER1
			*NVIC_ISER0 |= (1<<IRQNumber);
 8000e5c:	4b34      	ldr	r3, [pc, #208]	@ (8000f30 <SPI_IRQInterruptConfig+0xf0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	79fa      	ldrb	r2, [r7, #7]
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f202 	lsl.w	r2, r1, r2
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4a31      	ldr	r2, [pc, #196]	@ (8000f30 <SPI_IRQInterruptConfig+0xf0>)
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	6013      	str	r3, [r2, #0]
		else if (IRQNumber >= 64 && IRQNumber <= 96)
		{
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
		}
	}
}
 8000e70:	e059      	b.n	8000f26 <SPI_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber <=63)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b1f      	cmp	r3, #31
 8000e76:	d90f      	bls.n	8000e98 <SPI_IRQInterruptConfig+0x58>
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e7c:	d80c      	bhi.n	8000e98 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1<<(IRQNumber%32));
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f34 <SPI_IRQInterruptConfig+0xf4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	79fa      	ldrb	r2, [r7, #7]
 8000e84:	f002 021f 	and.w	r2, r2, #31
 8000e88:	2101      	movs	r1, #1
 8000e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4a28      	ldr	r2, [pc, #160]	@ (8000f34 <SPI_IRQInterruptConfig+0xf4>)
 8000e92:	430b      	orrs	r3, r1
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e046      	b.n	8000f26 <SPI_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber <= 96)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e9c:	d943      	bls.n	8000f26 <SPI_IRQInterruptConfig+0xe6>
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b60      	cmp	r3, #96	@ 0x60
 8000ea2:	d840      	bhi.n	8000f26 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1<<(IRQNumber%64));
 8000ea4:	4b24      	ldr	r3, [pc, #144]	@ (8000f38 <SPI_IRQInterruptConfig+0xf8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	79fa      	ldrb	r2, [r7, #7]
 8000eaa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000eae:	2101      	movs	r1, #1
 8000eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4a20      	ldr	r2, [pc, #128]	@ (8000f38 <SPI_IRQInterruptConfig+0xf8>)
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	e033      	b.n	8000f26 <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b1f      	cmp	r3, #31
 8000ec2:	d80a      	bhi.n	8000eda <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1<<IRQNumber);
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <SPI_IRQInterruptConfig+0xfc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	2101      	movs	r1, #1
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f3c <SPI_IRQInterruptConfig+0xfc>)
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	e025      	b.n	8000f26 <SPI_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber <=63)
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b1f      	cmp	r3, #31
 8000ede:	d90f      	bls.n	8000f00 <SPI_IRQInterruptConfig+0xc0>
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ee4:	d80c      	bhi.n	8000f00 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1<<(IRQNumber%32));
 8000ee6:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <SPI_IRQInterruptConfig+0x100>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	79fa      	ldrb	r2, [r7, #7]
 8000eec:	f002 021f 	and.w	r2, r2, #31
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4a11      	ldr	r2, [pc, #68]	@ (8000f40 <SPI_IRQInterruptConfig+0x100>)
 8000efa:	430b      	orrs	r3, r1
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e012      	b.n	8000f26 <SPI_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber <= 96)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f04:	d90f      	bls.n	8000f26 <SPI_IRQInterruptConfig+0xe6>
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b60      	cmp	r3, #96	@ 0x60
 8000f0a:	d80c      	bhi.n	8000f26 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <SPI_IRQInterruptConfig+0x104>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	79fa      	ldrb	r2, [r7, #7]
 8000f12:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4a09      	ldr	r2, [pc, #36]	@ (8000f44 <SPI_IRQInterruptConfig+0x104>)
 8000f20:	430b      	orrs	r3, r1
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	e7ff      	b.n	8000f26 <SPI_IRQInterruptConfig+0xe6>
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000e104 	.word	0xe000e104
 8000f38:	e000e108 	.word	0xe000e108
 8000f3c:	e000e180 	.word	0xe000e180
 8000f40:	e000e184 	.word	0xe000e184
 8000f44:	e000e188 	.word	0xe000e188

08000f48 <SPI_TXE_ITHANDLE>:
 *
 * @Note			-
 *
 *************************************************************************************************/
static void SPI_TXE_ITHANDLE(SPI_Handle_t *pSPIHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if((pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)) == SPI_DFF_8BIT)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d110      	bne.n	8000f80 <SPI_TXE_ITHANDLE+0x38>
	{
		// shift register is 16 bits
		pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	881a      	ldrh	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen-=2;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	1e9a      	subs	r2, r3, #2
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	e00f      	b.n	8000fa0 <SPI_TXE_ITHANDLE+0x58>
	}
	else
	{
		// shift register is 8 bits
		pSPIHandle->pSPIx->DR = *(uint8_t*)pSPIHandle->pTxBuffer;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	1e5a      	subs	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	60da      	str	r2, [r3, #12]
	}

	if(!pSPIHandle->TxLen)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d106      	bne.n	8000fb6 <SPI_TXE_ITHANDLE+0x6e>
	{
		SPI_CloseTransmission(pSPIHandle);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f908 	bl	80011be <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT); // this has to be implemented in the application
 8000fae:	2101      	movs	r1, #1
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fa3d 	bl	8000430 <SPI_ApplicationEventCallback>
	}

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <SPI_RXNE_ITHANDLE>:

static void SPI_RXNE_ITHANDLE(SPI_Handle_t *pSPIHandle)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	if((pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)) == SPI_DFF_8BIT)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d116      	bne.n	8001002 <SPI_RXNE_ITHANDLE+0x44>
	{
		// shift register is 16 bits
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t)pSPIHandle->pSPIx->DR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen-=2;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	1e9a      	subs	r2, r3, #2
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	e010      	b.n	8001024 <SPI_RXNE_ITHANDLE+0x66>
	}
	else
	{
		// shift register is 8 bits
		*(pSPIHandle->pRxBuffer) = (uint8_t)pSPIHandle->pSPIx->DR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	611a      	str	r2, [r3, #16]
	}

	if(!pSPIHandle->RxLen)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d106      	bne.n	800103a <SPI_RXNE_ITHANDLE+0x7c>
	{
		SPI_CloseReception(pSPIHandle);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f8e0 	bl	80011f2 <SPI_CloseReception>

		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT); // this has to be implemented in the application
 8001032:	2102      	movs	r1, #2
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff f9fb 	bl	8000430 <SPI_ApplicationEventCallback>
	}
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	4013      	ands	r3, r2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <SPI_OVR_ERR_ITHANDLE>:

static void SPI_OVR_ERR_ITHANDLE(SPI_Handle_t *pSPIHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	// 1. clear the OVR flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d007      	beq.n	8001088 <SPI_OVR_ERR_ITHANDLE+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->DR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp; // doing this so that we don't get a warning that temp is not used

	// 2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR); // this has to be implemented in the application
 8001088:	2103      	movs	r1, #3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff f9d0 	bl	8000430 <SPI_ApplicationEventCallback>
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <SPI_IRQHandling>:

void SPI_IRQHandling(SPI_Handle_t *pSPIHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	uint8_t temp1, temp2;
	temp1 = (pSPIHandle->pSPIx->SR  & (1<<SPI_SR_TXE));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	73fb      	strb	r3, [r7, #15]
	temp2 = (pSPIHandle->pSPIx->CR2 & (1<<SPI_CR2_TXEIE));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80010ba:	73bb      	strb	r3, [r7, #14]

	if(temp1 & temp2)
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	4013      	ands	r3, r2
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <SPI_IRQHandling+0x36>
	{
		// handle TXE
		SPI_TXE_ITHANDLE(pSPIHandle);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff3d 	bl	8000f48 <SPI_TXE_ITHANDLE>
	}

	temp1 = (pSPIHandle->pSPIx->SR  & (1<<SPI_SR_RXNE));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
	temp2 = (pSPIHandle->pSPIx->CR2 & (1<<SPI_CR2_RXNEIE));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010e8:	73bb      	strb	r3, [r7, #14]

	if(temp1 & temp2)
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	4013      	ands	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <SPI_IRQHandling+0x64>
	{
		// handle TXE
		SPI_RXNE_ITHANDLE(pSPIHandle);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff61 	bl	8000fbe <SPI_RXNE_ITHANDLE>
	}

	// We are only checking for overrun flag in this course
	temp1 = (pSPIHandle->pSPIx->SR  & (1<<SPI_SR_OVR));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001108:	73fb      	strb	r3, [r7, #15]
	temp2 = (pSPIHandle->pSPIx->CR2 & (1<<SPI_CR2_ERRIE));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f003 0320 	and.w	r3, r3, #32
 8001116:	73bb      	strb	r3, [r7, #14]

	if(temp1 & temp2)
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	4013      	ands	r3, r2
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <SPI_IRQHandling+0x92>
	{
		// handle TXE
		SPI_OVR_ERR_ITHANDLE(pSPIHandle);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff9f 	bl	8001068 <SPI_OVR_ERR_ITHANDLE>
	}
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <SPI_SendDataIT>:
 *
 * @Note			-
 *
 *************************************************************************************************/
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t len)
{
 8001132:	b480      	push	{r7}
 8001134:	b087      	sub	sp, #28
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d010      	beq.n	800116c <SPI_SendDataIT+0x3a>
	{
		// 1. Save the Tx buffer address and length info in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = len;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	615a      	str	r2, [r3, #20]

		// 2. Mark the SPI state as busy in trnasmission so that no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2202      	movs	r2, #2
 800115a:	61da      	str	r2, [r3, #28]

		// 3. Enable TXIEIE Control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800116a:	605a      	str	r2, [r3, #4]

		// 4. Data transmission will be handled by the ISR code
	}
	return state;
 800116c:	7dfb      	ldrb	r3, [r7, #23]
}
 800116e:	4618      	mov	r0, r3
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <SPI_ReceiveDataIT>:
 *
 * @Note			-
 *
 *************************************************************************************************/
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t len)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d010      	beq.n	80011b2 <SPI_ReceiveDataIT+0x3a>
	{
		// 1. Save the Tx buffer address and length info in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = len;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]

		// 2. Mark the SPI state as busy in trnasmission so that no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2201      	movs	r2, #1
 80011a0:	621a      	str	r2, [r3, #32]

		// 3. Enable TXIEIE Control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011b0:	605a      	str	r2, [r3, #4]

		// 4. Data transmission will be handled by the ISR code
	}
	return state;
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <SPI_CloseTransmission>:

void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	// if tx len is zero, close the SPI communication and inform the application that tx is over
	// 1. disable the TXEIE bit
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011d4:	605a      	str	r2, [r3, #4]
	// 2. reset the buffers
	pSPIHandle->pTxBuffer = NULL;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
	// 3. inform the application
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr

080011f2 <SPI_CloseReception>:
void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001208:	605a      	str	r2, [r3, #4]

	pSPIHandle->pRxBuffer = NULL;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
	...

08001228 <std>:
 8001228:	2300      	movs	r3, #0
 800122a:	b510      	push	{r4, lr}
 800122c:	4604      	mov	r4, r0
 800122e:	e9c0 3300 	strd	r3, r3, [r0]
 8001232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001236:	6083      	str	r3, [r0, #8]
 8001238:	8181      	strh	r1, [r0, #12]
 800123a:	6643      	str	r3, [r0, #100]	@ 0x64
 800123c:	81c2      	strh	r2, [r0, #14]
 800123e:	6183      	str	r3, [r0, #24]
 8001240:	4619      	mov	r1, r3
 8001242:	2208      	movs	r2, #8
 8001244:	305c      	adds	r0, #92	@ 0x5c
 8001246:	f000 f906 	bl	8001456 <memset>
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <std+0x58>)
 800124c:	6263      	str	r3, [r4, #36]	@ 0x24
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <std+0x5c>)
 8001250:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001252:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <std+0x60>)
 8001254:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <std+0x64>)
 8001258:	6323      	str	r3, [r4, #48]	@ 0x30
 800125a:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <std+0x68>)
 800125c:	6224      	str	r4, [r4, #32]
 800125e:	429c      	cmp	r4, r3
 8001260:	d006      	beq.n	8001270 <std+0x48>
 8001262:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001266:	4294      	cmp	r4, r2
 8001268:	d002      	beq.n	8001270 <std+0x48>
 800126a:	33d0      	adds	r3, #208	@ 0xd0
 800126c:	429c      	cmp	r4, r3
 800126e:	d105      	bne.n	800127c <std+0x54>
 8001270:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001278:	f000 b966 	b.w	8001548 <__retarget_lock_init_recursive>
 800127c:	bd10      	pop	{r4, pc}
 800127e:	bf00      	nop
 8001280:	080013d1 	.word	0x080013d1
 8001284:	080013f3 	.word	0x080013f3
 8001288:	0800142b 	.word	0x0800142b
 800128c:	0800144f 	.word	0x0800144f
 8001290:	200002a0 	.word	0x200002a0

08001294 <stdio_exit_handler>:
 8001294:	4a02      	ldr	r2, [pc, #8]	@ (80012a0 <stdio_exit_handler+0xc>)
 8001296:	4903      	ldr	r1, [pc, #12]	@ (80012a4 <stdio_exit_handler+0x10>)
 8001298:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <stdio_exit_handler+0x14>)
 800129a:	f000 b869 	b.w	8001370 <_fwalk_sglue>
 800129e:	bf00      	nop
 80012a0:	20000000 	.word	0x20000000
 80012a4:	08001ddd 	.word	0x08001ddd
 80012a8:	20000010 	.word	0x20000010

080012ac <cleanup_stdio>:
 80012ac:	6841      	ldr	r1, [r0, #4]
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <cleanup_stdio+0x34>)
 80012b0:	4299      	cmp	r1, r3
 80012b2:	b510      	push	{r4, lr}
 80012b4:	4604      	mov	r4, r0
 80012b6:	d001      	beq.n	80012bc <cleanup_stdio+0x10>
 80012b8:	f000 fd90 	bl	8001ddc <_fflush_r>
 80012bc:	68a1      	ldr	r1, [r4, #8]
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <cleanup_stdio+0x38>)
 80012c0:	4299      	cmp	r1, r3
 80012c2:	d002      	beq.n	80012ca <cleanup_stdio+0x1e>
 80012c4:	4620      	mov	r0, r4
 80012c6:	f000 fd89 	bl	8001ddc <_fflush_r>
 80012ca:	68e1      	ldr	r1, [r4, #12]
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <cleanup_stdio+0x3c>)
 80012ce:	4299      	cmp	r1, r3
 80012d0:	d004      	beq.n	80012dc <cleanup_stdio+0x30>
 80012d2:	4620      	mov	r0, r4
 80012d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012d8:	f000 bd80 	b.w	8001ddc <_fflush_r>
 80012dc:	bd10      	pop	{r4, pc}
 80012de:	bf00      	nop
 80012e0:	200002a0 	.word	0x200002a0
 80012e4:	20000308 	.word	0x20000308
 80012e8:	20000370 	.word	0x20000370

080012ec <global_stdio_init.part.0>:
 80012ec:	b510      	push	{r4, lr}
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <global_stdio_init.part.0+0x30>)
 80012f0:	4c0b      	ldr	r4, [pc, #44]	@ (8001320 <global_stdio_init.part.0+0x34>)
 80012f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001324 <global_stdio_init.part.0+0x38>)
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	4620      	mov	r0, r4
 80012f8:	2200      	movs	r2, #0
 80012fa:	2104      	movs	r1, #4
 80012fc:	f7ff ff94 	bl	8001228 <std>
 8001300:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001304:	2201      	movs	r2, #1
 8001306:	2109      	movs	r1, #9
 8001308:	f7ff ff8e 	bl	8001228 <std>
 800130c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001310:	2202      	movs	r2, #2
 8001312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001316:	2112      	movs	r1, #18
 8001318:	f7ff bf86 	b.w	8001228 <std>
 800131c:	200003d8 	.word	0x200003d8
 8001320:	200002a0 	.word	0x200002a0
 8001324:	08001295 	.word	0x08001295

08001328 <__sfp_lock_acquire>:
 8001328:	4801      	ldr	r0, [pc, #4]	@ (8001330 <__sfp_lock_acquire+0x8>)
 800132a:	f000 b90e 	b.w	800154a <__retarget_lock_acquire_recursive>
 800132e:	bf00      	nop
 8001330:	200003e1 	.word	0x200003e1

08001334 <__sfp_lock_release>:
 8001334:	4801      	ldr	r0, [pc, #4]	@ (800133c <__sfp_lock_release+0x8>)
 8001336:	f000 b909 	b.w	800154c <__retarget_lock_release_recursive>
 800133a:	bf00      	nop
 800133c:	200003e1 	.word	0x200003e1

08001340 <__sinit>:
 8001340:	b510      	push	{r4, lr}
 8001342:	4604      	mov	r4, r0
 8001344:	f7ff fff0 	bl	8001328 <__sfp_lock_acquire>
 8001348:	6a23      	ldr	r3, [r4, #32]
 800134a:	b11b      	cbz	r3, 8001354 <__sinit+0x14>
 800134c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001350:	f7ff bff0 	b.w	8001334 <__sfp_lock_release>
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <__sinit+0x28>)
 8001356:	6223      	str	r3, [r4, #32]
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__sinit+0x2c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f5      	bne.n	800134c <__sinit+0xc>
 8001360:	f7ff ffc4 	bl	80012ec <global_stdio_init.part.0>
 8001364:	e7f2      	b.n	800134c <__sinit+0xc>
 8001366:	bf00      	nop
 8001368:	080012ad 	.word	0x080012ad
 800136c:	200003d8 	.word	0x200003d8

08001370 <_fwalk_sglue>:
 8001370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001374:	4607      	mov	r7, r0
 8001376:	4688      	mov	r8, r1
 8001378:	4614      	mov	r4, r2
 800137a:	2600      	movs	r6, #0
 800137c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001380:	f1b9 0901 	subs.w	r9, r9, #1
 8001384:	d505      	bpl.n	8001392 <_fwalk_sglue+0x22>
 8001386:	6824      	ldr	r4, [r4, #0]
 8001388:	2c00      	cmp	r4, #0
 800138a:	d1f7      	bne.n	800137c <_fwalk_sglue+0xc>
 800138c:	4630      	mov	r0, r6
 800138e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001392:	89ab      	ldrh	r3, [r5, #12]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d907      	bls.n	80013a8 <_fwalk_sglue+0x38>
 8001398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800139c:	3301      	adds	r3, #1
 800139e:	d003      	beq.n	80013a8 <_fwalk_sglue+0x38>
 80013a0:	4629      	mov	r1, r5
 80013a2:	4638      	mov	r0, r7
 80013a4:	47c0      	blx	r8
 80013a6:	4306      	orrs	r6, r0
 80013a8:	3568      	adds	r5, #104	@ 0x68
 80013aa:	e7e9      	b.n	8001380 <_fwalk_sglue+0x10>

080013ac <iprintf>:
 80013ac:	b40f      	push	{r0, r1, r2, r3}
 80013ae:	b507      	push	{r0, r1, r2, lr}
 80013b0:	4906      	ldr	r1, [pc, #24]	@ (80013cc <iprintf+0x20>)
 80013b2:	ab04      	add	r3, sp, #16
 80013b4:	6808      	ldr	r0, [r1, #0]
 80013b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80013ba:	6881      	ldr	r1, [r0, #8]
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	f000 f9e7 	bl	8001790 <_vfiprintf_r>
 80013c2:	b003      	add	sp, #12
 80013c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80013c8:	b004      	add	sp, #16
 80013ca:	4770      	bx	lr
 80013cc:	2000000c 	.word	0x2000000c

080013d0 <__sread>:
 80013d0:	b510      	push	{r4, lr}
 80013d2:	460c      	mov	r4, r1
 80013d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013d8:	f000 f868 	bl	80014ac <_read_r>
 80013dc:	2800      	cmp	r0, #0
 80013de:	bfab      	itete	ge
 80013e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80013e2:	89a3      	ldrhlt	r3, [r4, #12]
 80013e4:	181b      	addge	r3, r3, r0
 80013e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80013ea:	bfac      	ite	ge
 80013ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80013ee:	81a3      	strhlt	r3, [r4, #12]
 80013f0:	bd10      	pop	{r4, pc}

080013f2 <__swrite>:
 80013f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f6:	461f      	mov	r7, r3
 80013f8:	898b      	ldrh	r3, [r1, #12]
 80013fa:	05db      	lsls	r3, r3, #23
 80013fc:	4605      	mov	r5, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	4616      	mov	r6, r2
 8001402:	d505      	bpl.n	8001410 <__swrite+0x1e>
 8001404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001408:	2302      	movs	r3, #2
 800140a:	2200      	movs	r2, #0
 800140c:	f000 f83c 	bl	8001488 <_lseek_r>
 8001410:	89a3      	ldrh	r3, [r4, #12]
 8001412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800141a:	81a3      	strh	r3, [r4, #12]
 800141c:	4632      	mov	r2, r6
 800141e:	463b      	mov	r3, r7
 8001420:	4628      	mov	r0, r5
 8001422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001426:	f000 b853 	b.w	80014d0 <_write_r>

0800142a <__sseek>:
 800142a:	b510      	push	{r4, lr}
 800142c:	460c      	mov	r4, r1
 800142e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001432:	f000 f829 	bl	8001488 <_lseek_r>
 8001436:	1c43      	adds	r3, r0, #1
 8001438:	89a3      	ldrh	r3, [r4, #12]
 800143a:	bf15      	itete	ne
 800143c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800143e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001442:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001446:	81a3      	strheq	r3, [r4, #12]
 8001448:	bf18      	it	ne
 800144a:	81a3      	strhne	r3, [r4, #12]
 800144c:	bd10      	pop	{r4, pc}

0800144e <__sclose>:
 800144e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001452:	f000 b809 	b.w	8001468 <_close_r>

08001456 <memset>:
 8001456:	4402      	add	r2, r0
 8001458:	4603      	mov	r3, r0
 800145a:	4293      	cmp	r3, r2
 800145c:	d100      	bne.n	8001460 <memset+0xa>
 800145e:	4770      	bx	lr
 8001460:	f803 1b01 	strb.w	r1, [r3], #1
 8001464:	e7f9      	b.n	800145a <memset+0x4>
	...

08001468 <_close_r>:
 8001468:	b538      	push	{r3, r4, r5, lr}
 800146a:	4d06      	ldr	r5, [pc, #24]	@ (8001484 <_close_r+0x1c>)
 800146c:	2300      	movs	r3, #0
 800146e:	4604      	mov	r4, r0
 8001470:	4608      	mov	r0, r1
 8001472:	602b      	str	r3, [r5, #0]
 8001474:	f7ff f84b 	bl	800050e <_close>
 8001478:	1c43      	adds	r3, r0, #1
 800147a:	d102      	bne.n	8001482 <_close_r+0x1a>
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	b103      	cbz	r3, 8001482 <_close_r+0x1a>
 8001480:	6023      	str	r3, [r4, #0]
 8001482:	bd38      	pop	{r3, r4, r5, pc}
 8001484:	200003dc 	.word	0x200003dc

08001488 <_lseek_r>:
 8001488:	b538      	push	{r3, r4, r5, lr}
 800148a:	4d07      	ldr	r5, [pc, #28]	@ (80014a8 <_lseek_r+0x20>)
 800148c:	4604      	mov	r4, r0
 800148e:	4608      	mov	r0, r1
 8001490:	4611      	mov	r1, r2
 8001492:	2200      	movs	r2, #0
 8001494:	602a      	str	r2, [r5, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	f7ff f85d 	bl	8000556 <_lseek>
 800149c:	1c43      	adds	r3, r0, #1
 800149e:	d102      	bne.n	80014a6 <_lseek_r+0x1e>
 80014a0:	682b      	ldr	r3, [r5, #0]
 80014a2:	b103      	cbz	r3, 80014a6 <_lseek_r+0x1e>
 80014a4:	6023      	str	r3, [r4, #0]
 80014a6:	bd38      	pop	{r3, r4, r5, pc}
 80014a8:	200003dc 	.word	0x200003dc

080014ac <_read_r>:
 80014ac:	b538      	push	{r3, r4, r5, lr}
 80014ae:	4d07      	ldr	r5, [pc, #28]	@ (80014cc <_read_r+0x20>)
 80014b0:	4604      	mov	r4, r0
 80014b2:	4608      	mov	r0, r1
 80014b4:	4611      	mov	r1, r2
 80014b6:	2200      	movs	r2, #0
 80014b8:	602a      	str	r2, [r5, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	f7fe ffee 	bl	800049c <_read>
 80014c0:	1c43      	adds	r3, r0, #1
 80014c2:	d102      	bne.n	80014ca <_read_r+0x1e>
 80014c4:	682b      	ldr	r3, [r5, #0]
 80014c6:	b103      	cbz	r3, 80014ca <_read_r+0x1e>
 80014c8:	6023      	str	r3, [r4, #0]
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
 80014cc:	200003dc 	.word	0x200003dc

080014d0 <_write_r>:
 80014d0:	b538      	push	{r3, r4, r5, lr}
 80014d2:	4d07      	ldr	r5, [pc, #28]	@ (80014f0 <_write_r+0x20>)
 80014d4:	4604      	mov	r4, r0
 80014d6:	4608      	mov	r0, r1
 80014d8:	4611      	mov	r1, r2
 80014da:	2200      	movs	r2, #0
 80014dc:	602a      	str	r2, [r5, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	f7fe fff9 	bl	80004d6 <_write>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_write_r+0x1e>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_write_r+0x1e>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	200003dc 	.word	0x200003dc

080014f4 <__errno>:
 80014f4:	4b01      	ldr	r3, [pc, #4]	@ (80014fc <__errno+0x8>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	2000000c 	.word	0x2000000c

08001500 <__libc_init_array>:
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	4d0d      	ldr	r5, [pc, #52]	@ (8001538 <__libc_init_array+0x38>)
 8001504:	4c0d      	ldr	r4, [pc, #52]	@ (800153c <__libc_init_array+0x3c>)
 8001506:	1b64      	subs	r4, r4, r5
 8001508:	10a4      	asrs	r4, r4, #2
 800150a:	2600      	movs	r6, #0
 800150c:	42a6      	cmp	r6, r4
 800150e:	d109      	bne.n	8001524 <__libc_init_array+0x24>
 8001510:	4d0b      	ldr	r5, [pc, #44]	@ (8001540 <__libc_init_array+0x40>)
 8001512:	4c0c      	ldr	r4, [pc, #48]	@ (8001544 <__libc_init_array+0x44>)
 8001514:	f000 fdb2 	bl	800207c <_init>
 8001518:	1b64      	subs	r4, r4, r5
 800151a:	10a4      	asrs	r4, r4, #2
 800151c:	2600      	movs	r6, #0
 800151e:	42a6      	cmp	r6, r4
 8001520:	d105      	bne.n	800152e <__libc_init_array+0x2e>
 8001522:	bd70      	pop	{r4, r5, r6, pc}
 8001524:	f855 3b04 	ldr.w	r3, [r5], #4
 8001528:	4798      	blx	r3
 800152a:	3601      	adds	r6, #1
 800152c:	e7ee      	b.n	800150c <__libc_init_array+0xc>
 800152e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001532:	4798      	blx	r3
 8001534:	3601      	adds	r6, #1
 8001536:	e7f2      	b.n	800151e <__libc_init_array+0x1e>
 8001538:	080020e0 	.word	0x080020e0
 800153c:	080020e0 	.word	0x080020e0
 8001540:	080020e0 	.word	0x080020e0
 8001544:	080020e4 	.word	0x080020e4

08001548 <__retarget_lock_init_recursive>:
 8001548:	4770      	bx	lr

0800154a <__retarget_lock_acquire_recursive>:
 800154a:	4770      	bx	lr

0800154c <__retarget_lock_release_recursive>:
 800154c:	4770      	bx	lr
	...

08001550 <_free_r>:
 8001550:	b538      	push	{r3, r4, r5, lr}
 8001552:	4605      	mov	r5, r0
 8001554:	2900      	cmp	r1, #0
 8001556:	d041      	beq.n	80015dc <_free_r+0x8c>
 8001558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800155c:	1f0c      	subs	r4, r1, #4
 800155e:	2b00      	cmp	r3, #0
 8001560:	bfb8      	it	lt
 8001562:	18e4      	addlt	r4, r4, r3
 8001564:	f000 f8e0 	bl	8001728 <__malloc_lock>
 8001568:	4a1d      	ldr	r2, [pc, #116]	@ (80015e0 <_free_r+0x90>)
 800156a:	6813      	ldr	r3, [r2, #0]
 800156c:	b933      	cbnz	r3, 800157c <_free_r+0x2c>
 800156e:	6063      	str	r3, [r4, #4]
 8001570:	6014      	str	r4, [r2, #0]
 8001572:	4628      	mov	r0, r5
 8001574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001578:	f000 b8dc 	b.w	8001734 <__malloc_unlock>
 800157c:	42a3      	cmp	r3, r4
 800157e:	d908      	bls.n	8001592 <_free_r+0x42>
 8001580:	6820      	ldr	r0, [r4, #0]
 8001582:	1821      	adds	r1, r4, r0
 8001584:	428b      	cmp	r3, r1
 8001586:	bf01      	itttt	eq
 8001588:	6819      	ldreq	r1, [r3, #0]
 800158a:	685b      	ldreq	r3, [r3, #4]
 800158c:	1809      	addeq	r1, r1, r0
 800158e:	6021      	streq	r1, [r4, #0]
 8001590:	e7ed      	b.n	800156e <_free_r+0x1e>
 8001592:	461a      	mov	r2, r3
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	b10b      	cbz	r3, 800159c <_free_r+0x4c>
 8001598:	42a3      	cmp	r3, r4
 800159a:	d9fa      	bls.n	8001592 <_free_r+0x42>
 800159c:	6811      	ldr	r1, [r2, #0]
 800159e:	1850      	adds	r0, r2, r1
 80015a0:	42a0      	cmp	r0, r4
 80015a2:	d10b      	bne.n	80015bc <_free_r+0x6c>
 80015a4:	6820      	ldr	r0, [r4, #0]
 80015a6:	4401      	add	r1, r0
 80015a8:	1850      	adds	r0, r2, r1
 80015aa:	4283      	cmp	r3, r0
 80015ac:	6011      	str	r1, [r2, #0]
 80015ae:	d1e0      	bne.n	8001572 <_free_r+0x22>
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	6053      	str	r3, [r2, #4]
 80015b6:	4408      	add	r0, r1
 80015b8:	6010      	str	r0, [r2, #0]
 80015ba:	e7da      	b.n	8001572 <_free_r+0x22>
 80015bc:	d902      	bls.n	80015c4 <_free_r+0x74>
 80015be:	230c      	movs	r3, #12
 80015c0:	602b      	str	r3, [r5, #0]
 80015c2:	e7d6      	b.n	8001572 <_free_r+0x22>
 80015c4:	6820      	ldr	r0, [r4, #0]
 80015c6:	1821      	adds	r1, r4, r0
 80015c8:	428b      	cmp	r3, r1
 80015ca:	bf04      	itt	eq
 80015cc:	6819      	ldreq	r1, [r3, #0]
 80015ce:	685b      	ldreq	r3, [r3, #4]
 80015d0:	6063      	str	r3, [r4, #4]
 80015d2:	bf04      	itt	eq
 80015d4:	1809      	addeq	r1, r1, r0
 80015d6:	6021      	streq	r1, [r4, #0]
 80015d8:	6054      	str	r4, [r2, #4]
 80015da:	e7ca      	b.n	8001572 <_free_r+0x22>
 80015dc:	bd38      	pop	{r3, r4, r5, pc}
 80015de:	bf00      	nop
 80015e0:	200003e8 	.word	0x200003e8

080015e4 <sbrk_aligned>:
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	4e0f      	ldr	r6, [pc, #60]	@ (8001624 <sbrk_aligned+0x40>)
 80015e8:	460c      	mov	r4, r1
 80015ea:	6831      	ldr	r1, [r6, #0]
 80015ec:	4605      	mov	r5, r0
 80015ee:	b911      	cbnz	r1, 80015f6 <sbrk_aligned+0x12>
 80015f0:	f000 fcb0 	bl	8001f54 <_sbrk_r>
 80015f4:	6030      	str	r0, [r6, #0]
 80015f6:	4621      	mov	r1, r4
 80015f8:	4628      	mov	r0, r5
 80015fa:	f000 fcab 	bl	8001f54 <_sbrk_r>
 80015fe:	1c43      	adds	r3, r0, #1
 8001600:	d103      	bne.n	800160a <sbrk_aligned+0x26>
 8001602:	f04f 34ff 	mov.w	r4, #4294967295
 8001606:	4620      	mov	r0, r4
 8001608:	bd70      	pop	{r4, r5, r6, pc}
 800160a:	1cc4      	adds	r4, r0, #3
 800160c:	f024 0403 	bic.w	r4, r4, #3
 8001610:	42a0      	cmp	r0, r4
 8001612:	d0f8      	beq.n	8001606 <sbrk_aligned+0x22>
 8001614:	1a21      	subs	r1, r4, r0
 8001616:	4628      	mov	r0, r5
 8001618:	f000 fc9c 	bl	8001f54 <_sbrk_r>
 800161c:	3001      	adds	r0, #1
 800161e:	d1f2      	bne.n	8001606 <sbrk_aligned+0x22>
 8001620:	e7ef      	b.n	8001602 <sbrk_aligned+0x1e>
 8001622:	bf00      	nop
 8001624:	200003e4 	.word	0x200003e4

08001628 <_malloc_r>:
 8001628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800162c:	1ccd      	adds	r5, r1, #3
 800162e:	f025 0503 	bic.w	r5, r5, #3
 8001632:	3508      	adds	r5, #8
 8001634:	2d0c      	cmp	r5, #12
 8001636:	bf38      	it	cc
 8001638:	250c      	movcc	r5, #12
 800163a:	2d00      	cmp	r5, #0
 800163c:	4606      	mov	r6, r0
 800163e:	db01      	blt.n	8001644 <_malloc_r+0x1c>
 8001640:	42a9      	cmp	r1, r5
 8001642:	d904      	bls.n	800164e <_malloc_r+0x26>
 8001644:	230c      	movs	r3, #12
 8001646:	6033      	str	r3, [r6, #0]
 8001648:	2000      	movs	r0, #0
 800164a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800164e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001724 <_malloc_r+0xfc>
 8001652:	f000 f869 	bl	8001728 <__malloc_lock>
 8001656:	f8d8 3000 	ldr.w	r3, [r8]
 800165a:	461c      	mov	r4, r3
 800165c:	bb44      	cbnz	r4, 80016b0 <_malloc_r+0x88>
 800165e:	4629      	mov	r1, r5
 8001660:	4630      	mov	r0, r6
 8001662:	f7ff ffbf 	bl	80015e4 <sbrk_aligned>
 8001666:	1c43      	adds	r3, r0, #1
 8001668:	4604      	mov	r4, r0
 800166a:	d158      	bne.n	800171e <_malloc_r+0xf6>
 800166c:	f8d8 4000 	ldr.w	r4, [r8]
 8001670:	4627      	mov	r7, r4
 8001672:	2f00      	cmp	r7, #0
 8001674:	d143      	bne.n	80016fe <_malloc_r+0xd6>
 8001676:	2c00      	cmp	r4, #0
 8001678:	d04b      	beq.n	8001712 <_malloc_r+0xea>
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	4639      	mov	r1, r7
 800167e:	4630      	mov	r0, r6
 8001680:	eb04 0903 	add.w	r9, r4, r3
 8001684:	f000 fc66 	bl	8001f54 <_sbrk_r>
 8001688:	4581      	cmp	r9, r0
 800168a:	d142      	bne.n	8001712 <_malloc_r+0xea>
 800168c:	6821      	ldr	r1, [r4, #0]
 800168e:	1a6d      	subs	r5, r5, r1
 8001690:	4629      	mov	r1, r5
 8001692:	4630      	mov	r0, r6
 8001694:	f7ff ffa6 	bl	80015e4 <sbrk_aligned>
 8001698:	3001      	adds	r0, #1
 800169a:	d03a      	beq.n	8001712 <_malloc_r+0xea>
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	442b      	add	r3, r5
 80016a0:	6023      	str	r3, [r4, #0]
 80016a2:	f8d8 3000 	ldr.w	r3, [r8]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	bb62      	cbnz	r2, 8001704 <_malloc_r+0xdc>
 80016aa:	f8c8 7000 	str.w	r7, [r8]
 80016ae:	e00f      	b.n	80016d0 <_malloc_r+0xa8>
 80016b0:	6822      	ldr	r2, [r4, #0]
 80016b2:	1b52      	subs	r2, r2, r5
 80016b4:	d420      	bmi.n	80016f8 <_malloc_r+0xd0>
 80016b6:	2a0b      	cmp	r2, #11
 80016b8:	d917      	bls.n	80016ea <_malloc_r+0xc2>
 80016ba:	1961      	adds	r1, r4, r5
 80016bc:	42a3      	cmp	r3, r4
 80016be:	6025      	str	r5, [r4, #0]
 80016c0:	bf18      	it	ne
 80016c2:	6059      	strne	r1, [r3, #4]
 80016c4:	6863      	ldr	r3, [r4, #4]
 80016c6:	bf08      	it	eq
 80016c8:	f8c8 1000 	streq.w	r1, [r8]
 80016cc:	5162      	str	r2, [r4, r5]
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	4630      	mov	r0, r6
 80016d2:	f000 f82f 	bl	8001734 <__malloc_unlock>
 80016d6:	f104 000b 	add.w	r0, r4, #11
 80016da:	1d23      	adds	r3, r4, #4
 80016dc:	f020 0007 	bic.w	r0, r0, #7
 80016e0:	1ac2      	subs	r2, r0, r3
 80016e2:	bf1c      	itt	ne
 80016e4:	1a1b      	subne	r3, r3, r0
 80016e6:	50a3      	strne	r3, [r4, r2]
 80016e8:	e7af      	b.n	800164a <_malloc_r+0x22>
 80016ea:	6862      	ldr	r2, [r4, #4]
 80016ec:	42a3      	cmp	r3, r4
 80016ee:	bf0c      	ite	eq
 80016f0:	f8c8 2000 	streq.w	r2, [r8]
 80016f4:	605a      	strne	r2, [r3, #4]
 80016f6:	e7eb      	b.n	80016d0 <_malloc_r+0xa8>
 80016f8:	4623      	mov	r3, r4
 80016fa:	6864      	ldr	r4, [r4, #4]
 80016fc:	e7ae      	b.n	800165c <_malloc_r+0x34>
 80016fe:	463c      	mov	r4, r7
 8001700:	687f      	ldr	r7, [r7, #4]
 8001702:	e7b6      	b.n	8001672 <_malloc_r+0x4a>
 8001704:	461a      	mov	r2, r3
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	42a3      	cmp	r3, r4
 800170a:	d1fb      	bne.n	8001704 <_malloc_r+0xdc>
 800170c:	2300      	movs	r3, #0
 800170e:	6053      	str	r3, [r2, #4]
 8001710:	e7de      	b.n	80016d0 <_malloc_r+0xa8>
 8001712:	230c      	movs	r3, #12
 8001714:	6033      	str	r3, [r6, #0]
 8001716:	4630      	mov	r0, r6
 8001718:	f000 f80c 	bl	8001734 <__malloc_unlock>
 800171c:	e794      	b.n	8001648 <_malloc_r+0x20>
 800171e:	6005      	str	r5, [r0, #0]
 8001720:	e7d6      	b.n	80016d0 <_malloc_r+0xa8>
 8001722:	bf00      	nop
 8001724:	200003e8 	.word	0x200003e8

08001728 <__malloc_lock>:
 8001728:	4801      	ldr	r0, [pc, #4]	@ (8001730 <__malloc_lock+0x8>)
 800172a:	f7ff bf0e 	b.w	800154a <__retarget_lock_acquire_recursive>
 800172e:	bf00      	nop
 8001730:	200003e0 	.word	0x200003e0

08001734 <__malloc_unlock>:
 8001734:	4801      	ldr	r0, [pc, #4]	@ (800173c <__malloc_unlock+0x8>)
 8001736:	f7ff bf09 	b.w	800154c <__retarget_lock_release_recursive>
 800173a:	bf00      	nop
 800173c:	200003e0 	.word	0x200003e0

08001740 <__sfputc_r>:
 8001740:	6893      	ldr	r3, [r2, #8]
 8001742:	3b01      	subs	r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	b410      	push	{r4}
 8001748:	6093      	str	r3, [r2, #8]
 800174a:	da07      	bge.n	800175c <__sfputc_r+0x1c>
 800174c:	6994      	ldr	r4, [r2, #24]
 800174e:	42a3      	cmp	r3, r4
 8001750:	db01      	blt.n	8001756 <__sfputc_r+0x16>
 8001752:	290a      	cmp	r1, #10
 8001754:	d102      	bne.n	800175c <__sfputc_r+0x1c>
 8001756:	bc10      	pop	{r4}
 8001758:	f000 bb68 	b.w	8001e2c <__swbuf_r>
 800175c:	6813      	ldr	r3, [r2, #0]
 800175e:	1c58      	adds	r0, r3, #1
 8001760:	6010      	str	r0, [r2, #0]
 8001762:	7019      	strb	r1, [r3, #0]
 8001764:	4608      	mov	r0, r1
 8001766:	bc10      	pop	{r4}
 8001768:	4770      	bx	lr

0800176a <__sfputs_r>:
 800176a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176c:	4606      	mov	r6, r0
 800176e:	460f      	mov	r7, r1
 8001770:	4614      	mov	r4, r2
 8001772:	18d5      	adds	r5, r2, r3
 8001774:	42ac      	cmp	r4, r5
 8001776:	d101      	bne.n	800177c <__sfputs_r+0x12>
 8001778:	2000      	movs	r0, #0
 800177a:	e007      	b.n	800178c <__sfputs_r+0x22>
 800177c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001780:	463a      	mov	r2, r7
 8001782:	4630      	mov	r0, r6
 8001784:	f7ff ffdc 	bl	8001740 <__sfputc_r>
 8001788:	1c43      	adds	r3, r0, #1
 800178a:	d1f3      	bne.n	8001774 <__sfputs_r+0xa>
 800178c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001790 <_vfiprintf_r>:
 8001790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001794:	460d      	mov	r5, r1
 8001796:	b09d      	sub	sp, #116	@ 0x74
 8001798:	4614      	mov	r4, r2
 800179a:	4698      	mov	r8, r3
 800179c:	4606      	mov	r6, r0
 800179e:	b118      	cbz	r0, 80017a8 <_vfiprintf_r+0x18>
 80017a0:	6a03      	ldr	r3, [r0, #32]
 80017a2:	b90b      	cbnz	r3, 80017a8 <_vfiprintf_r+0x18>
 80017a4:	f7ff fdcc 	bl	8001340 <__sinit>
 80017a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80017aa:	07d9      	lsls	r1, r3, #31
 80017ac:	d405      	bmi.n	80017ba <_vfiprintf_r+0x2a>
 80017ae:	89ab      	ldrh	r3, [r5, #12]
 80017b0:	059a      	lsls	r2, r3, #22
 80017b2:	d402      	bmi.n	80017ba <_vfiprintf_r+0x2a>
 80017b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80017b6:	f7ff fec8 	bl	800154a <__retarget_lock_acquire_recursive>
 80017ba:	89ab      	ldrh	r3, [r5, #12]
 80017bc:	071b      	lsls	r3, r3, #28
 80017be:	d501      	bpl.n	80017c4 <_vfiprintf_r+0x34>
 80017c0:	692b      	ldr	r3, [r5, #16]
 80017c2:	b99b      	cbnz	r3, 80017ec <_vfiprintf_r+0x5c>
 80017c4:	4629      	mov	r1, r5
 80017c6:	4630      	mov	r0, r6
 80017c8:	f000 fb6e 	bl	8001ea8 <__swsetup_r>
 80017cc:	b170      	cbz	r0, 80017ec <_vfiprintf_r+0x5c>
 80017ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80017d0:	07dc      	lsls	r4, r3, #31
 80017d2:	d504      	bpl.n	80017de <_vfiprintf_r+0x4e>
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	b01d      	add	sp, #116	@ 0x74
 80017da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017de:	89ab      	ldrh	r3, [r5, #12]
 80017e0:	0598      	lsls	r0, r3, #22
 80017e2:	d4f7      	bmi.n	80017d4 <_vfiprintf_r+0x44>
 80017e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80017e6:	f7ff feb1 	bl	800154c <__retarget_lock_release_recursive>
 80017ea:	e7f3      	b.n	80017d4 <_vfiprintf_r+0x44>
 80017ec:	2300      	movs	r3, #0
 80017ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80017f0:	2320      	movs	r3, #32
 80017f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80017f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80017fa:	2330      	movs	r3, #48	@ 0x30
 80017fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80019ac <_vfiprintf_r+0x21c>
 8001800:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001804:	f04f 0901 	mov.w	r9, #1
 8001808:	4623      	mov	r3, r4
 800180a:	469a      	mov	sl, r3
 800180c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001810:	b10a      	cbz	r2, 8001816 <_vfiprintf_r+0x86>
 8001812:	2a25      	cmp	r2, #37	@ 0x25
 8001814:	d1f9      	bne.n	800180a <_vfiprintf_r+0x7a>
 8001816:	ebba 0b04 	subs.w	fp, sl, r4
 800181a:	d00b      	beq.n	8001834 <_vfiprintf_r+0xa4>
 800181c:	465b      	mov	r3, fp
 800181e:	4622      	mov	r2, r4
 8001820:	4629      	mov	r1, r5
 8001822:	4630      	mov	r0, r6
 8001824:	f7ff ffa1 	bl	800176a <__sfputs_r>
 8001828:	3001      	adds	r0, #1
 800182a:	f000 80a7 	beq.w	800197c <_vfiprintf_r+0x1ec>
 800182e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001830:	445a      	add	r2, fp
 8001832:	9209      	str	r2, [sp, #36]	@ 0x24
 8001834:	f89a 3000 	ldrb.w	r3, [sl]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 809f 	beq.w	800197c <_vfiprintf_r+0x1ec>
 800183e:	2300      	movs	r3, #0
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001848:	f10a 0a01 	add.w	sl, sl, #1
 800184c:	9304      	str	r3, [sp, #16]
 800184e:	9307      	str	r3, [sp, #28]
 8001850:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001854:	931a      	str	r3, [sp, #104]	@ 0x68
 8001856:	4654      	mov	r4, sl
 8001858:	2205      	movs	r2, #5
 800185a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800185e:	4853      	ldr	r0, [pc, #332]	@ (80019ac <_vfiprintf_r+0x21c>)
 8001860:	f7fe fcb6 	bl	80001d0 <memchr>
 8001864:	9a04      	ldr	r2, [sp, #16]
 8001866:	b9d8      	cbnz	r0, 80018a0 <_vfiprintf_r+0x110>
 8001868:	06d1      	lsls	r1, r2, #27
 800186a:	bf44      	itt	mi
 800186c:	2320      	movmi	r3, #32
 800186e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001872:	0713      	lsls	r3, r2, #28
 8001874:	bf44      	itt	mi
 8001876:	232b      	movmi	r3, #43	@ 0x2b
 8001878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800187c:	f89a 3000 	ldrb.w	r3, [sl]
 8001880:	2b2a      	cmp	r3, #42	@ 0x2a
 8001882:	d015      	beq.n	80018b0 <_vfiprintf_r+0x120>
 8001884:	9a07      	ldr	r2, [sp, #28]
 8001886:	4654      	mov	r4, sl
 8001888:	2000      	movs	r0, #0
 800188a:	f04f 0c0a 	mov.w	ip, #10
 800188e:	4621      	mov	r1, r4
 8001890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001894:	3b30      	subs	r3, #48	@ 0x30
 8001896:	2b09      	cmp	r3, #9
 8001898:	d94b      	bls.n	8001932 <_vfiprintf_r+0x1a2>
 800189a:	b1b0      	cbz	r0, 80018ca <_vfiprintf_r+0x13a>
 800189c:	9207      	str	r2, [sp, #28]
 800189e:	e014      	b.n	80018ca <_vfiprintf_r+0x13a>
 80018a0:	eba0 0308 	sub.w	r3, r0, r8
 80018a4:	fa09 f303 	lsl.w	r3, r9, r3
 80018a8:	4313      	orrs	r3, r2
 80018aa:	9304      	str	r3, [sp, #16]
 80018ac:	46a2      	mov	sl, r4
 80018ae:	e7d2      	b.n	8001856 <_vfiprintf_r+0xc6>
 80018b0:	9b03      	ldr	r3, [sp, #12]
 80018b2:	1d19      	adds	r1, r3, #4
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	9103      	str	r1, [sp, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bfbb      	ittet	lt
 80018bc:	425b      	neglt	r3, r3
 80018be:	f042 0202 	orrlt.w	r2, r2, #2
 80018c2:	9307      	strge	r3, [sp, #28]
 80018c4:	9307      	strlt	r3, [sp, #28]
 80018c6:	bfb8      	it	lt
 80018c8:	9204      	strlt	r2, [sp, #16]
 80018ca:	7823      	ldrb	r3, [r4, #0]
 80018cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80018ce:	d10a      	bne.n	80018e6 <_vfiprintf_r+0x156>
 80018d0:	7863      	ldrb	r3, [r4, #1]
 80018d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80018d4:	d132      	bne.n	800193c <_vfiprintf_r+0x1ac>
 80018d6:	9b03      	ldr	r3, [sp, #12]
 80018d8:	1d1a      	adds	r2, r3, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	9203      	str	r2, [sp, #12]
 80018de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80018e2:	3402      	adds	r4, #2
 80018e4:	9305      	str	r3, [sp, #20]
 80018e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80019b0 <_vfiprintf_r+0x220>
 80018ea:	7821      	ldrb	r1, [r4, #0]
 80018ec:	2203      	movs	r2, #3
 80018ee:	4650      	mov	r0, sl
 80018f0:	f7fe fc6e 	bl	80001d0 <memchr>
 80018f4:	b138      	cbz	r0, 8001906 <_vfiprintf_r+0x176>
 80018f6:	9b04      	ldr	r3, [sp, #16]
 80018f8:	eba0 000a 	sub.w	r0, r0, sl
 80018fc:	2240      	movs	r2, #64	@ 0x40
 80018fe:	4082      	lsls	r2, r0
 8001900:	4313      	orrs	r3, r2
 8001902:	3401      	adds	r4, #1
 8001904:	9304      	str	r3, [sp, #16]
 8001906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800190a:	482a      	ldr	r0, [pc, #168]	@ (80019b4 <_vfiprintf_r+0x224>)
 800190c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001910:	2206      	movs	r2, #6
 8001912:	f7fe fc5d 	bl	80001d0 <memchr>
 8001916:	2800      	cmp	r0, #0
 8001918:	d03f      	beq.n	800199a <_vfiprintf_r+0x20a>
 800191a:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <_vfiprintf_r+0x228>)
 800191c:	bb1b      	cbnz	r3, 8001966 <_vfiprintf_r+0x1d6>
 800191e:	9b03      	ldr	r3, [sp, #12]
 8001920:	3307      	adds	r3, #7
 8001922:	f023 0307 	bic.w	r3, r3, #7
 8001926:	3308      	adds	r3, #8
 8001928:	9303      	str	r3, [sp, #12]
 800192a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800192c:	443b      	add	r3, r7
 800192e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001930:	e76a      	b.n	8001808 <_vfiprintf_r+0x78>
 8001932:	fb0c 3202 	mla	r2, ip, r2, r3
 8001936:	460c      	mov	r4, r1
 8001938:	2001      	movs	r0, #1
 800193a:	e7a8      	b.n	800188e <_vfiprintf_r+0xfe>
 800193c:	2300      	movs	r3, #0
 800193e:	3401      	adds	r4, #1
 8001940:	9305      	str	r3, [sp, #20]
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 0c0a 	mov.w	ip, #10
 8001948:	4620      	mov	r0, r4
 800194a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800194e:	3a30      	subs	r2, #48	@ 0x30
 8001950:	2a09      	cmp	r2, #9
 8001952:	d903      	bls.n	800195c <_vfiprintf_r+0x1cc>
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0c6      	beq.n	80018e6 <_vfiprintf_r+0x156>
 8001958:	9105      	str	r1, [sp, #20]
 800195a:	e7c4      	b.n	80018e6 <_vfiprintf_r+0x156>
 800195c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001960:	4604      	mov	r4, r0
 8001962:	2301      	movs	r3, #1
 8001964:	e7f0      	b.n	8001948 <_vfiprintf_r+0x1b8>
 8001966:	ab03      	add	r3, sp, #12
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	462a      	mov	r2, r5
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <_vfiprintf_r+0x22c>)
 800196e:	a904      	add	r1, sp, #16
 8001970:	4630      	mov	r0, r6
 8001972:	f3af 8000 	nop.w
 8001976:	4607      	mov	r7, r0
 8001978:	1c78      	adds	r0, r7, #1
 800197a:	d1d6      	bne.n	800192a <_vfiprintf_r+0x19a>
 800197c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800197e:	07d9      	lsls	r1, r3, #31
 8001980:	d405      	bmi.n	800198e <_vfiprintf_r+0x1fe>
 8001982:	89ab      	ldrh	r3, [r5, #12]
 8001984:	059a      	lsls	r2, r3, #22
 8001986:	d402      	bmi.n	800198e <_vfiprintf_r+0x1fe>
 8001988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800198a:	f7ff fddf 	bl	800154c <__retarget_lock_release_recursive>
 800198e:	89ab      	ldrh	r3, [r5, #12]
 8001990:	065b      	lsls	r3, r3, #25
 8001992:	f53f af1f 	bmi.w	80017d4 <_vfiprintf_r+0x44>
 8001996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001998:	e71e      	b.n	80017d8 <_vfiprintf_r+0x48>
 800199a:	ab03      	add	r3, sp, #12
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	462a      	mov	r2, r5
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <_vfiprintf_r+0x22c>)
 80019a2:	a904      	add	r1, sp, #16
 80019a4:	4630      	mov	r0, r6
 80019a6:	f000 f879 	bl	8001a9c <_printf_i>
 80019aa:	e7e4      	b.n	8001976 <_vfiprintf_r+0x1e6>
 80019ac:	080020a4 	.word	0x080020a4
 80019b0:	080020aa 	.word	0x080020aa
 80019b4:	080020ae 	.word	0x080020ae
 80019b8:	00000000 	.word	0x00000000
 80019bc:	0800176b 	.word	0x0800176b

080019c0 <_printf_common>:
 80019c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019c4:	4616      	mov	r6, r2
 80019c6:	4698      	mov	r8, r3
 80019c8:	688a      	ldr	r2, [r1, #8]
 80019ca:	690b      	ldr	r3, [r1, #16]
 80019cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80019d0:	4293      	cmp	r3, r2
 80019d2:	bfb8      	it	lt
 80019d4:	4613      	movlt	r3, r2
 80019d6:	6033      	str	r3, [r6, #0]
 80019d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80019dc:	4607      	mov	r7, r0
 80019de:	460c      	mov	r4, r1
 80019e0:	b10a      	cbz	r2, 80019e6 <_printf_common+0x26>
 80019e2:	3301      	adds	r3, #1
 80019e4:	6033      	str	r3, [r6, #0]
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	0699      	lsls	r1, r3, #26
 80019ea:	bf42      	ittt	mi
 80019ec:	6833      	ldrmi	r3, [r6, #0]
 80019ee:	3302      	addmi	r3, #2
 80019f0:	6033      	strmi	r3, [r6, #0]
 80019f2:	6825      	ldr	r5, [r4, #0]
 80019f4:	f015 0506 	ands.w	r5, r5, #6
 80019f8:	d106      	bne.n	8001a08 <_printf_common+0x48>
 80019fa:	f104 0a19 	add.w	sl, r4, #25
 80019fe:	68e3      	ldr	r3, [r4, #12]
 8001a00:	6832      	ldr	r2, [r6, #0]
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	42ab      	cmp	r3, r5
 8001a06:	dc26      	bgt.n	8001a56 <_printf_common+0x96>
 8001a08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001a0c:	6822      	ldr	r2, [r4, #0]
 8001a0e:	3b00      	subs	r3, #0
 8001a10:	bf18      	it	ne
 8001a12:	2301      	movne	r3, #1
 8001a14:	0692      	lsls	r2, r2, #26
 8001a16:	d42b      	bmi.n	8001a70 <_printf_common+0xb0>
 8001a18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001a1c:	4641      	mov	r1, r8
 8001a1e:	4638      	mov	r0, r7
 8001a20:	47c8      	blx	r9
 8001a22:	3001      	adds	r0, #1
 8001a24:	d01e      	beq.n	8001a64 <_printf_common+0xa4>
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	6922      	ldr	r2, [r4, #16]
 8001a2a:	f003 0306 	and.w	r3, r3, #6
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf02      	ittt	eq
 8001a32:	68e5      	ldreq	r5, [r4, #12]
 8001a34:	6833      	ldreq	r3, [r6, #0]
 8001a36:	1aed      	subeq	r5, r5, r3
 8001a38:	68a3      	ldr	r3, [r4, #8]
 8001a3a:	bf0c      	ite	eq
 8001a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a40:	2500      	movne	r5, #0
 8001a42:	4293      	cmp	r3, r2
 8001a44:	bfc4      	itt	gt
 8001a46:	1a9b      	subgt	r3, r3, r2
 8001a48:	18ed      	addgt	r5, r5, r3
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	341a      	adds	r4, #26
 8001a4e:	42b5      	cmp	r5, r6
 8001a50:	d11a      	bne.n	8001a88 <_printf_common+0xc8>
 8001a52:	2000      	movs	r0, #0
 8001a54:	e008      	b.n	8001a68 <_printf_common+0xa8>
 8001a56:	2301      	movs	r3, #1
 8001a58:	4652      	mov	r2, sl
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	4638      	mov	r0, r7
 8001a5e:	47c8      	blx	r9
 8001a60:	3001      	adds	r0, #1
 8001a62:	d103      	bne.n	8001a6c <_printf_common+0xac>
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a6c:	3501      	adds	r5, #1
 8001a6e:	e7c6      	b.n	80019fe <_printf_common+0x3e>
 8001a70:	18e1      	adds	r1, r4, r3
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	2030      	movs	r0, #48	@ 0x30
 8001a76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a7a:	4422      	add	r2, r4
 8001a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001a84:	3302      	adds	r3, #2
 8001a86:	e7c7      	b.n	8001a18 <_printf_common+0x58>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	4622      	mov	r2, r4
 8001a8c:	4641      	mov	r1, r8
 8001a8e:	4638      	mov	r0, r7
 8001a90:	47c8      	blx	r9
 8001a92:	3001      	adds	r0, #1
 8001a94:	d0e6      	beq.n	8001a64 <_printf_common+0xa4>
 8001a96:	3601      	adds	r6, #1
 8001a98:	e7d9      	b.n	8001a4e <_printf_common+0x8e>
	...

08001a9c <_printf_i>:
 8001a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001aa0:	7e0f      	ldrb	r7, [r1, #24]
 8001aa2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001aa4:	2f78      	cmp	r7, #120	@ 0x78
 8001aa6:	4691      	mov	r9, r2
 8001aa8:	4680      	mov	r8, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	469a      	mov	sl, r3
 8001aae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001ab2:	d807      	bhi.n	8001ac4 <_printf_i+0x28>
 8001ab4:	2f62      	cmp	r7, #98	@ 0x62
 8001ab6:	d80a      	bhi.n	8001ace <_printf_i+0x32>
 8001ab8:	2f00      	cmp	r7, #0
 8001aba:	f000 80d2 	beq.w	8001c62 <_printf_i+0x1c6>
 8001abe:	2f58      	cmp	r7, #88	@ 0x58
 8001ac0:	f000 80b9 	beq.w	8001c36 <_printf_i+0x19a>
 8001ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ac8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001acc:	e03a      	b.n	8001b44 <_printf_i+0xa8>
 8001ace:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001ad2:	2b15      	cmp	r3, #21
 8001ad4:	d8f6      	bhi.n	8001ac4 <_printf_i+0x28>
 8001ad6:	a101      	add	r1, pc, #4	@ (adr r1, 8001adc <_printf_i+0x40>)
 8001ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001adc:	08001b35 	.word	0x08001b35
 8001ae0:	08001b49 	.word	0x08001b49
 8001ae4:	08001ac5 	.word	0x08001ac5
 8001ae8:	08001ac5 	.word	0x08001ac5
 8001aec:	08001ac5 	.word	0x08001ac5
 8001af0:	08001ac5 	.word	0x08001ac5
 8001af4:	08001b49 	.word	0x08001b49
 8001af8:	08001ac5 	.word	0x08001ac5
 8001afc:	08001ac5 	.word	0x08001ac5
 8001b00:	08001ac5 	.word	0x08001ac5
 8001b04:	08001ac5 	.word	0x08001ac5
 8001b08:	08001c49 	.word	0x08001c49
 8001b0c:	08001b73 	.word	0x08001b73
 8001b10:	08001c03 	.word	0x08001c03
 8001b14:	08001ac5 	.word	0x08001ac5
 8001b18:	08001ac5 	.word	0x08001ac5
 8001b1c:	08001c6b 	.word	0x08001c6b
 8001b20:	08001ac5 	.word	0x08001ac5
 8001b24:	08001b73 	.word	0x08001b73
 8001b28:	08001ac5 	.word	0x08001ac5
 8001b2c:	08001ac5 	.word	0x08001ac5
 8001b30:	08001c0b 	.word	0x08001c0b
 8001b34:	6833      	ldr	r3, [r6, #0]
 8001b36:	1d1a      	adds	r2, r3, #4
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6032      	str	r2, [r6, #0]
 8001b3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001b44:	2301      	movs	r3, #1
 8001b46:	e09d      	b.n	8001c84 <_printf_i+0x1e8>
 8001b48:	6833      	ldr	r3, [r6, #0]
 8001b4a:	6820      	ldr	r0, [r4, #0]
 8001b4c:	1d19      	adds	r1, r3, #4
 8001b4e:	6031      	str	r1, [r6, #0]
 8001b50:	0606      	lsls	r6, r0, #24
 8001b52:	d501      	bpl.n	8001b58 <_printf_i+0xbc>
 8001b54:	681d      	ldr	r5, [r3, #0]
 8001b56:	e003      	b.n	8001b60 <_printf_i+0xc4>
 8001b58:	0645      	lsls	r5, r0, #25
 8001b5a:	d5fb      	bpl.n	8001b54 <_printf_i+0xb8>
 8001b5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001b60:	2d00      	cmp	r5, #0
 8001b62:	da03      	bge.n	8001b6c <_printf_i+0xd0>
 8001b64:	232d      	movs	r3, #45	@ 0x2d
 8001b66:	426d      	negs	r5, r5
 8001b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b6c:	4859      	ldr	r0, [pc, #356]	@ (8001cd4 <_printf_i+0x238>)
 8001b6e:	230a      	movs	r3, #10
 8001b70:	e011      	b.n	8001b96 <_printf_i+0xfa>
 8001b72:	6821      	ldr	r1, [r4, #0]
 8001b74:	6833      	ldr	r3, [r6, #0]
 8001b76:	0608      	lsls	r0, r1, #24
 8001b78:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b7c:	d402      	bmi.n	8001b84 <_printf_i+0xe8>
 8001b7e:	0649      	lsls	r1, r1, #25
 8001b80:	bf48      	it	mi
 8001b82:	b2ad      	uxthmi	r5, r5
 8001b84:	2f6f      	cmp	r7, #111	@ 0x6f
 8001b86:	4853      	ldr	r0, [pc, #332]	@ (8001cd4 <_printf_i+0x238>)
 8001b88:	6033      	str	r3, [r6, #0]
 8001b8a:	bf14      	ite	ne
 8001b8c:	230a      	movne	r3, #10
 8001b8e:	2308      	moveq	r3, #8
 8001b90:	2100      	movs	r1, #0
 8001b92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001b96:	6866      	ldr	r6, [r4, #4]
 8001b98:	60a6      	str	r6, [r4, #8]
 8001b9a:	2e00      	cmp	r6, #0
 8001b9c:	bfa2      	ittt	ge
 8001b9e:	6821      	ldrge	r1, [r4, #0]
 8001ba0:	f021 0104 	bicge.w	r1, r1, #4
 8001ba4:	6021      	strge	r1, [r4, #0]
 8001ba6:	b90d      	cbnz	r5, 8001bac <_printf_i+0x110>
 8001ba8:	2e00      	cmp	r6, #0
 8001baa:	d04b      	beq.n	8001c44 <_printf_i+0x1a8>
 8001bac:	4616      	mov	r6, r2
 8001bae:	fbb5 f1f3 	udiv	r1, r5, r3
 8001bb2:	fb03 5711 	mls	r7, r3, r1, r5
 8001bb6:	5dc7      	ldrb	r7, [r0, r7]
 8001bb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001bbc:	462f      	mov	r7, r5
 8001bbe:	42bb      	cmp	r3, r7
 8001bc0:	460d      	mov	r5, r1
 8001bc2:	d9f4      	bls.n	8001bae <_printf_i+0x112>
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d10b      	bne.n	8001be0 <_printf_i+0x144>
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	07df      	lsls	r7, r3, #31
 8001bcc:	d508      	bpl.n	8001be0 <_printf_i+0x144>
 8001bce:	6923      	ldr	r3, [r4, #16]
 8001bd0:	6861      	ldr	r1, [r4, #4]
 8001bd2:	4299      	cmp	r1, r3
 8001bd4:	bfde      	ittt	le
 8001bd6:	2330      	movle	r3, #48	@ 0x30
 8001bd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001bdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001be0:	1b92      	subs	r2, r2, r6
 8001be2:	6122      	str	r2, [r4, #16]
 8001be4:	f8cd a000 	str.w	sl, [sp]
 8001be8:	464b      	mov	r3, r9
 8001bea:	aa03      	add	r2, sp, #12
 8001bec:	4621      	mov	r1, r4
 8001bee:	4640      	mov	r0, r8
 8001bf0:	f7ff fee6 	bl	80019c0 <_printf_common>
 8001bf4:	3001      	adds	r0, #1
 8001bf6:	d14a      	bne.n	8001c8e <_printf_i+0x1f2>
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	b004      	add	sp, #16
 8001bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	f043 0320 	orr.w	r3, r3, #32
 8001c08:	6023      	str	r3, [r4, #0]
 8001c0a:	4833      	ldr	r0, [pc, #204]	@ (8001cd8 <_printf_i+0x23c>)
 8001c0c:	2778      	movs	r7, #120	@ 0x78
 8001c0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	6831      	ldr	r1, [r6, #0]
 8001c16:	061f      	lsls	r7, r3, #24
 8001c18:	f851 5b04 	ldr.w	r5, [r1], #4
 8001c1c:	d402      	bmi.n	8001c24 <_printf_i+0x188>
 8001c1e:	065f      	lsls	r7, r3, #25
 8001c20:	bf48      	it	mi
 8001c22:	b2ad      	uxthmi	r5, r5
 8001c24:	6031      	str	r1, [r6, #0]
 8001c26:	07d9      	lsls	r1, r3, #31
 8001c28:	bf44      	itt	mi
 8001c2a:	f043 0320 	orrmi.w	r3, r3, #32
 8001c2e:	6023      	strmi	r3, [r4, #0]
 8001c30:	b11d      	cbz	r5, 8001c3a <_printf_i+0x19e>
 8001c32:	2310      	movs	r3, #16
 8001c34:	e7ac      	b.n	8001b90 <_printf_i+0xf4>
 8001c36:	4827      	ldr	r0, [pc, #156]	@ (8001cd4 <_printf_i+0x238>)
 8001c38:	e7e9      	b.n	8001c0e <_printf_i+0x172>
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	f023 0320 	bic.w	r3, r3, #32
 8001c40:	6023      	str	r3, [r4, #0]
 8001c42:	e7f6      	b.n	8001c32 <_printf_i+0x196>
 8001c44:	4616      	mov	r6, r2
 8001c46:	e7bd      	b.n	8001bc4 <_printf_i+0x128>
 8001c48:	6833      	ldr	r3, [r6, #0]
 8001c4a:	6825      	ldr	r5, [r4, #0]
 8001c4c:	6961      	ldr	r1, [r4, #20]
 8001c4e:	1d18      	adds	r0, r3, #4
 8001c50:	6030      	str	r0, [r6, #0]
 8001c52:	062e      	lsls	r6, r5, #24
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	d501      	bpl.n	8001c5c <_printf_i+0x1c0>
 8001c58:	6019      	str	r1, [r3, #0]
 8001c5a:	e002      	b.n	8001c62 <_printf_i+0x1c6>
 8001c5c:	0668      	lsls	r0, r5, #25
 8001c5e:	d5fb      	bpl.n	8001c58 <_printf_i+0x1bc>
 8001c60:	8019      	strh	r1, [r3, #0]
 8001c62:	2300      	movs	r3, #0
 8001c64:	6123      	str	r3, [r4, #16]
 8001c66:	4616      	mov	r6, r2
 8001c68:	e7bc      	b.n	8001be4 <_printf_i+0x148>
 8001c6a:	6833      	ldr	r3, [r6, #0]
 8001c6c:	1d1a      	adds	r2, r3, #4
 8001c6e:	6032      	str	r2, [r6, #0]
 8001c70:	681e      	ldr	r6, [r3, #0]
 8001c72:	6862      	ldr	r2, [r4, #4]
 8001c74:	2100      	movs	r1, #0
 8001c76:	4630      	mov	r0, r6
 8001c78:	f7fe faaa 	bl	80001d0 <memchr>
 8001c7c:	b108      	cbz	r0, 8001c82 <_printf_i+0x1e6>
 8001c7e:	1b80      	subs	r0, r0, r6
 8001c80:	6060      	str	r0, [r4, #4]
 8001c82:	6863      	ldr	r3, [r4, #4]
 8001c84:	6123      	str	r3, [r4, #16]
 8001c86:	2300      	movs	r3, #0
 8001c88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c8c:	e7aa      	b.n	8001be4 <_printf_i+0x148>
 8001c8e:	6923      	ldr	r3, [r4, #16]
 8001c90:	4632      	mov	r2, r6
 8001c92:	4649      	mov	r1, r9
 8001c94:	4640      	mov	r0, r8
 8001c96:	47d0      	blx	sl
 8001c98:	3001      	adds	r0, #1
 8001c9a:	d0ad      	beq.n	8001bf8 <_printf_i+0x15c>
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	079b      	lsls	r3, r3, #30
 8001ca0:	d413      	bmi.n	8001cca <_printf_i+0x22e>
 8001ca2:	68e0      	ldr	r0, [r4, #12]
 8001ca4:	9b03      	ldr	r3, [sp, #12]
 8001ca6:	4298      	cmp	r0, r3
 8001ca8:	bfb8      	it	lt
 8001caa:	4618      	movlt	r0, r3
 8001cac:	e7a6      	b.n	8001bfc <_printf_i+0x160>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	4632      	mov	r2, r6
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	4640      	mov	r0, r8
 8001cb6:	47d0      	blx	sl
 8001cb8:	3001      	adds	r0, #1
 8001cba:	d09d      	beq.n	8001bf8 <_printf_i+0x15c>
 8001cbc:	3501      	adds	r5, #1
 8001cbe:	68e3      	ldr	r3, [r4, #12]
 8001cc0:	9903      	ldr	r1, [sp, #12]
 8001cc2:	1a5b      	subs	r3, r3, r1
 8001cc4:	42ab      	cmp	r3, r5
 8001cc6:	dcf2      	bgt.n	8001cae <_printf_i+0x212>
 8001cc8:	e7eb      	b.n	8001ca2 <_printf_i+0x206>
 8001cca:	2500      	movs	r5, #0
 8001ccc:	f104 0619 	add.w	r6, r4, #25
 8001cd0:	e7f5      	b.n	8001cbe <_printf_i+0x222>
 8001cd2:	bf00      	nop
 8001cd4:	080020b5 	.word	0x080020b5
 8001cd8:	080020c6 	.word	0x080020c6

08001cdc <__sflush_r>:
 8001cdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce2:	0716      	lsls	r6, r2, #28
 8001ce4:	4605      	mov	r5, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	d454      	bmi.n	8001d94 <__sflush_r+0xb8>
 8001cea:	684b      	ldr	r3, [r1, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	dc02      	bgt.n	8001cf6 <__sflush_r+0x1a>
 8001cf0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	dd48      	ble.n	8001d88 <__sflush_r+0xac>
 8001cf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001cf8:	2e00      	cmp	r6, #0
 8001cfa:	d045      	beq.n	8001d88 <__sflush_r+0xac>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001d02:	682f      	ldr	r7, [r5, #0]
 8001d04:	6a21      	ldr	r1, [r4, #32]
 8001d06:	602b      	str	r3, [r5, #0]
 8001d08:	d030      	beq.n	8001d6c <__sflush_r+0x90>
 8001d0a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d0c:	89a3      	ldrh	r3, [r4, #12]
 8001d0e:	0759      	lsls	r1, r3, #29
 8001d10:	d505      	bpl.n	8001d1e <__sflush_r+0x42>
 8001d12:	6863      	ldr	r3, [r4, #4]
 8001d14:	1ad2      	subs	r2, r2, r3
 8001d16:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d18:	b10b      	cbz	r3, 8001d1e <__sflush_r+0x42>
 8001d1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d1c:	1ad2      	subs	r2, r2, r3
 8001d1e:	2300      	movs	r3, #0
 8001d20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d22:	6a21      	ldr	r1, [r4, #32]
 8001d24:	4628      	mov	r0, r5
 8001d26:	47b0      	blx	r6
 8001d28:	1c43      	adds	r3, r0, #1
 8001d2a:	89a3      	ldrh	r3, [r4, #12]
 8001d2c:	d106      	bne.n	8001d3c <__sflush_r+0x60>
 8001d2e:	6829      	ldr	r1, [r5, #0]
 8001d30:	291d      	cmp	r1, #29
 8001d32:	d82b      	bhi.n	8001d8c <__sflush_r+0xb0>
 8001d34:	4a28      	ldr	r2, [pc, #160]	@ (8001dd8 <__sflush_r+0xfc>)
 8001d36:	410a      	asrs	r2, r1
 8001d38:	07d6      	lsls	r6, r2, #31
 8001d3a:	d427      	bmi.n	8001d8c <__sflush_r+0xb0>
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6062      	str	r2, [r4, #4]
 8001d40:	04d9      	lsls	r1, r3, #19
 8001d42:	6922      	ldr	r2, [r4, #16]
 8001d44:	6022      	str	r2, [r4, #0]
 8001d46:	d504      	bpl.n	8001d52 <__sflush_r+0x76>
 8001d48:	1c42      	adds	r2, r0, #1
 8001d4a:	d101      	bne.n	8001d50 <__sflush_r+0x74>
 8001d4c:	682b      	ldr	r3, [r5, #0]
 8001d4e:	b903      	cbnz	r3, 8001d52 <__sflush_r+0x76>
 8001d50:	6560      	str	r0, [r4, #84]	@ 0x54
 8001d52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d54:	602f      	str	r7, [r5, #0]
 8001d56:	b1b9      	cbz	r1, 8001d88 <__sflush_r+0xac>
 8001d58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d5c:	4299      	cmp	r1, r3
 8001d5e:	d002      	beq.n	8001d66 <__sflush_r+0x8a>
 8001d60:	4628      	mov	r0, r5
 8001d62:	f7ff fbf5 	bl	8001550 <_free_r>
 8001d66:	2300      	movs	r3, #0
 8001d68:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d6a:	e00d      	b.n	8001d88 <__sflush_r+0xac>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	4628      	mov	r0, r5
 8001d70:	47b0      	blx	r6
 8001d72:	4602      	mov	r2, r0
 8001d74:	1c50      	adds	r0, r2, #1
 8001d76:	d1c9      	bne.n	8001d0c <__sflush_r+0x30>
 8001d78:	682b      	ldr	r3, [r5, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0c6      	beq.n	8001d0c <__sflush_r+0x30>
 8001d7e:	2b1d      	cmp	r3, #29
 8001d80:	d001      	beq.n	8001d86 <__sflush_r+0xaa>
 8001d82:	2b16      	cmp	r3, #22
 8001d84:	d11d      	bne.n	8001dc2 <__sflush_r+0xe6>
 8001d86:	602f      	str	r7, [r5, #0]
 8001d88:	2000      	movs	r0, #0
 8001d8a:	e021      	b.n	8001dd0 <__sflush_r+0xf4>
 8001d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d90:	b21b      	sxth	r3, r3
 8001d92:	e01a      	b.n	8001dca <__sflush_r+0xee>
 8001d94:	690f      	ldr	r7, [r1, #16]
 8001d96:	2f00      	cmp	r7, #0
 8001d98:	d0f6      	beq.n	8001d88 <__sflush_r+0xac>
 8001d9a:	0793      	lsls	r3, r2, #30
 8001d9c:	680e      	ldr	r6, [r1, #0]
 8001d9e:	bf08      	it	eq
 8001da0:	694b      	ldreq	r3, [r1, #20]
 8001da2:	600f      	str	r7, [r1, #0]
 8001da4:	bf18      	it	ne
 8001da6:	2300      	movne	r3, #0
 8001da8:	1bf6      	subs	r6, r6, r7
 8001daa:	608b      	str	r3, [r1, #8]
 8001dac:	2e00      	cmp	r6, #0
 8001dae:	ddeb      	ble.n	8001d88 <__sflush_r+0xac>
 8001db0:	6a21      	ldr	r1, [r4, #32]
 8001db2:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001db6:	4633      	mov	r3, r6
 8001db8:	463a      	mov	r2, r7
 8001dba:	4628      	mov	r0, r5
 8001dbc:	47e0      	blx	ip
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	dc07      	bgt.n	8001dd2 <__sflush_r+0xf6>
 8001dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dca:	81a3      	strh	r3, [r4, #12]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dd2:	4407      	add	r7, r0
 8001dd4:	1a36      	subs	r6, r6, r0
 8001dd6:	e7e9      	b.n	8001dac <__sflush_r+0xd0>
 8001dd8:	dfbffffe 	.word	0xdfbffffe

08001ddc <_fflush_r>:
 8001ddc:	b538      	push	{r3, r4, r5, lr}
 8001dde:	690b      	ldr	r3, [r1, #16]
 8001de0:	4605      	mov	r5, r0
 8001de2:	460c      	mov	r4, r1
 8001de4:	b913      	cbnz	r3, 8001dec <_fflush_r+0x10>
 8001de6:	2500      	movs	r5, #0
 8001de8:	4628      	mov	r0, r5
 8001dea:	bd38      	pop	{r3, r4, r5, pc}
 8001dec:	b118      	cbz	r0, 8001df6 <_fflush_r+0x1a>
 8001dee:	6a03      	ldr	r3, [r0, #32]
 8001df0:	b90b      	cbnz	r3, 8001df6 <_fflush_r+0x1a>
 8001df2:	f7ff faa5 	bl	8001340 <__sinit>
 8001df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f3      	beq.n	8001de6 <_fflush_r+0xa>
 8001dfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001e00:	07d0      	lsls	r0, r2, #31
 8001e02:	d404      	bmi.n	8001e0e <_fflush_r+0x32>
 8001e04:	0599      	lsls	r1, r3, #22
 8001e06:	d402      	bmi.n	8001e0e <_fflush_r+0x32>
 8001e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e0a:	f7ff fb9e 	bl	800154a <__retarget_lock_acquire_recursive>
 8001e0e:	4628      	mov	r0, r5
 8001e10:	4621      	mov	r1, r4
 8001e12:	f7ff ff63 	bl	8001cdc <__sflush_r>
 8001e16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e18:	07da      	lsls	r2, r3, #31
 8001e1a:	4605      	mov	r5, r0
 8001e1c:	d4e4      	bmi.n	8001de8 <_fflush_r+0xc>
 8001e1e:	89a3      	ldrh	r3, [r4, #12]
 8001e20:	059b      	lsls	r3, r3, #22
 8001e22:	d4e1      	bmi.n	8001de8 <_fflush_r+0xc>
 8001e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e26:	f7ff fb91 	bl	800154c <__retarget_lock_release_recursive>
 8001e2a:	e7dd      	b.n	8001de8 <_fflush_r+0xc>

08001e2c <__swbuf_r>:
 8001e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2e:	460e      	mov	r6, r1
 8001e30:	4614      	mov	r4, r2
 8001e32:	4605      	mov	r5, r0
 8001e34:	b118      	cbz	r0, 8001e3e <__swbuf_r+0x12>
 8001e36:	6a03      	ldr	r3, [r0, #32]
 8001e38:	b90b      	cbnz	r3, 8001e3e <__swbuf_r+0x12>
 8001e3a:	f7ff fa81 	bl	8001340 <__sinit>
 8001e3e:	69a3      	ldr	r3, [r4, #24]
 8001e40:	60a3      	str	r3, [r4, #8]
 8001e42:	89a3      	ldrh	r3, [r4, #12]
 8001e44:	071a      	lsls	r2, r3, #28
 8001e46:	d501      	bpl.n	8001e4c <__swbuf_r+0x20>
 8001e48:	6923      	ldr	r3, [r4, #16]
 8001e4a:	b943      	cbnz	r3, 8001e5e <__swbuf_r+0x32>
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	4628      	mov	r0, r5
 8001e50:	f000 f82a 	bl	8001ea8 <__swsetup_r>
 8001e54:	b118      	cbz	r0, 8001e5e <__swbuf_r+0x32>
 8001e56:	f04f 37ff 	mov.w	r7, #4294967295
 8001e5a:	4638      	mov	r0, r7
 8001e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	6922      	ldr	r2, [r4, #16]
 8001e62:	1a98      	subs	r0, r3, r2
 8001e64:	6963      	ldr	r3, [r4, #20]
 8001e66:	b2f6      	uxtb	r6, r6
 8001e68:	4283      	cmp	r3, r0
 8001e6a:	4637      	mov	r7, r6
 8001e6c:	dc05      	bgt.n	8001e7a <__swbuf_r+0x4e>
 8001e6e:	4621      	mov	r1, r4
 8001e70:	4628      	mov	r0, r5
 8001e72:	f7ff ffb3 	bl	8001ddc <_fflush_r>
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d1ed      	bne.n	8001e56 <__swbuf_r+0x2a>
 8001e7a:	68a3      	ldr	r3, [r4, #8]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60a3      	str	r3, [r4, #8]
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	6022      	str	r2, [r4, #0]
 8001e86:	701e      	strb	r6, [r3, #0]
 8001e88:	6962      	ldr	r2, [r4, #20]
 8001e8a:	1c43      	adds	r3, r0, #1
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d004      	beq.n	8001e9a <__swbuf_r+0x6e>
 8001e90:	89a3      	ldrh	r3, [r4, #12]
 8001e92:	07db      	lsls	r3, r3, #31
 8001e94:	d5e1      	bpl.n	8001e5a <__swbuf_r+0x2e>
 8001e96:	2e0a      	cmp	r6, #10
 8001e98:	d1df      	bne.n	8001e5a <__swbuf_r+0x2e>
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	f7ff ff9d 	bl	8001ddc <_fflush_r>
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d0d9      	beq.n	8001e5a <__swbuf_r+0x2e>
 8001ea6:	e7d6      	b.n	8001e56 <__swbuf_r+0x2a>

08001ea8 <__swsetup_r>:
 8001ea8:	b538      	push	{r3, r4, r5, lr}
 8001eaa:	4b29      	ldr	r3, [pc, #164]	@ (8001f50 <__swsetup_r+0xa8>)
 8001eac:	4605      	mov	r5, r0
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	460c      	mov	r4, r1
 8001eb2:	b118      	cbz	r0, 8001ebc <__swsetup_r+0x14>
 8001eb4:	6a03      	ldr	r3, [r0, #32]
 8001eb6:	b90b      	cbnz	r3, 8001ebc <__swsetup_r+0x14>
 8001eb8:	f7ff fa42 	bl	8001340 <__sinit>
 8001ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ec0:	0719      	lsls	r1, r3, #28
 8001ec2:	d422      	bmi.n	8001f0a <__swsetup_r+0x62>
 8001ec4:	06da      	lsls	r2, r3, #27
 8001ec6:	d407      	bmi.n	8001ed8 <__swsetup_r+0x30>
 8001ec8:	2209      	movs	r2, #9
 8001eca:	602a      	str	r2, [r5, #0]
 8001ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ed0:	81a3      	strh	r3, [r4, #12]
 8001ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed6:	e033      	b.n	8001f40 <__swsetup_r+0x98>
 8001ed8:	0758      	lsls	r0, r3, #29
 8001eda:	d512      	bpl.n	8001f02 <__swsetup_r+0x5a>
 8001edc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ede:	b141      	cbz	r1, 8001ef2 <__swsetup_r+0x4a>
 8001ee0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ee4:	4299      	cmp	r1, r3
 8001ee6:	d002      	beq.n	8001eee <__swsetup_r+0x46>
 8001ee8:	4628      	mov	r0, r5
 8001eea:	f7ff fb31 	bl	8001550 <_free_r>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ef2:	89a3      	ldrh	r3, [r4, #12]
 8001ef4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001ef8:	81a3      	strh	r3, [r4, #12]
 8001efa:	2300      	movs	r3, #0
 8001efc:	6063      	str	r3, [r4, #4]
 8001efe:	6923      	ldr	r3, [r4, #16]
 8001f00:	6023      	str	r3, [r4, #0]
 8001f02:	89a3      	ldrh	r3, [r4, #12]
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	81a3      	strh	r3, [r4, #12]
 8001f0a:	6923      	ldr	r3, [r4, #16]
 8001f0c:	b94b      	cbnz	r3, 8001f22 <__swsetup_r+0x7a>
 8001f0e:	89a3      	ldrh	r3, [r4, #12]
 8001f10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f18:	d003      	beq.n	8001f22 <__swsetup_r+0x7a>
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	f000 f84f 	bl	8001fc0 <__smakebuf_r>
 8001f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f26:	f013 0201 	ands.w	r2, r3, #1
 8001f2a:	d00a      	beq.n	8001f42 <__swsetup_r+0x9a>
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60a2      	str	r2, [r4, #8]
 8001f30:	6962      	ldr	r2, [r4, #20]
 8001f32:	4252      	negs	r2, r2
 8001f34:	61a2      	str	r2, [r4, #24]
 8001f36:	6922      	ldr	r2, [r4, #16]
 8001f38:	b942      	cbnz	r2, 8001f4c <__swsetup_r+0xa4>
 8001f3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001f3e:	d1c5      	bne.n	8001ecc <__swsetup_r+0x24>
 8001f40:	bd38      	pop	{r3, r4, r5, pc}
 8001f42:	0799      	lsls	r1, r3, #30
 8001f44:	bf58      	it	pl
 8001f46:	6962      	ldrpl	r2, [r4, #20]
 8001f48:	60a2      	str	r2, [r4, #8]
 8001f4a:	e7f4      	b.n	8001f36 <__swsetup_r+0x8e>
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	e7f7      	b.n	8001f40 <__swsetup_r+0x98>
 8001f50:	2000000c 	.word	0x2000000c

08001f54 <_sbrk_r>:
 8001f54:	b538      	push	{r3, r4, r5, lr}
 8001f56:	4d06      	ldr	r5, [pc, #24]	@ (8001f70 <_sbrk_r+0x1c>)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	602b      	str	r3, [r5, #0]
 8001f60:	f7fe fb06 	bl	8000570 <_sbrk>
 8001f64:	1c43      	adds	r3, r0, #1
 8001f66:	d102      	bne.n	8001f6e <_sbrk_r+0x1a>
 8001f68:	682b      	ldr	r3, [r5, #0]
 8001f6a:	b103      	cbz	r3, 8001f6e <_sbrk_r+0x1a>
 8001f6c:	6023      	str	r3, [r4, #0]
 8001f6e:	bd38      	pop	{r3, r4, r5, pc}
 8001f70:	200003dc 	.word	0x200003dc

08001f74 <__swhatbuf_r>:
 8001f74:	b570      	push	{r4, r5, r6, lr}
 8001f76:	460c      	mov	r4, r1
 8001f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f7c:	2900      	cmp	r1, #0
 8001f7e:	b096      	sub	sp, #88	@ 0x58
 8001f80:	4615      	mov	r5, r2
 8001f82:	461e      	mov	r6, r3
 8001f84:	da0d      	bge.n	8001fa2 <__swhatbuf_r+0x2e>
 8001f86:	89a3      	ldrh	r3, [r4, #12]
 8001f88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f8c:	f04f 0100 	mov.w	r1, #0
 8001f90:	bf14      	ite	ne
 8001f92:	2340      	movne	r3, #64	@ 0x40
 8001f94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001f98:	2000      	movs	r0, #0
 8001f9a:	6031      	str	r1, [r6, #0]
 8001f9c:	602b      	str	r3, [r5, #0]
 8001f9e:	b016      	add	sp, #88	@ 0x58
 8001fa0:	bd70      	pop	{r4, r5, r6, pc}
 8001fa2:	466a      	mov	r2, sp
 8001fa4:	f000 f848 	bl	8002038 <_fstat_r>
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	dbec      	blt.n	8001f86 <__swhatbuf_r+0x12>
 8001fac:	9901      	ldr	r1, [sp, #4]
 8001fae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001fb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001fb6:	4259      	negs	r1, r3
 8001fb8:	4159      	adcs	r1, r3
 8001fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fbe:	e7eb      	b.n	8001f98 <__swhatbuf_r+0x24>

08001fc0 <__smakebuf_r>:
 8001fc0:	898b      	ldrh	r3, [r1, #12]
 8001fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fc4:	079d      	lsls	r5, r3, #30
 8001fc6:	4606      	mov	r6, r0
 8001fc8:	460c      	mov	r4, r1
 8001fca:	d507      	bpl.n	8001fdc <__smakebuf_r+0x1c>
 8001fcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001fd0:	6023      	str	r3, [r4, #0]
 8001fd2:	6123      	str	r3, [r4, #16]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	6163      	str	r3, [r4, #20]
 8001fd8:	b003      	add	sp, #12
 8001fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fdc:	ab01      	add	r3, sp, #4
 8001fde:	466a      	mov	r2, sp
 8001fe0:	f7ff ffc8 	bl	8001f74 <__swhatbuf_r>
 8001fe4:	9f00      	ldr	r7, [sp, #0]
 8001fe6:	4605      	mov	r5, r0
 8001fe8:	4639      	mov	r1, r7
 8001fea:	4630      	mov	r0, r6
 8001fec:	f7ff fb1c 	bl	8001628 <_malloc_r>
 8001ff0:	b948      	cbnz	r0, 8002006 <__smakebuf_r+0x46>
 8001ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ff6:	059a      	lsls	r2, r3, #22
 8001ff8:	d4ee      	bmi.n	8001fd8 <__smakebuf_r+0x18>
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	81a3      	strh	r3, [r4, #12]
 8002004:	e7e2      	b.n	8001fcc <__smakebuf_r+0xc>
 8002006:	89a3      	ldrh	r3, [r4, #12]
 8002008:	6020      	str	r0, [r4, #0]
 800200a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800200e:	81a3      	strh	r3, [r4, #12]
 8002010:	9b01      	ldr	r3, [sp, #4]
 8002012:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002016:	b15b      	cbz	r3, 8002030 <__smakebuf_r+0x70>
 8002018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800201c:	4630      	mov	r0, r6
 800201e:	f000 f81d 	bl	800205c <_isatty_r>
 8002022:	b128      	cbz	r0, 8002030 <__smakebuf_r+0x70>
 8002024:	89a3      	ldrh	r3, [r4, #12]
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	81a3      	strh	r3, [r4, #12]
 8002030:	89a3      	ldrh	r3, [r4, #12]
 8002032:	431d      	orrs	r5, r3
 8002034:	81a5      	strh	r5, [r4, #12]
 8002036:	e7cf      	b.n	8001fd8 <__smakebuf_r+0x18>

08002038 <_fstat_r>:
 8002038:	b538      	push	{r3, r4, r5, lr}
 800203a:	4d07      	ldr	r5, [pc, #28]	@ (8002058 <_fstat_r+0x20>)
 800203c:	2300      	movs	r3, #0
 800203e:	4604      	mov	r4, r0
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	602b      	str	r3, [r5, #0]
 8002046:	f7fe fa6d 	bl	8000524 <_fstat>
 800204a:	1c43      	adds	r3, r0, #1
 800204c:	d102      	bne.n	8002054 <_fstat_r+0x1c>
 800204e:	682b      	ldr	r3, [r5, #0]
 8002050:	b103      	cbz	r3, 8002054 <_fstat_r+0x1c>
 8002052:	6023      	str	r3, [r4, #0]
 8002054:	bd38      	pop	{r3, r4, r5, pc}
 8002056:	bf00      	nop
 8002058:	200003dc 	.word	0x200003dc

0800205c <_isatty_r>:
 800205c:	b538      	push	{r3, r4, r5, lr}
 800205e:	4d06      	ldr	r5, [pc, #24]	@ (8002078 <_isatty_r+0x1c>)
 8002060:	2300      	movs	r3, #0
 8002062:	4604      	mov	r4, r0
 8002064:	4608      	mov	r0, r1
 8002066:	602b      	str	r3, [r5, #0]
 8002068:	f7fe fa6b 	bl	8000542 <_isatty>
 800206c:	1c43      	adds	r3, r0, #1
 800206e:	d102      	bne.n	8002076 <_isatty_r+0x1a>
 8002070:	682b      	ldr	r3, [r5, #0]
 8002072:	b103      	cbz	r3, 8002076 <_isatty_r+0x1a>
 8002074:	6023      	str	r3, [r4, #0]
 8002076:	bd38      	pop	{r3, r4, r5, pc}
 8002078:	200003dc 	.word	0x200003dc

0800207c <_init>:
 800207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207e:	bf00      	nop
 8002080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002082:	bc08      	pop	{r3}
 8002084:	469e      	mov	lr, r3
 8002086:	4770      	bx	lr

08002088 <_fini>:
 8002088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208a:	bf00      	nop
 800208c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208e:	bc08      	pop	{r3}
 8002090:	469e      	mov	lr, r3
 8002092:	4770      	bx	lr
