
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000938  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ac0  08000ac0  00001ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000acc  08000acc  00001adc  2**0
                  CONTENTS
  4 .ARM          00000008  08000acc  08000acc  00001acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000ad4  08000adc  00001adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ad4  08000ad4  00001ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ad8  08000ad8  00001ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001adc  2**0
                  CONTENTS
 10 .bss          00000058  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000058  20000058  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000113a  00000000  00000000  00001b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000046f  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  000030b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dd  00000000  00000000  000031d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002540  00000000  00000000  000032b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017d4  00000000  00000000  000057f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009efb  00000000  00000000  00006fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010ec4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003d0  00000000  00000000  00010f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  000112d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000aa8 	.word	0x08000aa8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000aa8 	.word	0x08000aa8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIOInits>:
GPIO_Handle_t SPI2_NSS;

SPI_Handle_t SPI_2;

void SPI2_GPIOInits(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	SPI2_SCK.pGPIOx = GPIOB;
 80001dc:	4b24      	ldr	r3, [pc, #144]	@ (8000270 <SPI2_GPIOInits+0x98>)
 80001de:	4a25      	ldr	r2, [pc, #148]	@ (8000274 <SPI2_GPIOInits+0x9c>)
 80001e0:	601a      	str	r2, [r3, #0]
	SPI2_SCK.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80001e2:	4b23      	ldr	r3, [pc, #140]	@ (8000270 <SPI2_GPIOInits+0x98>)
 80001e4:	220d      	movs	r2, #13
 80001e6:	711a      	strb	r2, [r3, #4]
	SPI2_SCK.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e8:	4b21      	ldr	r3, [pc, #132]	@ (8000270 <SPI2_GPIOInits+0x98>)
 80001ea:	2202      	movs	r2, #2
 80001ec:	715a      	strb	r2, [r3, #5]
	SPI2_SCK.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALTFN_AF5;
 80001ee:	4b20      	ldr	r3, [pc, #128]	@ (8000270 <SPI2_GPIOInits+0x98>)
 80001f0:	2205      	movs	r2, #5
 80001f2:	725a      	strb	r2, [r3, #9]
	SPI2_SCK.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 80001f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000270 <SPI2_GPIOInits+0x98>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	721a      	strb	r2, [r3, #8]

	SPI2_MOSI.pGPIOx = GPIOB;
 80001fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000278 <SPI2_GPIOInits+0xa0>)
 80001fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000274 <SPI2_GPIOInits+0x9c>)
 80001fe:	601a      	str	r2, [r3, #0]
	SPI2_MOSI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000200:	4b1d      	ldr	r3, [pc, #116]	@ (8000278 <SPI2_GPIOInits+0xa0>)
 8000202:	220f      	movs	r2, #15
 8000204:	711a      	strb	r2, [r3, #4]
	SPI2_MOSI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000206:	4b1c      	ldr	r3, [pc, #112]	@ (8000278 <SPI2_GPIOInits+0xa0>)
 8000208:	2202      	movs	r2, #2
 800020a:	715a      	strb	r2, [r3, #5]
	SPI2_MOSI.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALTFN_AF5;
 800020c:	4b1a      	ldr	r3, [pc, #104]	@ (8000278 <SPI2_GPIOInits+0xa0>)
 800020e:	2205      	movs	r2, #5
 8000210:	725a      	strb	r2, [r3, #9]
	SPI2_MOSI.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 8000212:	4b19      	ldr	r3, [pc, #100]	@ (8000278 <SPI2_GPIOInits+0xa0>)
 8000214:	2200      	movs	r2, #0
 8000216:	721a      	strb	r2, [r3, #8]

	SPI2_MISO.pGPIOx = GPIOB;
 8000218:	4b18      	ldr	r3, [pc, #96]	@ (800027c <SPI2_GPIOInits+0xa4>)
 800021a:	4a16      	ldr	r2, [pc, #88]	@ (8000274 <SPI2_GPIOInits+0x9c>)
 800021c:	601a      	str	r2, [r3, #0]
	SPI2_MISO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 800021e:	4b17      	ldr	r3, [pc, #92]	@ (800027c <SPI2_GPIOInits+0xa4>)
 8000220:	220e      	movs	r2, #14
 8000222:	711a      	strb	r2, [r3, #4]
	SPI2_MISO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000224:	4b15      	ldr	r3, [pc, #84]	@ (800027c <SPI2_GPIOInits+0xa4>)
 8000226:	2202      	movs	r2, #2
 8000228:	715a      	strb	r2, [r3, #5]
	SPI2_MISO.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALTFN_AF5;
 800022a:	4b14      	ldr	r3, [pc, #80]	@ (800027c <SPI2_GPIOInits+0xa4>)
 800022c:	2205      	movs	r2, #5
 800022e:	725a      	strb	r2, [r3, #9]
	SPI2_MISO.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 8000230:	4b12      	ldr	r3, [pc, #72]	@ (800027c <SPI2_GPIOInits+0xa4>)
 8000232:	2200      	movs	r2, #0
 8000234:	721a      	strb	r2, [r3, #8]

	SPI2_NSS.pGPIOx = GPIOB;
 8000236:	4b12      	ldr	r3, [pc, #72]	@ (8000280 <SPI2_GPIOInits+0xa8>)
 8000238:	4a0e      	ldr	r2, [pc, #56]	@ (8000274 <SPI2_GPIOInits+0x9c>)
 800023a:	601a      	str	r2, [r3, #0]
	SPI2_NSS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 800023c:	4b10      	ldr	r3, [pc, #64]	@ (8000280 <SPI2_GPIOInits+0xa8>)
 800023e:	220c      	movs	r2, #12
 8000240:	711a      	strb	r2, [r3, #4]
	SPI2_NSS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000242:	4b0f      	ldr	r3, [pc, #60]	@ (8000280 <SPI2_GPIOInits+0xa8>)
 8000244:	2202      	movs	r2, #2
 8000246:	715a      	strb	r2, [r3, #5]
	SPI2_NSS.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALTFN_AF5;
 8000248:	4b0d      	ldr	r3, [pc, #52]	@ (8000280 <SPI2_GPIOInits+0xa8>)
 800024a:	2205      	movs	r2, #5
 800024c:	725a      	strb	r2, [r3, #9]
	SPI2_NSS.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 800024e:	4b0c      	ldr	r3, [pc, #48]	@ (8000280 <SPI2_GPIOInits+0xa8>)
 8000250:	2200      	movs	r2, #0
 8000252:	721a      	strb	r2, [r3, #8]

	GPIO_Init(&SPI2_NSS);
 8000254:	480a      	ldr	r0, [pc, #40]	@ (8000280 <SPI2_GPIOInits+0xa8>)
 8000256:	f000 f971 	bl	800053c <GPIO_Init>
	GPIO_Init(&SPI2_MISO);
 800025a:	4808      	ldr	r0, [pc, #32]	@ (800027c <SPI2_GPIOInits+0xa4>)
 800025c:	f000 f96e 	bl	800053c <GPIO_Init>
	GPIO_Init(&SPI2_MOSI);
 8000260:	4805      	ldr	r0, [pc, #20]	@ (8000278 <SPI2_GPIOInits+0xa0>)
 8000262:	f000 f96b 	bl	800053c <GPIO_Init>
	GPIO_Init(&SPI2_SCK);
 8000266:	4802      	ldr	r0, [pc, #8]	@ (8000270 <SPI2_GPIOInits+0x98>)
 8000268:	f000 f968 	bl	800053c <GPIO_Init>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	2000001c 	.word	0x2000001c
 8000274:	40020400 	.word	0x40020400
 8000278:	20000028 	.word	0x20000028
 800027c:	20000034 	.word	0x20000034
 8000280:	20000040 	.word	0x20000040

08000284 <SPI2_Init>:

void SPI2_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	SPI_2.pSPIx = SPI2;
 8000288:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <SPI2_Init+0x4c>)
 800028a:	4a12      	ldr	r2, [pc, #72]	@ (80002d4 <SPI2_Init+0x50>)
 800028c:	601a      	str	r2, [r3, #0]
	SPI_2.SPIConfig.BusConfig = SPI_BUSCONFIG_FULLDUPLEX;
 800028e:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <SPI2_Init+0x4c>)
 8000290:	2201      	movs	r2, #1
 8000292:	715a      	strb	r2, [r3, #5]
	SPI_2.SPIConfig.DeviceMode = SPI_DEVICEMODE_MASTER;
 8000294:	4b0e      	ldr	r3, [pc, #56]	@ (80002d0 <SPI2_Init+0x4c>)
 8000296:	2201      	movs	r2, #1
 8000298:	711a      	strb	r2, [r3, #4]
	SPI_2.SPIConfig.CPHA = SPI_CPHA_TRAILING_EDGE;
 800029a:	4b0d      	ldr	r3, [pc, #52]	@ (80002d0 <SPI2_Init+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	725a      	strb	r2, [r3, #9]
	SPI_2.SPIConfig.CPOL = SPI_CPOL_LOW_IDLE_STATE;
 80002a0:	4b0b      	ldr	r3, [pc, #44]	@ (80002d0 <SPI2_Init+0x4c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	721a      	strb	r2, [r3, #8]
	SPI_2.SPIConfig.DFF = SPI_DFF_8BIT;
 80002a6:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <SPI2_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	71da      	strb	r2, [r3, #7]
	SPI_2.SPIConfig.SclkSpeed = SPI_SCLKSPEED_FPCLK_2;
 80002ac:	4b08      	ldr	r3, [pc, #32]	@ (80002d0 <SPI2_Init+0x4c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	719a      	strb	r2, [r3, #6]
	SPI_2.SPIConfig.SSM = SPI_SSM_EN;
 80002b2:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <SPI2_Init+0x4c>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	729a      	strb	r2, [r3, #10]

	SPI2->CR1 |= (1 << SPI_CR1_SSI);
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <SPI2_Init+0x50>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a05      	ldr	r2, [pc, #20]	@ (80002d4 <SPI2_Init+0x50>)
 80002be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002c2:	6013      	str	r3, [r2, #0]

	SPI_Init(&SPI_2);
 80002c4:	4802      	ldr	r0, [pc, #8]	@ (80002d0 <SPI2_Init+0x4c>)
 80002c6:	f000 fb45 	bl	8000954 <SPI_Init>
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	2000004c 	.word	0x2000004c
 80002d4:	40003800 	.word	0x40003800

080002d8 <main>:

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
	SPI2_GPIOInits();
 80002de:	f7ff ff7b 	bl	80001d8 <SPI2_GPIOInits>

	SPI2_Init();
 80002e2:	f7ff ffcf 	bl	8000284 <SPI2_Init>

	SPI_PeriheralControl(SPI2, ENABLE);
 80002e6:	2101      	movs	r1, #1
 80002e8:	4809      	ldr	r0, [pc, #36]	@ (8000310 <main+0x38>)
 80002ea:	f000 fabd 	bl	8000868 <SPI_PeriheralControl>

	char user_data[] = "Hello World";
 80002ee:	4a09      	ldr	r2, [pc, #36]	@ (8000314 <main+0x3c>)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4618      	mov	r0, r3
 80002fc:	f7ff ff64 	bl	80001c8 <strlen>
 8000300:	4602      	mov	r2, r0
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4619      	mov	r1, r3
 8000306:	4802      	ldr	r0, [pc, #8]	@ (8000310 <main+0x38>)
 8000308:	f000 fb76 	bl	80009f8 <SPI_SendData>

	while(1);
 800030c:	bf00      	nop
 800030e:	e7fd      	b.n	800030c <main+0x34>
 8000310:	40003800 	.word	0x40003800
 8000314:	08000ac0 	.word	0x08000ac0

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	@ (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	@ (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	@ (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	@ (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	@ (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	@ (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 fb8b 	bl	8000a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ffc5 	bl	80002d8 <main>

0800034e <LoopForever>:

LoopForever:
  b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800035c:	08000adc 	.word	0x08000adc
  ldr r2, =_sbss
 8000360:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000364:	20000058 	.word	0x20000058

08000368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>
	...

0800036c <GPIO_ClockControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000378:	78fb      	ldrb	r3, [r7, #3]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d162      	bne.n	8000444 <GPIO_ClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a64      	ldr	r2, [pc, #400]	@ (8000514 <GPIO_ClockControl+0x1a8>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_ClockControl+0x28>
		{
			GPIOA_CLK_EN();
 8000386:	4b64      	ldr	r3, [pc, #400]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038a:	4a63      	ldr	r2, [pc, #396]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_CLK_DI();
		}
	}
}
 8000392:	e0b9      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a61      	ldr	r2, [pc, #388]	@ (800051c <GPIO_ClockControl+0x1b0>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_ClockControl+0x3e>
			GPIOB_CLK_EN();
 800039c:	4b5e      	ldr	r3, [pc, #376]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a0:	4a5d      	ldr	r2, [pc, #372]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a8:	e0ae      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a5c      	ldr	r2, [pc, #368]	@ (8000520 <GPIO_ClockControl+0x1b4>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_ClockControl+0x54>
			GPIOC_CLK_EN();
 80003b2:	4b59      	ldr	r3, [pc, #356]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b6:	4a58      	ldr	r2, [pc, #352]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003be:	e0a3      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a58      	ldr	r2, [pc, #352]	@ (8000524 <GPIO_ClockControl+0x1b8>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_ClockControl+0x6a>
			GPIOD_CLK_EN();
 80003c8:	4b53      	ldr	r3, [pc, #332]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a52      	ldr	r2, [pc, #328]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d4:	e098      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a53      	ldr	r2, [pc, #332]	@ (8000528 <GPIO_ClockControl+0x1bc>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_ClockControl+0x80>
			GPIOE_CLK_EN();
 80003de:	4b4e      	ldr	r3, [pc, #312]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e2:	4a4d      	ldr	r2, [pc, #308]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80003e4:	f043 0310 	orr.w	r3, r3, #16
 80003e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ea:	e08d      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a4f      	ldr	r2, [pc, #316]	@ (800052c <GPIO_ClockControl+0x1c0>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_ClockControl+0x96>
			GPIOF_CLK_EN();
 80003f4:	4b48      	ldr	r3, [pc, #288]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f8:	4a47      	ldr	r2, [pc, #284]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000400:	e082      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a4a      	ldr	r2, [pc, #296]	@ (8000530 <GPIO_ClockControl+0x1c4>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_ClockControl+0xac>
			GPIOG_CLK_EN();
 800040a:	4b43      	ldr	r3, [pc, #268]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040e:	4a42      	ldr	r2, [pc, #264]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 8000410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000414:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000416:	e077      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a46      	ldr	r2, [pc, #280]	@ (8000534 <GPIO_ClockControl+0x1c8>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_ClockControl+0xc2>
			GPIOH_CLK_EN();
 8000420:	4b3d      	ldr	r3, [pc, #244]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000424:	4a3c      	ldr	r2, [pc, #240]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 8000426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800042a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042c:	e06c      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a41      	ldr	r2, [pc, #260]	@ (8000538 <GPIO_ClockControl+0x1cc>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d168      	bne.n	8000508 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_EN();
 8000436:	4b38      	ldr	r3, [pc, #224]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043a:	4a37      	ldr	r2, [pc, #220]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 800043c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000440:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000442:	e061      	b.n	8000508 <GPIO_ClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a33      	ldr	r2, [pc, #204]	@ (8000514 <GPIO_ClockControl+0x1a8>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_ClockControl+0xee>
			GPIOA_CLK_DI();
 800044c:	4b32      	ldr	r3, [pc, #200]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000450:	4a31      	ldr	r2, [pc, #196]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 8000452:	f043 0301 	orr.w	r3, r3, #1
 8000456:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000458:	e056      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a2f      	ldr	r2, [pc, #188]	@ (800051c <GPIO_ClockControl+0x1b0>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_ClockControl+0x104>
			GPIOB_CLK_DI();
 8000462:	4b2d      	ldr	r3, [pc, #180]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000466:	4a2c      	ldr	r2, [pc, #176]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 8000468:	f043 0302 	orr.w	r3, r3, #2
 800046c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046e:	e04b      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a2b      	ldr	r2, [pc, #172]	@ (8000520 <GPIO_ClockControl+0x1b4>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_ClockControl+0x11a>
			GPIOC_CLK_DI();
 8000478:	4b27      	ldr	r3, [pc, #156]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047c:	4a26      	ldr	r2, [pc, #152]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000484:	e040      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a26      	ldr	r2, [pc, #152]	@ (8000524 <GPIO_ClockControl+0x1b8>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_ClockControl+0x130>
			GPIOD_CLK_DI();
 800048e:	4b22      	ldr	r3, [pc, #136]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000492:	4a21      	ldr	r2, [pc, #132]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 8000494:	f043 0308 	orr.w	r3, r3, #8
 8000498:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049a:	e035      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a22      	ldr	r2, [pc, #136]	@ (8000528 <GPIO_ClockControl+0x1bc>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_ClockControl+0x146>
			GPIOE_CLK_DI();
 80004a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80004aa:	f043 0310 	orr.w	r3, r3, #16
 80004ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b0:	e02a      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a1d      	ldr	r2, [pc, #116]	@ (800052c <GPIO_ClockControl+0x1c0>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_ClockControl+0x15c>
			GPIOF_CLK_DI();
 80004ba:	4b17      	ldr	r3, [pc, #92]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004be:	4a16      	ldr	r2, [pc, #88]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80004c0:	f043 0320 	orr.w	r3, r3, #32
 80004c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c6:	e01f      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a19      	ldr	r2, [pc, #100]	@ (8000530 <GPIO_ClockControl+0x1c4>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d106      	bne.n	80004de <GPIO_ClockControl+0x172>
			GPIOG_CLK_DI();
 80004d0:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d4:	4a10      	ldr	r2, [pc, #64]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80004d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004dc:	e014      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a14      	ldr	r2, [pc, #80]	@ (8000534 <GPIO_ClockControl+0x1c8>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d106      	bne.n	80004f4 <GPIO_ClockControl+0x188>
			GPIOH_CLK_DI();
 80004e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80004ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f2:	e009      	b.n	8000508 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a10      	ldr	r2, [pc, #64]	@ (8000538 <GPIO_ClockControl+0x1cc>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d105      	bne.n	8000508 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_DI();
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000500:	4a05      	ldr	r2, [pc, #20]	@ (8000518 <GPIO_ClockControl+0x1ac>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000506:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40020000 	.word	0x40020000
 8000518:	40023800 	.word	0x40023800
 800051c:	40020400 	.word	0x40020400
 8000520:	40020800 	.word	0x40020800
 8000524:	40020c00 	.word	0x40020c00
 8000528:	40021000 	.word	0x40021000
 800052c:	40021400 	.word	0x40021400
 8000530:	40021800 	.word	0x40021800
 8000534:	40021c00 	.word	0x40021c00
 8000538:	40022000 	.word	0x40022000

0800053c <GPIO_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	GPIO_ClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2101      	movs	r1, #1
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff ff0e 	bl	800036c <GPIO_ClockControl>

	uint32_t temp = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	795b      	ldrb	r3, [r3, #5]
 8000558:	2b03      	cmp	r3, #3
 800055a:	d820      	bhi.n	800059e <GPIO_Init+0x62>
	{
		// Non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	795b      	ldrb	r3, [r3, #5]
 8000560:	461a      	mov	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	2103      	movs	r1, #3
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	43db      	mvns	r3, r3
 8000582:	4619      	mov	r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	400a      	ands	r2, r1
 800058a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6819      	ldr	r1, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	430a      	orrs	r2, r1
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	e0c3      	b.n	8000726 <GPIO_Init+0x1ea>
	}
	else
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2103      	movs	r1, #3
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	400a      	ands	r2, r1
 80005ba:	601a      	str	r2, [r3, #0]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	795b      	ldrb	r3, [r3, #5]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d117      	bne.n	80005f4 <GPIO_Init+0xb8>
		{
			// 1. Configure the FTSR
			// first we clear the corresponding RTSR bit so that we only have FTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c4:	4b96      	ldr	r3, [pc, #600]	@ (8000820 <GPIO_Init+0x2e4>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	7912      	ldrb	r2, [r2, #4]
 80005cc:	4611      	mov	r1, r2
 80005ce:	2201      	movs	r2, #1
 80005d0:	408a      	lsls	r2, r1
 80005d2:	43d2      	mvns	r2, r2
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a92      	ldr	r2, [pc, #584]	@ (8000820 <GPIO_Init+0x2e4>)
 80005d8:	400b      	ands	r3, r1
 80005da:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005dc:	4b90      	ldr	r3, [pc, #576]	@ (8000820 <GPIO_Init+0x2e4>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7912      	ldrb	r2, [r2, #4]
 80005e4:	4611      	mov	r1, r2
 80005e6:	2201      	movs	r2, #1
 80005e8:	408a      	lsls	r2, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a8c      	ldr	r2, [pc, #560]	@ (8000820 <GPIO_Init+0x2e4>)
 80005ee:	430b      	orrs	r3, r1
 80005f0:	60d3      	str	r3, [r2, #12]
 80005f2:	e035      	b.n	8000660 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	795b      	ldrb	r3, [r3, #5]
 80005f8:	2b05      	cmp	r3, #5
 80005fa:	d117      	bne.n	800062c <GPIO_Init+0xf0>
		{
			// 1. Configure the RTSR
			// first we clear the corresponding FTSR bit so that we only have RTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fc:	4b88      	ldr	r3, [pc, #544]	@ (8000820 <GPIO_Init+0x2e4>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7912      	ldrb	r2, [r2, #4]
 8000604:	4611      	mov	r1, r2
 8000606:	2201      	movs	r2, #1
 8000608:	408a      	lsls	r2, r1
 800060a:	43d2      	mvns	r2, r2
 800060c:	4611      	mov	r1, r2
 800060e:	4a84      	ldr	r2, [pc, #528]	@ (8000820 <GPIO_Init+0x2e4>)
 8000610:	400b      	ands	r3, r1
 8000612:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000614:	4b82      	ldr	r3, [pc, #520]	@ (8000820 <GPIO_Init+0x2e4>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	4611      	mov	r1, r2
 8000624:	4a7e      	ldr	r2, [pc, #504]	@ (8000820 <GPIO_Init+0x2e4>)
 8000626:	430b      	orrs	r3, r1
 8000628:	6093      	str	r3, [r2, #8]
 800062a:	e019      	b.n	8000660 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	795b      	ldrb	r3, [r3, #5]
 8000630:	2b06      	cmp	r3, #6
 8000632:	d115      	bne.n	8000660 <GPIO_Init+0x124>
		{
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000634:	4b7a      	ldr	r3, [pc, #488]	@ (8000820 <GPIO_Init+0x2e4>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	7912      	ldrb	r2, [r2, #4]
 800063c:	4611      	mov	r1, r2
 800063e:	2201      	movs	r2, #1
 8000640:	408a      	lsls	r2, r1
 8000642:	4611      	mov	r1, r2
 8000644:	4a76      	ldr	r2, [pc, #472]	@ (8000820 <GPIO_Init+0x2e4>)
 8000646:	430b      	orrs	r3, r1
 8000648:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064a:	4b75      	ldr	r3, [pc, #468]	@ (8000820 <GPIO_Init+0x2e4>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	7912      	ldrb	r2, [r2, #4]
 8000652:	4611      	mov	r1, r2
 8000654:	2201      	movs	r2, #1
 8000656:	408a      	lsls	r2, r1
 8000658:	4611      	mov	r1, r2
 800065a:	4a71      	ldr	r2, [pc, #452]	@ (8000820 <GPIO_Init+0x2e4>)
 800065c:	430b      	orrs	r3, r1
 800065e:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		// Calculate the register number EXTICR1/EXTICR2/EXTICR3/EXTICR4
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	089b      	lsrs	r3, r3, #2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	617b      	str	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a6d      	ldr	r2, [pc, #436]	@ (8000824 <GPIO_Init+0x2e8>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d039      	beq.n	80006e8 <GPIO_Init+0x1ac>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a6b      	ldr	r2, [pc, #428]	@ (8000828 <GPIO_Init+0x2ec>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d032      	beq.n	80006e4 <GPIO_Init+0x1a8>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a6a      	ldr	r2, [pc, #424]	@ (800082c <GPIO_Init+0x2f0>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d02b      	beq.n	80006e0 <GPIO_Init+0x1a4>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a68      	ldr	r2, [pc, #416]	@ (8000830 <GPIO_Init+0x2f4>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d024      	beq.n	80006dc <GPIO_Init+0x1a0>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a67      	ldr	r2, [pc, #412]	@ (8000834 <GPIO_Init+0x2f8>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d01d      	beq.n	80006d8 <GPIO_Init+0x19c>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a65      	ldr	r2, [pc, #404]	@ (8000838 <GPIO_Init+0x2fc>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d016      	beq.n	80006d4 <GPIO_Init+0x198>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a64      	ldr	r2, [pc, #400]	@ (800083c <GPIO_Init+0x300>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d00f      	beq.n	80006d0 <GPIO_Init+0x194>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a62      	ldr	r2, [pc, #392]	@ (8000840 <GPIO_Init+0x304>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d008      	beq.n	80006cc <GPIO_Init+0x190>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a61      	ldr	r2, [pc, #388]	@ (8000844 <GPIO_Init+0x308>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d101      	bne.n	80006c8 <GPIO_Init+0x18c>
 80006c4:	2308      	movs	r3, #8
 80006c6:	e010      	b.n	80006ea <GPIO_Init+0x1ae>
 80006c8:	2300      	movs	r3, #0
 80006ca:	e00e      	b.n	80006ea <GPIO_Init+0x1ae>
 80006cc:	2307      	movs	r3, #7
 80006ce:	e00c      	b.n	80006ea <GPIO_Init+0x1ae>
 80006d0:	2306      	movs	r3, #6
 80006d2:	e00a      	b.n	80006ea <GPIO_Init+0x1ae>
 80006d4:	2305      	movs	r3, #5
 80006d6:	e008      	b.n	80006ea <GPIO_Init+0x1ae>
 80006d8:	2304      	movs	r3, #4
 80006da:	e006      	b.n	80006ea <GPIO_Init+0x1ae>
 80006dc:	2303      	movs	r3, #3
 80006de:	e004      	b.n	80006ea <GPIO_Init+0x1ae>
 80006e0:	2302      	movs	r3, #2
 80006e2:	e002      	b.n	80006ea <GPIO_Init+0x1ae>
 80006e4:	2301      	movs	r3, #1
 80006e6:	e000      	b.n	80006ea <GPIO_Init+0x1ae>
 80006e8:	2300      	movs	r3, #0
 80006ea:	74fb      	strb	r3, [r7, #19]
		SYSCFG_CLK_EN();
 80006ec:	4b56      	ldr	r3, [pc, #344]	@ (8000848 <GPIO_Init+0x30c>)
 80006ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f0:	4a55      	ldr	r2, [pc, #340]	@ (8000848 <GPIO_Init+0x30c>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp] |= (portcode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4));
 80006f8:	4a54      	ldr	r2, [pc, #336]	@ (800084c <GPIO_Init+0x310>)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3302      	adds	r3, #2
 80006fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	4951      	ldr	r1, [pc, #324]	@ (800084c <GPIO_Init+0x310>)
 8000706:	431a      	orrs	r2, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3302      	adds	r3, #2
 800070c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000710:	4b43      	ldr	r3, [pc, #268]	@ (8000820 <GPIO_Init+0x2e4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	7912      	ldrb	r2, [r2, #4]
 8000718:	4611      	mov	r1, r2
 800071a:	2201      	movs	r2, #1
 800071c:	408a      	lsls	r2, r1
 800071e:	4611      	mov	r1, r2
 8000720:	4a3f      	ldr	r2, [pc, #252]	@ (8000820 <GPIO_Init+0x2e4>)
 8000722:	430b      	orrs	r3, r1
 8000724:	6013      	str	r3, [r2, #0]

	}

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	799b      	ldrb	r3, [r3, #6]
 800072a:	461a      	mov	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	2103      	movs	r1, #3
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	400a      	ands	r2, r1
 8000754:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	6899      	ldr	r1, [r3, #8]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	430a      	orrs	r2, r1
 8000764:	609a      	str	r2, [r3, #8]

	// 3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	79db      	ldrb	r3, [r3, #7]
 800076a:	461a      	mov	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	68da      	ldr	r2, [r3, #12]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	2103      	movs	r1, #3
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	400a      	ands	r2, r1
 8000794:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	68d9      	ldr	r1, [r3, #12]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	60da      	str	r2, [r3, #12]

	// 4. Conigure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7a1b      	ldrb	r3, [r3, #8]
 80007aa:	461a      	mov	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	2101      	movs	r1, #1
 80007c4:	fa01 f303 	lsl.w	r3, r1, r3
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4619      	mov	r1, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	400a      	ands	r2, r1
 80007d2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6859      	ldr	r1, [r3, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	430a      	orrs	r2, r1
 80007e2:	605a      	str	r2, [r3, #4]

	// 5. configure the alt function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	795b      	ldrb	r3, [r3, #5]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d139      	bne.n	8000860 <GPIO_Init+0x324>
	{
		uint32_t pinpos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	f003 0307 	and.w	r3, r3, #7
 80007f4:	60fb      	str	r3, [r7, #12]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pinpos));
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7a5b      	ldrb	r3, [r3, #9]
 80007fa:	461a      	mov	r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_7)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	2b07      	cmp	r3, #7
 800080c:	d820      	bhi.n	8000850 <GPIO_Init+0x314>
		{
			// use AFL

			pGPIOHandle->pGPIOx->AFRL |= temp;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	6a19      	ldr	r1, [r3, #32]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	430a      	orrs	r2, r1
 800081c:	621a      	str	r2, [r3, #32]
		{
			// use AFH
			pGPIOHandle->pGPIOx->AFRH |= temp;
		}
	}
}
 800081e:	e01f      	b.n	8000860 <GPIO_Init+0x324>
 8000820:	40013c00 	.word	0x40013c00
 8000824:	40020000 	.word	0x40020000
 8000828:	40020400 	.word	0x40020400
 800082c:	40020800 	.word	0x40020800
 8000830:	40020c00 	.word	0x40020c00
 8000834:	40021000 	.word	0x40021000
 8000838:	40021400 	.word	0x40021400
 800083c:	40021800 	.word	0x40021800
 8000840:	40021c00 	.word	0x40021c00
 8000844:	40022000 	.word	0x40022000
 8000848:	40023800 	.word	0x40023800
 800084c:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	430a      	orrs	r2, r1
 800085e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <SPI_PeriheralControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_PeriheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d106      	bne.n	8000888 <SPI_PeriheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	601a      	str	r2, [r3, #0]
	}
	else if(EnOrDi == DISABLE)
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000886:	e008      	b.n	800089a <SPI_PeriheralControl+0x32>
	else if(EnOrDi == DISABLE)
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d105      	bne.n	800089a <SPI_PeriheralControl+0x32>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <SPI_ClockControl>:
 * @Note			-
 *
 *************************************************************************************************/
//#define SPI1							((GPIO_RegDef_t*)SPI1_BASEADDR)
void SPI_ClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d120      	bne.n	80008f8 <SPI_ClockControl+0x54>
	{
		if(pSPIx == SPI1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a22      	ldr	r2, [pc, #136]	@ (8000944 <SPI_ClockControl+0xa0>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d106      	bne.n	80008cc <SPI_ClockControl+0x28>
		{
			SPI1_CLK_EN();
 80008be:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <SPI_ClockControl+0xa4>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	4a21      	ldr	r2, [pc, #132]	@ (8000948 <SPI_ClockControl+0xa4>)
 80008c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008c8:	6453      	str	r3, [r2, #68]	@ 0x44
		else if(pSPIx == SPI3)
		{
			SPI3_CLK_DI();
		}
	}
}
 80008ca:	e035      	b.n	8000938 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI2)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a1f      	ldr	r2, [pc, #124]	@ (800094c <SPI_ClockControl+0xa8>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d106      	bne.n	80008e2 <SPI_ClockControl+0x3e>
			SPI2_CLK_EN();
 80008d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <SPI_ClockControl+0xa4>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000948 <SPI_ClockControl+0xa4>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008e0:	e02a      	b.n	8000938 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI3)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000950 <SPI_ClockControl+0xac>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d126      	bne.n	8000938 <SPI_ClockControl+0x94>
			SPI3_CLK_EN();
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <SPI_ClockControl+0xa4>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a16      	ldr	r2, [pc, #88]	@ (8000948 <SPI_ClockControl+0xa4>)
 80008f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008f6:	e01f      	b.n	8000938 <SPI_ClockControl+0x94>
		if(pSPIx == SPI1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <SPI_ClockControl+0xa0>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d106      	bne.n	800090e <SPI_ClockControl+0x6a>
			SPI1_CLK_DI();
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <SPI_ClockControl+0xa4>)
 8000902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000904:	4a10      	ldr	r2, [pc, #64]	@ (8000948 <SPI_ClockControl+0xa4>)
 8000906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800090a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800090c:	e014      	b.n	8000938 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a0e      	ldr	r2, [pc, #56]	@ (800094c <SPI_ClockControl+0xa8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d106      	bne.n	8000924 <SPI_ClockControl+0x80>
			SPI2_CLK_DI();
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <SPI_ClockControl+0xa4>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	4a0b      	ldr	r2, [pc, #44]	@ (8000948 <SPI_ClockControl+0xa4>)
 800091c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000920:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000922:	e009      	b.n	8000938 <SPI_ClockControl+0x94>
		else if(pSPIx == SPI3)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <SPI_ClockControl+0xac>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d105      	bne.n	8000938 <SPI_ClockControl+0x94>
			SPI3_CLK_DI();
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <SPI_ClockControl+0xa4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	4a05      	ldr	r2, [pc, #20]	@ (8000948 <SPI_ClockControl+0xa4>)
 8000932:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000936:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40013000 	.word	0x40013000
 8000948:	40023800 	.word	0x40023800
 800094c:	40003800 	.word	0x40003800
 8000950:	40003c00 	.word	0x40003c00

08000954 <SPI_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
//	uint8_t DFF;						/*DFF can either be 8 bit or 16 bits*/
//	uint8_t CPOL;						/*CPOL is used to select the clock polarity*/
//	uint8_t CPHA;						/*CPHA is used to select the clock phase*/
//	uint8_t SSM;						/*SSM is Slave Select Management which is ued to select what slave to communicate to*/

	uint32_t temp = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]

	// enable peripheral clock
	SPI_ClockControl(pSPIHandle->pSPIx, ENABLE);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2101      	movs	r1, #1
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff9c 	bl	80008a4 <SPI_ClockControl>

	// 1. Configure the device mode
	temp = pSPIHandle->SPIConfig.BusConfig << 2;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	795b      	ldrb	r3, [r3, #5]
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	60fb      	str	r3, [r7, #12]

	// 2. Configure the Bus communication type
	if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_FULLDUPLEX)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	795b      	ldrb	r3, [r3, #5]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d104      	bne.n	8000986 <SPI_Init+0x32>
	{
		//Clear BIDIMODE (bit 15)
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	e014      	b.n	80009b0 <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_HALFDUPLES)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	795b      	ldrb	r3, [r3, #5]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d104      	bne.n	8000998 <SPI_Init+0x44>
	{
		//Set BIDIMODE (bit 15)
		temp |= (1 << SPI_CR1_BIDIMODE);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e00b      	b.n	80009b0 <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPIConfig.BusConfig == SPI_BUSCONFIG_SIMPLEX)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	795b      	ldrb	r3, [r3, #5]
 800099c:	2b03      	cmp	r3, #3
 800099e:	d107      	bne.n	80009b0 <SPI_Init+0x5c>
	{
		//clear BIDIMODE (bit 15) and set RXONLY (bit 10)
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009a6:	60fb      	str	r3, [r7, #12]
		temp |= (1 << SPI_CR1_RXONLY);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ae:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the Clock Speed
	temp |= pSPIHandle->SPIConfig.SclkSpeed << SPI_CR1_BR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	799b      	ldrb	r3, [r3, #6]
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]

	// 4. DFF configuration
	temp |= pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	79db      	ldrb	r3, [r3, #7]
 80009c0:	02db      	lsls	r3, r3, #11
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]

	// 5. Configure CPOL
	temp |= pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	7a1b      	ldrb	r3, [r3, #8]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

	// 6. Configure CPHA
	temp |= pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7a5b      	ldrb	r3, [r3, #9]
 80009d8:	461a      	mov	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 |= temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6819      	ldr	r1, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	430a      	orrs	r2, r1
 80009ee:	601a      	str	r2, [r3, #0]

}
 80009f0:	bf00      	nop
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SPI_SendData>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
	while(len > 0)
 8000a04:	e023      	b.n	8000a4e <SPI_SendData+0x56>
	{
		while(!(pSPIx->SR & (1<<SPI_SR_TXE)));
 8000a06:	bf00      	nop
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0f9      	beq.n	8000a08 <SPI_SendData+0x10>
		if((pSPIx->CR1 & (1 << SPI_CR1_DFF)) == SPI_DFF_8BIT)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10b      	bne.n	8000a38 <SPI_SendData+0x40>
		{
			// shift register is 16 bits
			pSPIx->DR = *(uint16_t*)pTxBuffer;
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	60da      	str	r2, [r3, #12]
			len-=2;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3b02      	subs	r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++ 	;
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	e00a      	b.n	8000a4e <SPI_SendData+0x56>
		}
		else
		{
			// shift register is 8 bits
			pSPIx->DR = *(uint8_t*)pTxBuffer;
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	60da      	str	r2, [r3, #12]
			len--;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1d8      	bne.n	8000a06 <SPI_SendData+0xe>
		}

	}

}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <__libc_init_array>:
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	4d0d      	ldr	r5, [pc, #52]	@ (8000a98 <__libc_init_array+0x38>)
 8000a64:	4c0d      	ldr	r4, [pc, #52]	@ (8000a9c <__libc_init_array+0x3c>)
 8000a66:	1b64      	subs	r4, r4, r5
 8000a68:	10a4      	asrs	r4, r4, #2
 8000a6a:	2600      	movs	r6, #0
 8000a6c:	42a6      	cmp	r6, r4
 8000a6e:	d109      	bne.n	8000a84 <__libc_init_array+0x24>
 8000a70:	4d0b      	ldr	r5, [pc, #44]	@ (8000aa0 <__libc_init_array+0x40>)
 8000a72:	4c0c      	ldr	r4, [pc, #48]	@ (8000aa4 <__libc_init_array+0x44>)
 8000a74:	f000 f818 	bl	8000aa8 <_init>
 8000a78:	1b64      	subs	r4, r4, r5
 8000a7a:	10a4      	asrs	r4, r4, #2
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	42a6      	cmp	r6, r4
 8000a80:	d105      	bne.n	8000a8e <__libc_init_array+0x2e>
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a88:	4798      	blx	r3
 8000a8a:	3601      	adds	r6, #1
 8000a8c:	e7ee      	b.n	8000a6c <__libc_init_array+0xc>
 8000a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a92:	4798      	blx	r3
 8000a94:	3601      	adds	r6, #1
 8000a96:	e7f2      	b.n	8000a7e <__libc_init_array+0x1e>
 8000a98:	08000ad4 	.word	0x08000ad4
 8000a9c:	08000ad4 	.word	0x08000ad4
 8000aa0:	08000ad4 	.word	0x08000ad4
 8000aa4:	08000ad8 	.word	0x08000ad8

08000aa8 <_init>:
 8000aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aaa:	bf00      	nop
 8000aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aae:	bc08      	pop	{r3}
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	4770      	bx	lr

08000ab4 <_fini>:
 8000ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab6:	bf00      	nop
 8000ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aba:	bc08      	pop	{r3}
 8000abc:	469e      	mov	lr, r3
 8000abe:	4770      	bx	lr
